
remote_emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004a08  08004a08  00005a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a48  08004a48  00006030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004a48  08004a48  00006030  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004a48  08004a48  00006030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a48  08004a48  00005a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08004a50  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000030  08004a80  00006030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004a80  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1e8  00000000  00000000  00006059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d8  00000000  00000000  00014241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00016420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af4  00000000  00000000  00017210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181c3  00000000  00000000  00017d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc59  00000000  00000000  0002fec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee4b  00000000  00000000  0003fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003abc  00000000  00000000  000ce9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d246c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	080049f0 	.word	0x080049f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	080049f0 	.word	0x080049f0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a25      	ldr	r2, [pc, #148]	@ (80006f4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d11c      	bne.n	800069e <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET)
 8000664:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000668:	4823      	ldr	r0, [pc, #140]	@ (80006f8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800066a:	f002 f989 	bl	8002980 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d109      	bne.n	8000688 <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800067a:	4820      	ldr	r0, [pc, #128]	@ (80006fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800067c:	f002 f997 	bl	80029ae <HAL_GPIO_WritePin>
			arm = 172;
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000682:	22ac      	movs	r2, #172	@ 0xac
 8000684:	601a      	str	r2, [r3, #0]
	}
	else if (htim == &htim4)
	{
		HAL_UART_Transmit_DMA(&huart1, sbus_out, SBUS_MAX_SIZE);
	}
}
 8000686:	e1cb      	b.n	8000a20 <HAL_TIM_PeriodElapsedCallback+0x3cc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800068e:	481b      	ldr	r0, [pc, #108]	@ (80006fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000690:	f002 f98d 	bl	80029ae <HAL_GPIO_WritePin>
			arm = 1811;
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000696:	f240 7213 	movw	r2, #1811	@ 0x713
 800069a:	601a      	str	r2, [r3, #0]
}
 800069c:	e1c0      	b.n	8000a20 <HAL_TIM_PeriodElapsedCallback+0x3cc>
	else if (htim == &htim2)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a18      	ldr	r2, [pc, #96]	@ (8000704 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d13a      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0xc8>
		if (arm == 1811)
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f240 7213 	movw	r2, #1811	@ 0x713
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d11b      	bne.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x96>
			thr = ((float)(1811-172) * ((float)adc/4095)) + 172;
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fdfe 	bl	80002b8 <__aeabi_ui2f>
 80006bc:	4603      	mov	r3, r0
 80006be:	4913      	ldr	r1, [pc, #76]	@ (800070c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff05 	bl	80004d0 <__aeabi_fdiv>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4911      	ldr	r1, [pc, #68]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fe4c 	bl	8000368 <__aeabi_fmul>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4910      	ldr	r1, [pc, #64]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fd3f 	bl	8000158 <__addsf3>
 80006da:	4603      	mov	r3, r0
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff93 	bl	8000608 <__aeabi_f2iz>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	e19a      	b.n	8000a20 <HAL_TIM_PeriodElapsedCallback+0x3cc>
			thr = 172;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80006ec:	22ac      	movs	r2, #172	@ 0xac
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	e196      	b.n	8000a20 <HAL_TIM_PeriodElapsedCallback+0x3cc>
 80006f2:	bf00      	nop
 80006f4:	2000007c 	.word	0x2000007c
 80006f8:	40010c00 	.word	0x40010c00
 80006fc:	40011000 	.word	0x40011000
 8000700:	2000001c 	.word	0x2000001c
 8000704:	200000c4 	.word	0x200000c4
 8000708:	2000029e 	.word	0x2000029e
 800070c:	457ff000 	.word	0x457ff000
 8000710:	44cce000 	.word	0x44cce000
 8000714:	432c0000 	.word	0x432c0000
 8000718:	20000020 	.word	0x20000020
	else if (htim == &htim3)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4aa8      	ldr	r2, [pc, #672]	@ (80009c0 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	f040 8174 	bne.w	8000a0e <HAL_TIM_PeriodElapsedCallback+0x3ba>
		ch[2] = thr;
 8000726:	4ba7      	ldr	r3, [pc, #668]	@ (80009c4 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	b21a      	sxth	r2, r3
 800072c:	4ba6      	ldr	r3, [pc, #664]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800072e:	809a      	strh	r2, [r3, #4]
		ch[4] = arm;
 8000730:	4ba6      	ldr	r3, [pc, #664]	@ (80009cc <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	b21a      	sxth	r2, r3
 8000736:	4ba4      	ldr	r3, [pc, #656]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000738:	811a      	strh	r2, [r3, #8]
		sbus_out[0] = (uint8_t)(0x0F);
 800073a:	4ba5      	ldr	r3, [pc, #660]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800073c:	220f      	movs	r2, #15
 800073e:	701a      	strb	r2, [r3, #0]
		sbus_out[1] = (uint8_t)(ch[0] & 0x07FF);
 8000740:	4ba1      	ldr	r3, [pc, #644]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4ba1      	ldr	r3, [pc, #644]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800074a:	705a      	strb	r2, [r3, #1]
		sbus_out[2] = (uint8_t)(((ch[0] & 0x07FF) >> 8) | ((ch[1] & 0x07FF) << 3));
 800074c:	4b9e      	ldr	r3, [pc, #632]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800074e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000752:	b29b      	uxth	r3, r3
 8000754:	121b      	asrs	r3, r3, #8
 8000756:	b25b      	sxtb	r3, r3
 8000758:	f003 0307 	and.w	r3, r3, #7
 800075c:	b25a      	sxtb	r2, r3
 800075e:	4b9a      	ldr	r3, [pc, #616]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000760:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000764:	b25b      	sxtb	r3, r3
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	b25b      	sxtb	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b25b      	sxtb	r3, r3
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b97      	ldr	r3, [pc, #604]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000772:	709a      	strb	r2, [r3, #2]
		sbus_out[3] = (uint8_t)(((ch[1] & 0x07FF) >> 5) | ((ch[2] & 0x07FF) << 6));
 8000774:	4b94      	ldr	r3, [pc, #592]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000776:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800077a:	b29b      	uxth	r3, r3
 800077c:	115b      	asrs	r3, r3, #5
 800077e:	b25b      	sxtb	r3, r3
 8000780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000784:	b25a      	sxtb	r2, r3
 8000786:	4b90      	ldr	r3, [pc, #576]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000788:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800078c:	b25b      	sxtb	r3, r3
 800078e:	019b      	lsls	r3, r3, #6
 8000790:	b25b      	sxtb	r3, r3
 8000792:	4313      	orrs	r3, r2
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b8d      	ldr	r3, [pc, #564]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800079a:	70da      	strb	r2, [r3, #3]
		sbus_out[4] = (uint8_t)(((ch[2] & 0x07FF) >> 2));
 800079c:	4b8a      	ldr	r3, [pc, #552]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800079e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	109b      	asrs	r3, r3, #2
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b89      	ldr	r3, [pc, #548]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80007aa:	711a      	strb	r2, [r3, #4]
		sbus_out[5] = (uint8_t)(((ch[2] & 0x07FF) >> 10) | ((ch[3] & 0x07FF) << 1));
 80007ac:	4b86      	ldr	r3, [pc, #536]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80007ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	129b      	asrs	r3, r3, #10
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	b25a      	sxtb	r2, r3
 80007be:	4b82      	ldr	r3, [pc, #520]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80007c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	4313      	orrs	r3, r2
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b7f      	ldr	r3, [pc, #508]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80007d2:	715a      	strb	r2, [r3, #5]
		sbus_out[6] = (uint8_t)(((ch[3] & 0x07FF) >> 7) | ((ch[4] & 0x07FF) << 4));
 80007d4:	4b7c      	ldr	r3, [pc, #496]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80007d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	11db      	asrs	r3, r3, #7
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	f003 030f 	and.w	r3, r3, #15
 80007e4:	b25a      	sxtb	r2, r3
 80007e6:	4b78      	ldr	r3, [pc, #480]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80007e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b75      	ldr	r3, [pc, #468]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80007fa:	719a      	strb	r2, [r3, #6]
		sbus_out[7] = (uint8_t)(((ch[4] & 0x07FF) >> 4) | ((ch[5] & 0x07FF) << 7));
 80007fc:	4b72      	ldr	r3, [pc, #456]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80007fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000802:	b29b      	uxth	r3, r3
 8000804:	111b      	asrs	r3, r3, #4
 8000806:	b25b      	sxtb	r3, r3
 8000808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800080c:	b25a      	sxtb	r2, r3
 800080e:	4b6e      	ldr	r3, [pc, #440]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000810:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000814:	b25b      	sxtb	r3, r3
 8000816:	01db      	lsls	r3, r3, #7
 8000818:	b25b      	sxtb	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b25b      	sxtb	r3, r3
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b6b      	ldr	r3, [pc, #428]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000822:	71da      	strb	r2, [r3, #7]
		sbus_out[8] = (uint8_t)(((ch[5] & 0x07FF) >> 1));
 8000824:	4b68      	ldr	r3, [pc, #416]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000826:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800082a:	b29b      	uxth	r3, r3
 800082c:	105b      	asrs	r3, r3, #1
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b67      	ldr	r3, [pc, #412]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000832:	721a      	strb	r2, [r3, #8]
		sbus_out[9] = (uint8_t)(((ch[5] & 0x07FF) >> 9)  | ((ch[6] & 0x07FF) << 2));
 8000834:	4b64      	ldr	r3, [pc, #400]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000836:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800083a:	b29b      	uxth	r3, r3
 800083c:	125b      	asrs	r3, r3, #9
 800083e:	b25b      	sxtb	r3, r3
 8000840:	f003 0303 	and.w	r3, r3, #3
 8000844:	b25a      	sxtb	r2, r3
 8000846:	4b60      	ldr	r3, [pc, #384]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000848:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800084c:	b25b      	sxtb	r3, r3
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b25b      	sxtb	r3, r3
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b5d      	ldr	r3, [pc, #372]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800085a:	725a      	strb	r2, [r3, #9]
		sbus_out[10] = (uint8_t)(((ch[6] & 0x07FF) >> 6)  | ((ch[7] & 0x07FF) << 5));
 800085c:	4b5a      	ldr	r3, [pc, #360]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800085e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000862:	b29b      	uxth	r3, r3
 8000864:	119b      	asrs	r3, r3, #6
 8000866:	b25b      	sxtb	r3, r3
 8000868:	f003 031f 	and.w	r3, r3, #31
 800086c:	b25a      	sxtb	r2, r3
 800086e:	4b56      	ldr	r3, [pc, #344]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000870:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000874:	b25b      	sxtb	r3, r3
 8000876:	015b      	lsls	r3, r3, #5
 8000878:	b25b      	sxtb	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b25b      	sxtb	r3, r3
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b53      	ldr	r3, [pc, #332]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000882:	729a      	strb	r2, [r3, #10]
		sbus_out[11] = (uint8_t)(((ch[7] & 0x07FF) >> 3));
 8000884:	4b50      	ldr	r3, [pc, #320]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000886:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800088a:	b29b      	uxth	r3, r3
 800088c:	10db      	asrs	r3, r3, #3
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b4f      	ldr	r3, [pc, #316]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000892:	72da      	strb	r2, [r3, #11]
		sbus_out[12] = (uint8_t)((ch[8] & 0x07FF));
 8000894:	4b4c      	ldr	r3, [pc, #304]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000896:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b4c      	ldr	r3, [pc, #304]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800089e:	731a      	strb	r2, [r3, #12]
		sbus_out[13] = (uint8_t)(((ch[8] & 0x07FF) >> 8) | ((ch[9]  & 0x07FF) << 3));
 80008a0:	4b49      	ldr	r3, [pc, #292]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80008a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	121b      	asrs	r3, r3, #8
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	f003 0307 	and.w	r3, r3, #7
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	4b45      	ldr	r3, [pc, #276]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80008b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4b42      	ldr	r3, [pc, #264]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80008c6:	735a      	strb	r2, [r3, #13]
		sbus_out[14] = (uint8_t)(((ch[9] & 0x07FF) >> 5) | ((ch[10] & 0x07FF) << 6));
 80008c8:	4b3f      	ldr	r3, [pc, #252]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80008ca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	115b      	asrs	r3, r3, #5
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008d8:	b25a      	sxtb	r2, r3
 80008da:	4b3b      	ldr	r3, [pc, #236]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80008dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	019b      	lsls	r3, r3, #6
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b38      	ldr	r3, [pc, #224]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80008ee:	739a      	strb	r2, [r3, #14]
		sbus_out[15] = (uint8_t)(((ch[10] & 0x07FF) >> 2));
 80008f0:	4b35      	ldr	r3, [pc, #212]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80008f2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	109b      	asrs	r3, r3, #2
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b34      	ldr	r3, [pc, #208]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80008fe:	73da      	strb	r2, [r3, #15]
		sbus_out[16] = (uint8_t)(((ch[10] & 0x07FF) >> 10) | ((ch[11] & 0x07FF) << 1));
 8000900:	4b31      	ldr	r3, [pc, #196]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000902:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000906:	b29b      	uxth	r3, r3
 8000908:	129b      	asrs	r3, r3, #10
 800090a:	b25b      	sxtb	r3, r3
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	b25a      	sxtb	r2, r3
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000914:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000918:	b25b      	sxtb	r3, r3
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	b25b      	sxtb	r3, r3
 800091e:	4313      	orrs	r3, r2
 8000920:	b25b      	sxtb	r3, r3
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000926:	741a      	strb	r2, [r3, #16]
		sbus_out[17] = (uint8_t)(((ch[11] & 0x07FF) >> 7)  | ((ch[12] & 0x07FF) << 4));
 8000928:	4b27      	ldr	r3, [pc, #156]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800092a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800092e:	b29b      	uxth	r3, r3
 8000930:	11db      	asrs	r3, r3, #7
 8000932:	b25b      	sxtb	r3, r3
 8000934:	f003 030f 	and.w	r3, r3, #15
 8000938:	b25a      	sxtb	r2, r3
 800093a:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800093c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000940:	b25b      	sxtb	r3, r3
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	b25b      	sxtb	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b25b      	sxtb	r3, r3
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800094e:	745a      	strb	r2, [r3, #17]
		sbus_out[18] = (uint8_t)(((ch[12] & 0x07FF) >> 4)  | ((ch[13] & 0x07FF) << 7));
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000952:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000956:	b29b      	uxth	r3, r3
 8000958:	111b      	asrs	r3, r3, #4
 800095a:	b25b      	sxtb	r3, r3
 800095c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000960:	b25a      	sxtb	r2, r3
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000964:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000968:	b25b      	sxtb	r3, r3
 800096a:	01db      	lsls	r3, r3, #7
 800096c:	b25b      	sxtb	r3, r3
 800096e:	4313      	orrs	r3, r2
 8000970:	b25b      	sxtb	r3, r3
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000976:	749a      	strb	r2, [r3, #18]
		sbus_out[19] = (uint8_t)(((ch[13] & 0x07FF) >> 1));
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800097a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800097e:	b29b      	uxth	r3, r3
 8000980:	105b      	asrs	r3, r3, #1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000986:	74da      	strb	r2, [r3, #19]
		sbus_out[20] = (uint8_t)(((ch[13] & 0x07FF) >> 9)  | ((ch[14] & 0x07FF) << 2));
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800098a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800098e:	b29b      	uxth	r3, r3
 8000990:	125b      	asrs	r3, r3, #9
 8000992:	b25b      	sxtb	r3, r3
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	b25a      	sxtb	r2, r3
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800099c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80009ae:	751a      	strb	r2, [r3, #20]
		sbus_out[21] = (uint8_t)(((ch[14] & 0x07FF) >> 6)  | ((ch[15] & 0x07FF) << 5));
 80009b0:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80009b2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	119b      	asrs	r3, r3, #6
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	e00a      	b.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x380>
 80009be:	bf00      	nop
 80009c0:	2000010c 	.word	0x2000010c
 80009c4:	20000020 	.word	0x20000020
 80009c8:	2000026c 	.word	0x2000026c
 80009cc:	2000001c 	.word	0x2000001c
 80009d0:	20000000 	.word	0x20000000
 80009d4:	f003 031f 	and.w	r3, r3, #31
 80009d8:	b25a      	sxtb	r2, r3
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80009dc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	015b      	lsls	r3, r3, #5
 80009e4:	b25b      	sxtb	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80009ee:	755a      	strb	r2, [r3, #21]
		sbus_out[22] = (uint8_t)(((ch[15] & 0x07FF) >> 3));
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80009f2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	10db      	asrs	r3, r3, #3
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80009fe:	759a      	strb	r2, [r3, #22]
		sbus_out[23] = (uint8_t)(0x00 | (0x00 * CH17_MASK_) | (0x00 * CH18_MASK_) | (0x00 * FAILSAFE_MASK_) | (0x00 * LOST_FRAME_MASK_));
 8000a00:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	75da      	strb	r2, [r3, #23]
		sbus_out[24] = (uint8_t)(0x00);
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	e008      	b.n	8000a20 <HAL_TIM_PeriodElapsedCallback+0x3cc>
	else if (htim == &htim4)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a07      	ldr	r2, [pc, #28]	@ (8000a30 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d104      	bne.n	8000a20 <HAL_TIM_PeriodElapsedCallback+0x3cc>
		HAL_UART_Transmit_DMA(&huart1, sbus_out, SBUS_MAX_SIZE);
 8000a16:	2219      	movs	r2, #25
 8000a18:	4904      	ldr	r1, [pc, #16]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000a1a:	4806      	ldr	r0, [pc, #24]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8000a1c:	f003 f99e 	bl	8003d5c <HAL_UART_Transmit_DMA>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000026c 	.word	0x2000026c
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000154 	.word	0x20000154
 8000a34:	2000019c 	.word	0x2000019c

08000a38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a06      	ldr	r2, [pc, #24]	@ (8000a5c <HAL_UART_RxCpltCallback+0x24>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d104      	bne.n	8000a52 <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart1, sbus_out, SBUS_MAX_SIZE);
 8000a48:	2219      	movs	r2, #25
 8000a4a:	4905      	ldr	r1, [pc, #20]	@ (8000a60 <HAL_UART_RxCpltCallback+0x28>)
 8000a4c:	4803      	ldr	r0, [pc, #12]	@ (8000a5c <HAL_UART_RxCpltCallback+0x24>)
 8000a4e:	f003 f985 	bl	8003d5c <HAL_UART_Transmit_DMA>
	}
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000019c 	.word	0x2000019c
 8000a60:	20000000 	.word	0x20000000

08000a64 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a06      	ldr	r2, [pc, #24]	@ (8000a8c <HAL_ADC_ConvCpltCallback+0x28>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d106      	bne.n	8000a84 <HAL_ADC_ConvCpltCallback+0x20>
    {
        adc = HAL_ADC_GetValue(&hadc1);
 8000a76:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a78:	f000 ff2e 	bl	80018d8 <HAL_ADC_GetValue>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <HAL_ADC_ConvCpltCallback+0x30>)
 8000a82:	801a      	strh	r2, [r3, #0]
    }
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40012400 	.word	0x40012400
 8000a90:	2000004c 	.word	0x2000004c
 8000a94:	2000029e 	.word	0x2000029e

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f000 fd2b 	bl	80014f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f857 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f000 fa7b 	bl	8000fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aaa:	f000 fa53 	bl	8000f54 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000aae:	f000 fa23 	bl	8000ef8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ab2:	f000 f8e9 	bl	8000c88 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ab6:	f000 f937 	bl	8000d28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000aba:	f000 f981 	bl	8000dc0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000abe:	f000 f9cd 	bl	8000e5c <MX_TIM4_Init>
  MX_ADC1_Init();
 8000ac2:	f000 f8a3 	bl	8000c0c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000ac6:	481b      	ldr	r0, [pc, #108]	@ (8000b34 <main+0x9c>)
 8000ac8:	f001 f96e 	bl	8001da8 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000acc:	481a      	ldr	r0, [pc, #104]	@ (8000b38 <main+0xa0>)
 8000ace:	f002 fd53 	bl	8003578 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ad2:	481a      	ldr	r0, [pc, #104]	@ (8000b3c <main+0xa4>)
 8000ad4:	f002 fd50 	bl	8003578 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000ad8:	4819      	ldr	r0, [pc, #100]	@ (8000b40 <main+0xa8>)
 8000ada:	f002 fd4d 	bl	8003578 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000ade:	4819      	ldr	r0, [pc, #100]	@ (8000b44 <main+0xac>)
 8000ae0:	f002 fd4a 	bl	8003578 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit_DMA(&huart1, sbus_out, SBUS_MAX_SIZE);
 8000ae4:	2219      	movs	r2, #25
 8000ae6:	4918      	ldr	r1, [pc, #96]	@ (8000b48 <main+0xb0>)
 8000ae8:	4818      	ldr	r0, [pc, #96]	@ (8000b4c <main+0xb4>)
 8000aea:	f003 f937 	bl	8003d5c <HAL_UART_Transmit_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8000aee:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <main+0x9c>)
 8000af0:	f000 fe3c 	bl	800176c <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  for (int i = 0; i < 16; i++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	e007      	b.n	8000b0a <main+0x72>
  {
	  ch[i] = 171;
 8000afa:	4a15      	ldr	r2, [pc, #84]	@ (8000b50 <main+0xb8>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	21ab      	movs	r1, #171	@ 0xab
 8000b00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < 16; i++)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3301      	adds	r3, #1
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	ddf4      	ble.n	8000afa <main+0x62>
  }

  ch[0] = 995;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <main+0xb8>)
 8000b12:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8000b16:	801a      	strh	r2, [r3, #0]
  ch[1] = 995;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <main+0xb8>)
 8000b1a:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8000b1e:	805a      	strh	r2, [r3, #2]
  ch[2] = 172;
 8000b20:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <main+0xb8>)
 8000b22:	22ac      	movs	r2, #172	@ 0xac
 8000b24:	809a      	strh	r2, [r3, #4]
  ch[3] = 995;
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <main+0xb8>)
 8000b28:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8000b2c:	80da      	strh	r2, [r3, #6]

  while (1)
 8000b2e:	bf00      	nop
 8000b30:	e7fd      	b.n	8000b2e <main+0x96>
 8000b32:	bf00      	nop
 8000b34:	2000004c 	.word	0x2000004c
 8000b38:	2000007c 	.word	0x2000007c
 8000b3c:	200000c4 	.word	0x200000c4
 8000b40:	2000010c 	.word	0x2000010c
 8000b44:	20000154 	.word	0x20000154
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	2000019c 	.word	0x2000019c
 8000b50:	2000026c 	.word	0x2000026c

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b5e:	2228      	movs	r2, #40	@ 0x28
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 ff18 	bl	8004998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b92:	2301      	movs	r3, #1
 8000b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ba0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 ff18 	bl	80029e0 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bb6:	f000 fa59 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 f984 	bl	8002ee4 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000be2:	f000 fa43 	bl	800106c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000be6:	2302      	movs	r3, #2
 8000be8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fb04 	bl	8003200 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bfe:	f000 fa35 	bl	800106c <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	@ 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <MX_ADC1_Init+0x74>)
 8000c1e:	4a19      	ldr	r2, [pc, #100]	@ (8000c84 <MX_ADC1_Init+0x78>)
 8000c20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c22:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <MX_ADC1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <MX_ADC1_Init+0x74>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_ADC1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <MX_ADC1_Init+0x74>)
 8000c36:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <MX_ADC1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_ADC1_Init+0x74>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c48:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <MX_ADC1_Init+0x74>)
 8000c4a:	f000 fcb7 	bl	80015bc <HAL_ADC_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c54:	f000 fa0a 	bl	800106c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000c60:	2305      	movs	r3, #5
 8000c62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_ADC1_Init+0x74>)
 8000c6a:	f000 ff09 	bl	8001a80 <HAL_ADC_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c74:	f000 f9fa 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000004c 	.word	0x2000004c
 8000c84:	40012400 	.word	0x40012400

08000c88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <MX_TIM1_Init+0x98>)
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d24 <MX_TIM1_Init+0x9c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_TIM1_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_TIM1_Init+0x98>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_TIM1_Init+0x98>)
 8000cb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <MX_TIM1_Init+0x98>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_TIM1_Init+0x98>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <MX_TIM1_Init+0x98>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cd0:	4813      	ldr	r0, [pc, #76]	@ (8000d20 <MX_TIM1_Init+0x98>)
 8000cd2:	f002 fc01 	bl	80034d8 <HAL_TIM_Base_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cdc:	f000 f9c6 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	4619      	mov	r1, r3
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <MX_TIM1_Init+0x98>)
 8000cee:	f002 fd85 	bl	80037fc <HAL_TIM_ConfigClockSource>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000cf8:	f000 f9b8 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d04:	463b      	mov	r3, r7
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_TIM1_Init+0x98>)
 8000d0a:	f002 ff67 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d14:	f000 f9aa 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000007c 	.word	0x2000007c
 8000d24:	40012c00 	.word	0x40012c00

08000d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	@ (8000dbc <MX_TIM2_Init+0x94>)
 8000d46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_TIM2_Init+0x94>)
 8000d4e:	2214      	movs	r2, #20
 8000d50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_TIM2_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d58:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_TIM2_Init+0x94>)
 8000d5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <MX_TIM2_Init+0x94>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_TIM2_Init+0x94>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d6c:	4813      	ldr	r0, [pc, #76]	@ (8000dbc <MX_TIM2_Init+0x94>)
 8000d6e:	f002 fbb3 	bl	80034d8 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d78:	f000 f978 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4619      	mov	r1, r3
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <MX_TIM2_Init+0x94>)
 8000d8a:	f002 fd37 	bl	80037fc <HAL_TIM_ConfigClockSource>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d94:	f000 f96a 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_TIM2_Init+0x94>)
 8000da6:	f002 ff19 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000db0:	f000 f95c 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200000c4 	.word	0x200000c4

08000dc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000dde:	4a1e      	ldr	r2, [pc, #120]	@ (8000e58 <MX_TIM3_Init+0x98>)
 8000de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000df0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000df4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e02:	4814      	ldr	r0, [pc, #80]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000e04:	f002 fb68 	bl	80034d8 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e0e:	f000 f92d 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000e20:	f002 fcec 	bl	80037fc <HAL_TIM_ConfigClockSource>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 f91f 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4806      	ldr	r0, [pc, #24]	@ (8000e54 <MX_TIM3_Init+0x94>)
 8000e3c:	f002 fece 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e46:	f000 f911 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000010c 	.word	0x2000010c
 8000e58:	40000400 	.word	0x40000400

08000e5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef4 <MX_TIM4_Init+0x98>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 55535;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e8c:	f64d 02ef 	movw	r2, #55535	@ 0xd8ef
 8000e90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e9e:	4814      	ldr	r0, [pc, #80]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000ea0:	f002 fb1a 	bl	80034d8 <HAL_TIM_Base_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000eaa:	f000 f8df 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000ebc:	f002 fc9e 	bl	80037fc <HAL_TIM_ConfigClockSource>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f000 f8d1 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4806      	ldr	r0, [pc, #24]	@ (8000ef0 <MX_TIM4_Init+0x94>)
 8000ed8:	f002 fe80 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ee2:	f000 f8c3 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000154 	.word	0x20000154
 8000ef4:	40000800 	.word	0x40000800

08000ef8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000efe:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <MX_USART1_UART_Init+0x54>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f04:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <MX_USART1_UART_Init+0x58>)
 8000f06:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f16:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_USART1_UART_Init+0x50>)
 8000f34:	f002 fec2 	bl	8003cbc <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000f3e:	f000 f895 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000019c 	.word	0x2000019c
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	000186a0 	.word	0x000186a0

08000f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <MX_DMA_Init+0x48>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f9c <MX_DMA_Init+0x48>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <MX_DMA_Init+0x48>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	200e      	movs	r0, #14
 8000f78:	f001 f8a5 	bl	80020c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f7c:	200e      	movs	r0, #14
 8000f7e:	f001 f8be 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	200f      	movs	r0, #15
 8000f88:	f001 f89d 	bl	80020c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f8c:	200f      	movs	r0, #15
 8000f8e:	f001 f8b6 	bl	80020fe <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001060 <MX_GPIO_Init+0xc0>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a29      	ldr	r2, [pc, #164]	@ (8001060 <MX_GPIO_Init+0xc0>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b27      	ldr	r3, [pc, #156]	@ (8001060 <MX_GPIO_Init+0xc0>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fcc:	4b24      	ldr	r3, [pc, #144]	@ (8001060 <MX_GPIO_Init+0xc0>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a23      	ldr	r2, [pc, #140]	@ (8001060 <MX_GPIO_Init+0xc0>)
 8000fd2:	f043 0320 	orr.w	r3, r3, #32
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b21      	ldr	r3, [pc, #132]	@ (8001060 <MX_GPIO_Init+0xc0>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <MX_GPIO_Init+0xc0>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8001060 <MX_GPIO_Init+0xc0>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <MX_GPIO_Init+0xc0>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <MX_GPIO_Init+0xc0>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a17      	ldr	r2, [pc, #92]	@ (8001060 <MX_GPIO_Init+0xc0>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <MX_GPIO_Init+0xc0>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101a:	4812      	ldr	r0, [pc, #72]	@ (8001064 <MX_GPIO_Init+0xc4>)
 800101c:	f001 fcc7 	bl	80029ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001020:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	480a      	ldr	r0, [pc, #40]	@ (8001064 <MX_GPIO_Init+0xc4>)
 800103a:	f001 fb1d 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800103e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_GPIO_Init+0xc8>)
 8001054:	f001 fb10 	bl	8002678 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	40011000 	.word	0x40011000
 8001068:	40010c00 	.word	0x40010c00

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <Error_Handler+0x8>

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <HAL_MspInit+0x5c>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <HAL_MspInit+0x5c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6193      	str	r3, [r2, #24]
 800108a:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_MspInit+0x5c>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_MspInit+0x5c>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <HAL_MspInit+0x5c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <HAL_MspInit+0x5c>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_MspInit+0x60>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <HAL_MspInit+0x60>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000

080010dc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a18      	ldr	r2, [pc, #96]	@ (8001158 <HAL_ADC_MspInit+0x7c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d129      	bne.n	8001150 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <HAL_ADC_MspInit+0x80>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a16      	ldr	r2, [pc, #88]	@ (800115c <HAL_ADC_MspInit+0x80>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <HAL_ADC_MspInit+0x80>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <HAL_ADC_MspInit+0x80>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a10      	ldr	r2, [pc, #64]	@ (800115c <HAL_ADC_MspInit+0x80>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <HAL_ADC_MspInit+0x80>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800112c:	2301      	movs	r3, #1
 800112e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001130:	2303      	movs	r3, #3
 8001132:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	4809      	ldr	r0, [pc, #36]	@ (8001160 <HAL_ADC_MspInit+0x84>)
 800113c:	f001 fa9c 	bl	8002678 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2012      	movs	r0, #18
 8001146:	f000 ffbe 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800114a:	2012      	movs	r0, #18
 800114c:	f000 ffd7 	bl	80020fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40012400 	.word	0x40012400
 800115c:	40021000 	.word	0x40021000
 8001160:	40010c00 	.word	0x40010c00

08001164 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a34      	ldr	r2, [pc, #208]	@ (8001244 <HAL_TIM_Base_MspInit+0xe0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d114      	bne.n	80011a0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001176:	4b34      	ldr	r3, [pc, #208]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4a33      	ldr	r2, [pc, #204]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 800117c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001180:	6193      	str	r3, [r2, #24]
 8001182:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2019      	movs	r0, #25
 8001194:	f000 ff97 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001198:	2019      	movs	r0, #25
 800119a:	f000 ffb0 	bl	80020fe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800119e:	e04c      	b.n	800123a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011a8:	d114      	bne.n	80011d4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011aa:	4b27      	ldr	r3, [pc, #156]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a26      	ldr	r2, [pc, #152]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	201c      	movs	r0, #28
 80011c8:	f000 ff7d 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011cc:	201c      	movs	r0, #28
 80011ce:	f000 ff96 	bl	80020fe <HAL_NVIC_EnableIRQ>
}
 80011d2:	e032      	b.n	800123a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1c      	ldr	r2, [pc, #112]	@ (800124c <HAL_TIM_Base_MspInit+0xe8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d114      	bne.n	8001208 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011de:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a19      	ldr	r2, [pc, #100]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	201d      	movs	r0, #29
 80011fc:	f000 ff63 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001200:	201d      	movs	r0, #29
 8001202:	f000 ff7c 	bl	80020fe <HAL_NVIC_EnableIRQ>
}
 8001206:	e018      	b.n	800123a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a10      	ldr	r2, [pc, #64]	@ (8001250 <HAL_TIM_Base_MspInit+0xec>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d113      	bne.n	800123a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001212:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a0c      	ldr	r2, [pc, #48]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	201e      	movs	r0, #30
 8001230:	f000 ff49 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001234:	201e      	movs	r0, #30
 8001236:	f000 ff62 	bl	80020fe <HAL_NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40012c00 	.word	0x40012c00
 8001248:	40021000 	.word	0x40021000
 800124c:	40000400 	.word	0x40000400
 8001250:	40000800 	.word	0x40000800

08001254 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a47      	ldr	r2, [pc, #284]	@ (800138c <HAL_UART_MspInit+0x138>)
 8001270:	4293      	cmp	r3, r2
 8001272:	f040 8086 	bne.w	8001382 <HAL_UART_MspInit+0x12e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001276:	4b46      	ldr	r3, [pc, #280]	@ (8001390 <HAL_UART_MspInit+0x13c>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4a45      	ldr	r2, [pc, #276]	@ (8001390 <HAL_UART_MspInit+0x13c>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6193      	str	r3, [r2, #24]
 8001282:	4b43      	ldr	r3, [pc, #268]	@ (8001390 <HAL_UART_MspInit+0x13c>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <HAL_UART_MspInit+0x13c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a3f      	ldr	r2, [pc, #252]	@ (8001390 <HAL_UART_MspInit+0x13c>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <HAL_UART_MspInit+0x13c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	4836      	ldr	r0, [pc, #216]	@ (8001394 <HAL_UART_MspInit+0x140>)
 80012bc:	f001 f9dc 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	4619      	mov	r1, r3
 80012d4:	482f      	ldr	r0, [pc, #188]	@ (8001394 <HAL_UART_MspInit+0x140>)
 80012d6:	f001 f9cf 	bl	8002678 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80012da:	4b2f      	ldr	r3, [pc, #188]	@ (8001398 <HAL_UART_MspInit+0x144>)
 80012dc:	4a2f      	ldr	r2, [pc, #188]	@ (800139c <HAL_UART_MspInit+0x148>)
 80012de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001398 <HAL_UART_MspInit+0x144>)
 80012e2:	2210      	movs	r2, #16
 80012e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001398 <HAL_UART_MspInit+0x144>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <HAL_UART_MspInit+0x144>)
 80012ee:	2280      	movs	r2, #128	@ 0x80
 80012f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012f2:	4b29      	ldr	r3, [pc, #164]	@ (8001398 <HAL_UART_MspInit+0x144>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f8:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <HAL_UART_MspInit+0x144>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80012fe:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <HAL_UART_MspInit+0x144>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001304:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_UART_MspInit+0x144>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800130a:	4823      	ldr	r0, [pc, #140]	@ (8001398 <HAL_UART_MspInit+0x144>)
 800130c:	f000 ff12 	bl	8002134 <HAL_DMA_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001316:	f7ff fea9 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a1e      	ldr	r2, [pc, #120]	@ (8001398 <HAL_UART_MspInit+0x144>)
 800131e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001320:	4a1d      	ldr	r2, [pc, #116]	@ (8001398 <HAL_UART_MspInit+0x144>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <HAL_UART_MspInit+0x14c>)
 8001328:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <HAL_UART_MspInit+0x150>)
 800132a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800132c:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <HAL_UART_MspInit+0x14c>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001332:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <HAL_UART_MspInit+0x14c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001338:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <HAL_UART_MspInit+0x14c>)
 800133a:	2280      	movs	r2, #128	@ 0x80
 800133c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800133e:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <HAL_UART_MspInit+0x14c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <HAL_UART_MspInit+0x14c>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_UART_MspInit+0x14c>)
 800134c:	2220      	movs	r2, #32
 800134e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001350:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <HAL_UART_MspInit+0x14c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001356:	4812      	ldr	r0, [pc, #72]	@ (80013a0 <HAL_UART_MspInit+0x14c>)
 8001358:	f000 feec 	bl	8002134 <HAL_DMA_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001362:	f7ff fe83 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <HAL_UART_MspInit+0x14c>)
 800136a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800136c:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <HAL_UART_MspInit+0x14c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2025      	movs	r0, #37	@ 0x25
 8001378:	f000 fea5 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800137c:	2025      	movs	r0, #37	@ 0x25
 800137e:	f000 febe 	bl	80020fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40013800 	.word	0x40013800
 8001390:	40021000 	.word	0x40021000
 8001394:	40010800 	.word	0x40010800
 8001398:	200001e4 	.word	0x200001e4
 800139c:	40020044 	.word	0x40020044
 80013a0:	20000228 	.word	0x20000228
 80013a4:	40020058 	.word	0x40020058

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <NMI_Handler+0x4>

080013b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <MemManage_Handler+0x4>

080013c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <UsageFault_Handler+0x4>

080013d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f8:	f000 f8c4 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <DMA1_Channel4_IRQHandler+0x10>)
 8001406:	f001 f803 	bl	8002410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200001e4 	.word	0x200001e4

08001414 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001418:	4802      	ldr	r0, [pc, #8]	@ (8001424 <DMA1_Channel5_IRQHandler+0x10>)
 800141a:	f000 fff9 	bl	8002410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000228 	.word	0x20000228

08001428 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <ADC1_2_IRQHandler+0x10>)
 800142e:	f000 fa5f 	bl	80018f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000004c 	.word	0x2000004c

0800143c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <TIM1_UP_IRQHandler+0x10>)
 8001442:	f002 f8eb 	bl	800361c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000007c 	.word	0x2000007c

08001450 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <TIM2_IRQHandler+0x10>)
 8001456:	f002 f8e1 	bl	800361c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000c4 	.word	0x200000c4

08001464 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <TIM3_IRQHandler+0x10>)
 800146a:	f002 f8d7 	bl	800361c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000010c 	.word	0x2000010c

08001478 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <TIM4_IRQHandler+0x10>)
 800147e:	f002 f8cd 	bl	800361c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000154 	.word	0x20000154

0800148c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001490:	4802      	ldr	r0, [pc, #8]	@ (800149c <USART1_IRQHandler+0x10>)
 8001492:	f002 fcd3 	bl	8003e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000019c 	.word	0x2000019c

080014a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ac:	f7ff fff8 	bl	80014a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480b      	ldr	r0, [pc, #44]	@ (80014e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014b2:	490c      	ldr	r1, [pc, #48]	@ (80014e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014b4:	4a0c      	ldr	r2, [pc, #48]	@ (80014e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a09      	ldr	r2, [pc, #36]	@ (80014ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014c8:	4c09      	ldr	r4, [pc, #36]	@ (80014f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f003 fa67 	bl	80049a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014da:	f7ff fadd 	bl	8000a98 <main>
  bx lr
 80014de:	4770      	bx	lr
  ldr r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e4:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80014e8:	08004a50 	.word	0x08004a50
  ldr r2, =_sbss
 80014ec:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80014f0:	200002a4 	.word	0x200002a4

080014f4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <CAN1_RX1_IRQHandler>
	...

080014f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <HAL_Init+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <HAL_Init+0x28>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 fdd1 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	200f      	movs	r0, #15
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fdb0 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40022000 	.word	0x40022000

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fde9 	bl	800211a <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 fdb1 	bl	80020c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	@ (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000024 	.word	0x20000024
 800157c:	2000002c 	.word	0x2000002c
 8001580:	20000028 	.word	0x20000028

08001584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_IncTick+0x1c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <HAL_IncTick+0x20>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a03      	ldr	r2, [pc, #12]	@ (80015a4 <HAL_IncTick+0x20>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	2000002c 	.word	0x2000002c
 80015a4:	200002a0 	.word	0x200002a0

080015a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b02      	ldr	r3, [pc, #8]	@ (80015b8 <HAL_GetTick+0x10>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	200002a0 	.word	0x200002a0

080015bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0be      	b.n	800175c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d109      	bne.n	8001600 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fd6e 	bl	80010dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 fb8f 	bl	8001d24 <ADC_ConversionStop_Disable>
 8001606:	4603      	mov	r3, r0
 8001608:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 8099 	bne.w	800174a <HAL_ADC_Init+0x18e>
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f040 8095 	bne.w	800174a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001624:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001628:	f023 0302 	bic.w	r3, r3, #2
 800162c:	f043 0202 	orr.w	r2, r3, #2
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800163c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7b1b      	ldrb	r3, [r3, #12]
 8001642:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001644:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	4313      	orrs	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001654:	d003      	beq.n	800165e <HAL_ADC_Init+0xa2>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <HAL_ADC_Init+0xa8>
 800165e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001662:	e000      	b.n	8001666 <HAL_ADC_Init+0xaa>
 8001664:	2300      	movs	r3, #0
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7d1b      	ldrb	r3, [r3, #20]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d119      	bne.n	80016a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7b1b      	ldrb	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d109      	bne.n	8001690 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	3b01      	subs	r3, #1
 8001682:	035a      	lsls	r2, r3, #13
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	e00b      	b.n	80016a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001694:	f043 0220 	orr.w	r2, r3, #32
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a0:	f043 0201 	orr.w	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	4b28      	ldr	r3, [pc, #160]	@ (8001764 <HAL_ADC_Init+0x1a8>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016d8:	d003      	beq.n	80016e2 <HAL_ADC_Init+0x126>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d104      	bne.n	80016ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	051b      	lsls	r3, r3, #20
 80016ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <HAL_ADC_Init+0x1ac>)
 8001708:	4013      	ands	r3, r2
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	429a      	cmp	r2, r3
 800170e:	d10b      	bne.n	8001728 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171a:	f023 0303 	bic.w	r3, r3, #3
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001726:	e018      	b.n	800175a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	f023 0312 	bic.w	r3, r3, #18
 8001730:	f043 0210 	orr.w	r2, r3, #16
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001748:	e007      	b.n	800175a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174e:	f043 0210 	orr.w	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800175a:	7dfb      	ldrb	r3, [r7, #23]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	ffe1f7fd 	.word	0xffe1f7fd
 8001768:	ff1f0efe 	.word	0xff1f0efe

0800176c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_ADC_Start_IT+0x1a>
 8001782:	2302      	movs	r3, #2
 8001784:	e0a0      	b.n	80018c8 <HAL_ADC_Start_IT+0x15c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fa6e 	bl	8001c70 <ADC_Enable>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 808f 	bne.w	80018be <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a45      	ldr	r2, [pc, #276]	@ (80018d0 <HAL_ADC_Start_IT+0x164>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d105      	bne.n	80017ca <HAL_ADC_Start_IT+0x5e>
 80017be:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <HAL_ADC_Start_IT+0x168>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d115      	bne.n	80017f6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d026      	beq.n	8001832 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017f4:	e01d      	b.n	8001832 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a33      	ldr	r2, [pc, #204]	@ (80018d4 <HAL_ADC_Start_IT+0x168>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d004      	beq.n	8001816 <HAL_ADC_Start_IT+0xaa>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a2f      	ldr	r2, [pc, #188]	@ (80018d0 <HAL_ADC_Start_IT+0x164>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10d      	bne.n	8001832 <HAL_ADC_Start_IT+0xc6>
 8001816:	4b2f      	ldr	r3, [pc, #188]	@ (80018d4 <HAL_ADC_Start_IT+0x168>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800182a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001836:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001842:	f023 0206 	bic.w	r2, r3, #6
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	62da      	str	r2, [r3, #44]	@ 0x2c
 800184a:	e002      	b.n	8001852 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f06f 0202 	mvn.w	r2, #2
 8001862:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0220 	orr.w	r2, r2, #32
 8001872:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800187e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001882:	d113      	bne.n	80018ac <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001888:	4a11      	ldr	r2, [pc, #68]	@ (80018d0 <HAL_ADC_Start_IT+0x164>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d105      	bne.n	800189a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_ADC_Start_IT+0x168>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001896:	2b00      	cmp	r3, #0
 8001898:	d108      	bne.n	80018ac <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	e00c      	b.n	80018c6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	e003      	b.n	80018c6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40012800 	.word	0x40012800
 80018d4:	40012400 	.word	0x40012400

080018d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d03e      	beq.n	8001990 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d039      	beq.n	8001990 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800193e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001942:	d11d      	bne.n	8001980 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001948:	2b00      	cmp	r3, #0
 800194a:	d119      	bne.n	8001980 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0220 	bic.w	r2, r2, #32
 800195a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001960:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d105      	bne.n	8001980 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	f043 0201 	orr.w	r2, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff f86f 	bl	8000a64 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f06f 0212 	mvn.w	r2, #18
 800198e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001996:	2b00      	cmp	r3, #0
 8001998:	d04d      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d048      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80019c6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80019ca:	d012      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d125      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019e4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019e8:	d11d      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d119      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a00:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1e:	f043 0201 	orr.w	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 fa6c 	bl	8001f04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 020c 	mvn.w	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d012      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00d      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f809 	bl	8001a6e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0201 	mvn.w	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x20>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e0dc      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1da>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b06      	cmp	r3, #6
 8001aae:	d81c      	bhi.n	8001aea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b05      	subs	r3, #5
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4019      	ands	r1, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	3b05      	subs	r3, #5
 8001adc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ae8:	e03c      	b.n	8001b64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d81c      	bhi.n	8001b2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	3b23      	subs	r3, #35	@ 0x23
 8001b04:	221f      	movs	r2, #31
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	4019      	ands	r1, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b23      	subs	r3, #35	@ 0x23
 8001b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b2a:	e01b      	b.n	8001b64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b41      	subs	r3, #65	@ 0x41
 8001b3e:	221f      	movs	r2, #31
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	4019      	ands	r1, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b41      	subs	r3, #65	@ 0x41
 8001b58:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d91c      	bls.n	8001ba6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b1e      	subs	r3, #30
 8001b7e:	2207      	movs	r2, #7
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4019      	ands	r1, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6898      	ldr	r0, [r3, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	e019      	b.n	8001bda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6919      	ldr	r1, [r3, #16]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4019      	ands	r1, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6898      	ldr	r0, [r3, #8]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d003      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001be6:	2b11      	cmp	r3, #17
 8001be8:	d132      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d125      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d126      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c10:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b10      	cmp	r3, #16
 8001c18:	d11a      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a13      	ldr	r2, [pc, #76]	@ (8001c6c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	0c9a      	lsrs	r2, r3, #18
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c30:	e002      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f9      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x1b2>
 8001c3e:	e007      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	f043 0220 	orr.w	r2, r3, #32
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40012400 	.word	0x40012400
 8001c68:	20000024 	.word	0x20000024
 8001c6c:	431bde83 	.word	0x431bde83

08001c70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d040      	beq.n	8001d10 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d1c <ADC_Enable+0xac>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d20 <ADC_Enable+0xb0>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	0c9b      	lsrs	r3, r3, #18
 8001caa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cac:	e002      	b.n	8001cb4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f9      	bne.n	8001cae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cba:	f7ff fc75 	bl	80015a8 <HAL_GetTick>
 8001cbe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cc0:	e01f      	b.n	8001d02 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cc2:	f7ff fc71 	bl	80015a8 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d918      	bls.n	8001d02 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d011      	beq.n	8001d02 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce2:	f043 0210 	orr.w	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e007      	b.n	8001d12 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d1d8      	bne.n	8001cc2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000024 	.word	0x20000024
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d12e      	bne.n	8001d9c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d4e:	f7ff fc2b 	bl	80015a8 <HAL_GetTick>
 8001d52:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d54:	e01b      	b.n	8001d8e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d56:	f7ff fc27 	bl	80015a8 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d914      	bls.n	8001d8e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d10d      	bne.n	8001d8e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d76:	f043 0210 	orr.w	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e007      	b.n	8001d9e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d0dc      	beq.n	8001d56 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADCEx_Calibration_Start+0x1e>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e097      	b.n	8001ef6 <HAL_ADCEx_Calibration_Start+0x14e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffa8 	bl	8001d24 <ADC_ConversionStop_Disable>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff49 	bl	8001c70 <ADC_Enable>
 8001dde:	4603      	mov	r3, r0
 8001de0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 8081 	bne.w	8001eec <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001df2:	f023 0302 	bic.w	r3, r3, #2
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001dfe:	4b40      	ldr	r3, [pc, #256]	@ (8001f00 <HAL_ADCEx_Calibration_Start+0x158>)
 8001e00:	681c      	ldr	r4, [r3, #0]
 8001e02:	2002      	movs	r0, #2
 8001e04:	f001 fab2 	bl	800336c <HAL_RCCEx_GetPeriphCLKFreq>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001e0e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001e10:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001e12:	e002      	b.n	8001e1a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f9      	bne.n	8001e14 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0208 	orr.w	r2, r2, #8
 8001e2e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001e30:	f7ff fbba 	bl	80015a8 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e36:	e01b      	b.n	8001e70 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e38:	f7ff fbb6 	bl	80015a8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b0a      	cmp	r3, #10
 8001e44:	d914      	bls.n	8001e70 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00d      	beq.n	8001e70 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	f023 0312 	bic.w	r3, r3, #18
 8001e5c:	f043 0210 	orr.w	r2, r3, #16
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e042      	b.n	8001ef6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1dc      	bne.n	8001e38 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0204 	orr.w	r2, r2, #4
 8001e8c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001e8e:	f7ff fb8b 	bl	80015a8 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e94:	e01b      	b.n	8001ece <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e96:	f7ff fb87 	bl	80015a8 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b0a      	cmp	r3, #10
 8001ea2:	d914      	bls.n	8001ece <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00d      	beq.n	8001ece <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	f023 0312 	bic.w	r3, r3, #18
 8001eba:	f043 0210 	orr.w	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e013      	b.n	8001ef6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1dc      	bne.n	8001e96 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	f023 0303 	bic.w	r3, r3, #3
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd90      	pop	{r4, r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000024 	.word	0x20000024

08001f04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
	...

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4906      	ldr	r1, [pc, #24]	@ (8001fb0 <__NVIC_EnableIRQ+0x34>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	@ (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	@ 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800207c:	d301      	bcc.n	8002082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207e:	2301      	movs	r3, #1
 8002080:	e00f      	b.n	80020a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002082:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <SysTick_Config+0x40>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208a:	210f      	movs	r1, #15
 800208c:	f04f 30ff 	mov.w	r0, #4294967295
 8002090:	f7ff ff90 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002094:	4b05      	ldr	r3, [pc, #20]	@ (80020ac <SysTick_Config+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	4b04      	ldr	r3, [pc, #16]	@ (80020ac <SysTick_Config+0x40>)
 800209c:	2207      	movs	r2, #7
 800209e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff2d 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d8:	f7ff ff42 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f7ff ff90 	bl	8002008 <NVIC_EncodePriority>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff5f 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff35 	bl	8001f7c <__NVIC_EnableIRQ>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffa2 	bl	800206c <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e043      	b.n	80021d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	4b22      	ldr	r3, [pc, #136]	@ (80021dc <HAL_DMA_Init+0xa8>)
 8002152:	4413      	add	r3, r2
 8002154:	4a22      	ldr	r2, [pc, #136]	@ (80021e0 <HAL_DMA_Init+0xac>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	009a      	lsls	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a1f      	ldr	r2, [pc, #124]	@ (80021e4 <HAL_DMA_Init+0xb0>)
 8002166:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800217e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002182:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800218c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	bffdfff8 	.word	0xbffdfff8
 80021e0:	cccccccd 	.word	0xcccccccd
 80021e4:	40020000 	.word	0x40020000

080021e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_DMA_Start_IT+0x20>
 8002204:	2302      	movs	r3, #2
 8002206:	e04b      	b.n	80022a0 <HAL_DMA_Start_IT+0xb8>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d13a      	bne.n	8002292 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f9eb 	bl	800261c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 020e 	orr.w	r2, r2, #14
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e00f      	b.n	8002280 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0204 	bic.w	r2, r2, #4
 800226e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 020a 	orr.w	r2, r2, #10
 800227e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e005      	b.n	800229e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800229a:	2302      	movs	r3, #2
 800229c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800229e:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d008      	beq.n	80022d2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2204      	movs	r2, #4
 80022c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e020      	b.n	8002314 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 020e 	bic.w	r2, r2, #14
 80022e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0201 	bic.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fa:	2101      	movs	r1, #1
 80022fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002300:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
	...

08002320 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d005      	beq.n	8002344 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2204      	movs	r2, #4
 800233c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	e051      	b.n	80023e8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 020e 	bic.w	r2, r2, #14
 8002352:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a22      	ldr	r2, [pc, #136]	@ (80023f4 <HAL_DMA_Abort_IT+0xd4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d029      	beq.n	80023c2 <HAL_DMA_Abort_IT+0xa2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a21      	ldr	r2, [pc, #132]	@ (80023f8 <HAL_DMA_Abort_IT+0xd8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d022      	beq.n	80023be <HAL_DMA_Abort_IT+0x9e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1f      	ldr	r2, [pc, #124]	@ (80023fc <HAL_DMA_Abort_IT+0xdc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01a      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x98>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1e      	ldr	r2, [pc, #120]	@ (8002400 <HAL_DMA_Abort_IT+0xe0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d012      	beq.n	80023b2 <HAL_DMA_Abort_IT+0x92>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1c      	ldr	r2, [pc, #112]	@ (8002404 <HAL_DMA_Abort_IT+0xe4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00a      	beq.n	80023ac <HAL_DMA_Abort_IT+0x8c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1b      	ldr	r2, [pc, #108]	@ (8002408 <HAL_DMA_Abort_IT+0xe8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d102      	bne.n	80023a6 <HAL_DMA_Abort_IT+0x86>
 80023a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80023a4:	e00e      	b.n	80023c4 <HAL_DMA_Abort_IT+0xa4>
 80023a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023aa:	e00b      	b.n	80023c4 <HAL_DMA_Abort_IT+0xa4>
 80023ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023b0:	e008      	b.n	80023c4 <HAL_DMA_Abort_IT+0xa4>
 80023b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023b6:	e005      	b.n	80023c4 <HAL_DMA_Abort_IT+0xa4>
 80023b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023bc:	e002      	b.n	80023c4 <HAL_DMA_Abort_IT+0xa4>
 80023be:	2310      	movs	r3, #16
 80023c0:	e000      	b.n	80023c4 <HAL_DMA_Abort_IT+0xa4>
 80023c2:	2301      	movs	r3, #1
 80023c4:	4a11      	ldr	r2, [pc, #68]	@ (800240c <HAL_DMA_Abort_IT+0xec>)
 80023c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
    } 
  }
  return status;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40020008 	.word	0x40020008
 80023f8:	4002001c 	.word	0x4002001c
 80023fc:	40020030 	.word	0x40020030
 8002400:	40020044 	.word	0x40020044
 8002404:	40020058 	.word	0x40020058
 8002408:	4002006c 	.word	0x4002006c
 800240c:	40020000 	.word	0x40020000

08002410 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	2204      	movs	r2, #4
 800242e:	409a      	lsls	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d04f      	beq.n	80024d8 <HAL_DMA_IRQHandler+0xc8>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d04a      	beq.n	80024d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0204 	bic.w	r2, r2, #4
 800245e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a66      	ldr	r2, [pc, #408]	@ (8002600 <HAL_DMA_IRQHandler+0x1f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d029      	beq.n	80024be <HAL_DMA_IRQHandler+0xae>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a65      	ldr	r2, [pc, #404]	@ (8002604 <HAL_DMA_IRQHandler+0x1f4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d022      	beq.n	80024ba <HAL_DMA_IRQHandler+0xaa>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a63      	ldr	r2, [pc, #396]	@ (8002608 <HAL_DMA_IRQHandler+0x1f8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d01a      	beq.n	80024b4 <HAL_DMA_IRQHandler+0xa4>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a62      	ldr	r2, [pc, #392]	@ (800260c <HAL_DMA_IRQHandler+0x1fc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d012      	beq.n	80024ae <HAL_DMA_IRQHandler+0x9e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a60      	ldr	r2, [pc, #384]	@ (8002610 <HAL_DMA_IRQHandler+0x200>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00a      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x98>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a5f      	ldr	r2, [pc, #380]	@ (8002614 <HAL_DMA_IRQHandler+0x204>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d102      	bne.n	80024a2 <HAL_DMA_IRQHandler+0x92>
 800249c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024a0:	e00e      	b.n	80024c0 <HAL_DMA_IRQHandler+0xb0>
 80024a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80024a6:	e00b      	b.n	80024c0 <HAL_DMA_IRQHandler+0xb0>
 80024a8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80024ac:	e008      	b.n	80024c0 <HAL_DMA_IRQHandler+0xb0>
 80024ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024b2:	e005      	b.n	80024c0 <HAL_DMA_IRQHandler+0xb0>
 80024b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024b8:	e002      	b.n	80024c0 <HAL_DMA_IRQHandler+0xb0>
 80024ba:	2340      	movs	r3, #64	@ 0x40
 80024bc:	e000      	b.n	80024c0 <HAL_DMA_IRQHandler+0xb0>
 80024be:	2304      	movs	r3, #4
 80024c0:	4a55      	ldr	r2, [pc, #340]	@ (8002618 <HAL_DMA_IRQHandler+0x208>)
 80024c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8094 	beq.w	80025f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80024d6:	e08e      	b.n	80025f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	2202      	movs	r2, #2
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d056      	beq.n	8002596 <HAL_DMA_IRQHandler+0x186>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d051      	beq.n	8002596 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10b      	bne.n	8002518 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 020a 	bic.w	r2, r2, #10
 800250e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a38      	ldr	r2, [pc, #224]	@ (8002600 <HAL_DMA_IRQHandler+0x1f0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d029      	beq.n	8002576 <HAL_DMA_IRQHandler+0x166>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a37      	ldr	r2, [pc, #220]	@ (8002604 <HAL_DMA_IRQHandler+0x1f4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d022      	beq.n	8002572 <HAL_DMA_IRQHandler+0x162>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a35      	ldr	r2, [pc, #212]	@ (8002608 <HAL_DMA_IRQHandler+0x1f8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01a      	beq.n	800256c <HAL_DMA_IRQHandler+0x15c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a34      	ldr	r2, [pc, #208]	@ (800260c <HAL_DMA_IRQHandler+0x1fc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d012      	beq.n	8002566 <HAL_DMA_IRQHandler+0x156>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a32      	ldr	r2, [pc, #200]	@ (8002610 <HAL_DMA_IRQHandler+0x200>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00a      	beq.n	8002560 <HAL_DMA_IRQHandler+0x150>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a31      	ldr	r2, [pc, #196]	@ (8002614 <HAL_DMA_IRQHandler+0x204>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d102      	bne.n	800255a <HAL_DMA_IRQHandler+0x14a>
 8002554:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002558:	e00e      	b.n	8002578 <HAL_DMA_IRQHandler+0x168>
 800255a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800255e:	e00b      	b.n	8002578 <HAL_DMA_IRQHandler+0x168>
 8002560:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002564:	e008      	b.n	8002578 <HAL_DMA_IRQHandler+0x168>
 8002566:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800256a:	e005      	b.n	8002578 <HAL_DMA_IRQHandler+0x168>
 800256c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002570:	e002      	b.n	8002578 <HAL_DMA_IRQHandler+0x168>
 8002572:	2320      	movs	r3, #32
 8002574:	e000      	b.n	8002578 <HAL_DMA_IRQHandler+0x168>
 8002576:	2302      	movs	r3, #2
 8002578:	4a27      	ldr	r2, [pc, #156]	@ (8002618 <HAL_DMA_IRQHandler+0x208>)
 800257a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d034      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002594:	e02f      	b.n	80025f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	2208      	movs	r2, #8
 800259c:	409a      	lsls	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d028      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x1e8>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d023      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 020e 	bic.w	r2, r2, #14
 80025be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f202 	lsl.w	r2, r1, r2
 80025ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
    }
  }
  return;
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
}
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40020008 	.word	0x40020008
 8002604:	4002001c 	.word	0x4002001c
 8002608:	40020030 	.word	0x40020030
 800260c:	40020044 	.word	0x40020044
 8002610:	40020058 	.word	0x40020058
 8002614:	4002006c 	.word	0x4002006c
 8002618:	40020000 	.word	0x40020000

0800261c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002632:	2101      	movs	r1, #1
 8002634:	fa01 f202 	lsl.w	r2, r1, r2
 8002638:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b10      	cmp	r3, #16
 8002648:	d108      	bne.n	800265c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800265a:	e007      	b.n	800266c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	60da      	str	r2, [r3, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
	...

08002678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002678:	b480      	push	{r7}
 800267a:	b08b      	sub	sp, #44	@ 0x2c
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268a:	e169      	b.n	8002960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800268c:	2201      	movs	r2, #1
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	f040 8158 	bne.w	800295a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a9a      	ldr	r2, [pc, #616]	@ (8002918 <HAL_GPIO_Init+0x2a0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d05e      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026b4:	4a98      	ldr	r2, [pc, #608]	@ (8002918 <HAL_GPIO_Init+0x2a0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d875      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026ba:	4a98      	ldr	r2, [pc, #608]	@ (800291c <HAL_GPIO_Init+0x2a4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d058      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026c0:	4a96      	ldr	r2, [pc, #600]	@ (800291c <HAL_GPIO_Init+0x2a4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d86f      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026c6:	4a96      	ldr	r2, [pc, #600]	@ (8002920 <HAL_GPIO_Init+0x2a8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d052      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026cc:	4a94      	ldr	r2, [pc, #592]	@ (8002920 <HAL_GPIO_Init+0x2a8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d869      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026d2:	4a94      	ldr	r2, [pc, #592]	@ (8002924 <HAL_GPIO_Init+0x2ac>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d04c      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026d8:	4a92      	ldr	r2, [pc, #584]	@ (8002924 <HAL_GPIO_Init+0x2ac>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d863      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026de:	4a92      	ldr	r2, [pc, #584]	@ (8002928 <HAL_GPIO_Init+0x2b0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d046      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026e4:	4a90      	ldr	r2, [pc, #576]	@ (8002928 <HAL_GPIO_Init+0x2b0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d85d      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026ea:	2b12      	cmp	r3, #18
 80026ec:	d82a      	bhi.n	8002744 <HAL_GPIO_Init+0xcc>
 80026ee:	2b12      	cmp	r3, #18
 80026f0:	d859      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026f2:	a201      	add	r2, pc, #4	@ (adr r2, 80026f8 <HAL_GPIO_Init+0x80>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	08002773 	.word	0x08002773
 80026fc:	0800274d 	.word	0x0800274d
 8002700:	0800275f 	.word	0x0800275f
 8002704:	080027a1 	.word	0x080027a1
 8002708:	080027a7 	.word	0x080027a7
 800270c:	080027a7 	.word	0x080027a7
 8002710:	080027a7 	.word	0x080027a7
 8002714:	080027a7 	.word	0x080027a7
 8002718:	080027a7 	.word	0x080027a7
 800271c:	080027a7 	.word	0x080027a7
 8002720:	080027a7 	.word	0x080027a7
 8002724:	080027a7 	.word	0x080027a7
 8002728:	080027a7 	.word	0x080027a7
 800272c:	080027a7 	.word	0x080027a7
 8002730:	080027a7 	.word	0x080027a7
 8002734:	080027a7 	.word	0x080027a7
 8002738:	080027a7 	.word	0x080027a7
 800273c:	08002755 	.word	0x08002755
 8002740:	08002769 	.word	0x08002769
 8002744:	4a79      	ldr	r2, [pc, #484]	@ (800292c <HAL_GPIO_Init+0x2b4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800274a:	e02c      	b.n	80027a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	623b      	str	r3, [r7, #32]
          break;
 8002752:	e029      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	3304      	adds	r3, #4
 800275a:	623b      	str	r3, [r7, #32]
          break;
 800275c:	e024      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	3308      	adds	r3, #8
 8002764:	623b      	str	r3, [r7, #32]
          break;
 8002766:	e01f      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	330c      	adds	r3, #12
 800276e:	623b      	str	r3, [r7, #32]
          break;
 8002770:	e01a      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800277a:	2304      	movs	r3, #4
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e013      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002788:	2308      	movs	r3, #8
 800278a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	611a      	str	r2, [r3, #16]
          break;
 8002792:	e009      	b.n	80027a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002794:	2308      	movs	r3, #8
 8002796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	615a      	str	r2, [r3, #20]
          break;
 800279e:	e003      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027a0:	2300      	movs	r3, #0
 80027a2:	623b      	str	r3, [r7, #32]
          break;
 80027a4:	e000      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          break;
 80027a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2bff      	cmp	r3, #255	@ 0xff
 80027ac:	d801      	bhi.n	80027b2 <HAL_GPIO_Init+0x13a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	e001      	b.n	80027b6 <HAL_GPIO_Init+0x13e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2bff      	cmp	r3, #255	@ 0xff
 80027bc:	d802      	bhi.n	80027c4 <HAL_GPIO_Init+0x14c>
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x152>
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	3b08      	subs	r3, #8
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	210f      	movs	r1, #15
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	401a      	ands	r2, r3
 80027dc:	6a39      	ldr	r1, [r7, #32]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	fa01 f303 	lsl.w	r3, r1, r3
 80027e4:	431a      	orrs	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80b1 	beq.w	800295a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002930 <HAL_GPIO_Init+0x2b8>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002930 <HAL_GPIO_Init+0x2b8>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6193      	str	r3, [r2, #24]
 8002804:	4b4a      	ldr	r3, [pc, #296]	@ (8002930 <HAL_GPIO_Init+0x2b8>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002810:	4a48      	ldr	r2, [pc, #288]	@ (8002934 <HAL_GPIO_Init+0x2bc>)
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a40      	ldr	r2, [pc, #256]	@ (8002938 <HAL_GPIO_Init+0x2c0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d013      	beq.n	8002864 <HAL_GPIO_Init+0x1ec>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3f      	ldr	r2, [pc, #252]	@ (800293c <HAL_GPIO_Init+0x2c4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00d      	beq.n	8002860 <HAL_GPIO_Init+0x1e8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3e      	ldr	r2, [pc, #248]	@ (8002940 <HAL_GPIO_Init+0x2c8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d007      	beq.n	800285c <HAL_GPIO_Init+0x1e4>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3d      	ldr	r2, [pc, #244]	@ (8002944 <HAL_GPIO_Init+0x2cc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d101      	bne.n	8002858 <HAL_GPIO_Init+0x1e0>
 8002854:	2303      	movs	r3, #3
 8002856:	e006      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 8002858:	2304      	movs	r3, #4
 800285a:	e004      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 800285c:	2302      	movs	r3, #2
 800285e:	e002      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 8002864:	2300      	movs	r3, #0
 8002866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002868:	f002 0203 	and.w	r2, r2, #3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4093      	lsls	r3, r2
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002876:	492f      	ldr	r1, [pc, #188]	@ (8002934 <HAL_GPIO_Init+0x2bc>)
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	089b      	lsrs	r3, r3, #2
 800287c:	3302      	adds	r3, #2
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002890:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	492c      	ldr	r1, [pc, #176]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800289e:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	4928      	ldr	r1, [pc, #160]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028b8:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4922      	ldr	r1, [pc, #136]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60cb      	str	r3, [r1, #12]
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028c6:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	491e      	ldr	r1, [pc, #120]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028e0:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	4918      	ldr	r1, [pc, #96]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ee:	4b16      	ldr	r3, [pc, #88]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	4914      	ldr	r1, [pc, #80]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d021      	beq.n	800294c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002908:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	490e      	ldr	r1, [pc, #56]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
 8002914:	e021      	b.n	800295a <HAL_GPIO_Init+0x2e2>
 8002916:	bf00      	nop
 8002918:	10320000 	.word	0x10320000
 800291c:	10310000 	.word	0x10310000
 8002920:	10220000 	.word	0x10220000
 8002924:	10210000 	.word	0x10210000
 8002928:	10120000 	.word	0x10120000
 800292c:	10110000 	.word	0x10110000
 8002930:	40021000 	.word	0x40021000
 8002934:	40010000 	.word	0x40010000
 8002938:	40010800 	.word	0x40010800
 800293c:	40010c00 	.word	0x40010c00
 8002940:	40011000 	.word	0x40011000
 8002944:	40011400 	.word	0x40011400
 8002948:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800294c:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <HAL_GPIO_Init+0x304>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	43db      	mvns	r3, r3
 8002954:	4909      	ldr	r1, [pc, #36]	@ (800297c <HAL_GPIO_Init+0x304>)
 8002956:	4013      	ands	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	3301      	adds	r3, #1
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	fa22 f303 	lsr.w	r3, r2, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	f47f ae8e 	bne.w	800268c <HAL_GPIO_Init+0x14>
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	372c      	adds	r7, #44	@ 0x2c
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	40010400 	.word	0x40010400

08002980 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	887b      	ldrh	r3, [r7, #2]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e001      	b.n	80029a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	807b      	strh	r3, [r7, #2]
 80029ba:	4613      	mov	r3, r2
 80029bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029be:	787b      	ldrb	r3, [r7, #1]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c4:	887a      	ldrh	r2, [r7, #2]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ca:	e003      	b.n	80029d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	041a      	lsls	r2, r3, #16
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	611a      	str	r2, [r3, #16]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e272      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8087 	beq.w	8002b0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a00:	4b92      	ldr	r3, [pc, #584]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d00c      	beq.n	8002a26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a0c:	4b8f      	ldr	r3, [pc, #572]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d112      	bne.n	8002a3e <HAL_RCC_OscConfig+0x5e>
 8002a18:	4b8c      	ldr	r3, [pc, #560]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a24:	d10b      	bne.n	8002a3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a26:	4b89      	ldr	r3, [pc, #548]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d06c      	beq.n	8002b0c <HAL_RCC_OscConfig+0x12c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d168      	bne.n	8002b0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e24c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x76>
 8002a48:	4b80      	ldr	r3, [pc, #512]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	e02e      	b.n	8002ab4 <HAL_RCC_OscConfig+0xd4>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x98>
 8002a5e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7a      	ldr	r2, [pc, #488]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b78      	ldr	r3, [pc, #480]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a77      	ldr	r2, [pc, #476]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e01d      	b.n	8002ab4 <HAL_RCC_OscConfig+0xd4>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0xbc>
 8002a82:	4b72      	ldr	r3, [pc, #456]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a71      	ldr	r2, [pc, #452]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a6e      	ldr	r2, [pc, #440]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCC_OscConfig+0xd4>
 8002a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b68      	ldr	r3, [pc, #416]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a67      	ldr	r2, [pc, #412]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fd74 	bl	80015a8 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fd70 	bl	80015a8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	@ 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e200      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xe4>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fd60 	bl	80015a8 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fd5c 	bl	80015a8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	@ 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1ec      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	4b53      	ldr	r3, [pc, #332]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x10c>
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d063      	beq.n	8002be2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b26:	4b49      	ldr	r3, [pc, #292]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d11c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x18c>
 8002b32:	4b46      	ldr	r3, [pc, #280]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d116      	bne.n	8002b6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	4b43      	ldr	r3, [pc, #268]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x176>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e1c0      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b3d      	ldr	r3, [pc, #244]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4939      	ldr	r1, [pc, #228]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	e03a      	b.n	8002be2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b74:	4b36      	ldr	r3, [pc, #216]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fd15 	bl	80015a8 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b82:	f7fe fd11 	bl	80015a8 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1a1      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4927      	ldr	r1, [pc, #156]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb6:	4b26      	ldr	r3, [pc, #152]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fcf4 	bl	80015a8 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fcf0 	bl	80015a8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e180      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d03a      	beq.n	8002c64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d019      	beq.n	8002c2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf6:	4b17      	ldr	r3, [pc, #92]	@ (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfc:	f7fe fcd4 	bl	80015a8 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c04:	f7fe fcd0 	bl	80015a8 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e160      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c16:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f000 face 	bl	80031c4 <RCC_Delay>
 8002c28:	e01c      	b.n	8002c64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7fe fcba 	bl	80015a8 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c36:	e00f      	b.n	8002c58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fe fcb6 	bl	80015a8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d908      	bls.n	8002c58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e146      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	42420000 	.word	0x42420000
 8002c54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	4b92      	ldr	r3, [pc, #584]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e9      	bne.n	8002c38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80a6 	beq.w	8002dbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c76:	4b8b      	ldr	r3, [pc, #556]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10d      	bne.n	8002c9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	4b88      	ldr	r3, [pc, #544]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4a87      	ldr	r2, [pc, #540]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	61d3      	str	r3, [r2, #28]
 8002c8e:	4b85      	ldr	r3, [pc, #532]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	4b82      	ldr	r3, [pc, #520]	@ (8002ea8 <HAL_RCC_OscConfig+0x4c8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d118      	bne.n	8002cdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002caa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea8 <HAL_RCC_OscConfig+0x4c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7e      	ldr	r2, [pc, #504]	@ (8002ea8 <HAL_RCC_OscConfig+0x4c8>)
 8002cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fc77 	bl	80015a8 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbe:	f7fe fc73 	bl	80015a8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b64      	cmp	r3, #100	@ 0x64
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e103      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	4b75      	ldr	r3, [pc, #468]	@ (8002ea8 <HAL_RCC_OscConfig+0x4c8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x312>
 8002ce4:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4a6e      	ldr	r2, [pc, #440]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6213      	str	r3, [r2, #32]
 8002cf0:	e02d      	b.n	8002d4e <HAL_RCC_OscConfig+0x36e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x334>
 8002cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a69      	ldr	r2, [pc, #420]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6213      	str	r3, [r2, #32]
 8002d06:	4b67      	ldr	r3, [pc, #412]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4a66      	ldr	r2, [pc, #408]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	f023 0304 	bic.w	r3, r3, #4
 8002d10:	6213      	str	r3, [r2, #32]
 8002d12:	e01c      	b.n	8002d4e <HAL_RCC_OscConfig+0x36e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d10c      	bne.n	8002d36 <HAL_RCC_OscConfig+0x356>
 8002d1c:	4b61      	ldr	r3, [pc, #388]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4a60      	ldr	r2, [pc, #384]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	6213      	str	r3, [r2, #32]
 8002d28:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	e00b      	b.n	8002d4e <HAL_RCC_OscConfig+0x36e>
 8002d36:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6213      	str	r3, [r2, #32]
 8002d42:	4b58      	ldr	r3, [pc, #352]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4a57      	ldr	r2, [pc, #348]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d015      	beq.n	8002d82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fe fc27 	bl	80015a8 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fe fc23 	bl	80015a8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e0b1      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ee      	beq.n	8002d5e <HAL_RCC_OscConfig+0x37e>
 8002d80:	e014      	b.n	8002dac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7fe fc11 	bl	80015a8 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe fc0d 	bl	80015a8 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e09b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da0:	4b40      	ldr	r3, [pc, #256]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ee      	bne.n	8002d8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d105      	bne.n	8002dbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8087 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc8:	4b36      	ldr	r3, [pc, #216]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d061      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d146      	bne.n	8002e6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ddc:	4b33      	ldr	r3, [pc, #204]	@ (8002eac <HAL_RCC_OscConfig+0x4cc>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fe fbe1 	bl	80015a8 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dea:	f7fe fbdd 	bl	80015a8 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e06d      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfc:	4b29      	ldr	r3, [pc, #164]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e10:	d108      	bne.n	8002e24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e12:	4b24      	ldr	r3, [pc, #144]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	4921      	ldr	r1, [pc, #132]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a19      	ldr	r1, [r3, #32]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	430b      	orrs	r3, r1
 8002e36:	491b      	ldr	r1, [pc, #108]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <HAL_RCC_OscConfig+0x4cc>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe fbb1 	bl	80015a8 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7fe fbad 	bl	80015a8 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e03d      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x46a>
 8002e68:	e035      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <HAL_RCC_OscConfig+0x4cc>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fe fb9a 	bl	80015a8 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fe fb96 	bl	80015a8 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e026      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x498>
 8002e96:	e01e      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e019      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_RCC_OscConfig+0x500>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0d0      	b.n	800309a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d910      	bls.n	8002f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b67      	ldr	r3, [pc, #412]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 0207 	bic.w	r2, r3, #7
 8002f0e:	4965      	ldr	r1, [pc, #404]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b63      	ldr	r3, [pc, #396]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0b8      	b.n	800309a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d020      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f40:	4b59      	ldr	r3, [pc, #356]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a58      	ldr	r2, [pc, #352]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f58:	4b53      	ldr	r3, [pc, #332]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a52      	ldr	r2, [pc, #328]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f64:	4b50      	ldr	r3, [pc, #320]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	494d      	ldr	r1, [pc, #308]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d040      	beq.n	8003004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	4b47      	ldr	r3, [pc, #284]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d115      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e07f      	b.n	800309a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa2:	4b41      	ldr	r3, [pc, #260]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e073      	b.n	800309a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e06b      	b.n	800309a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fc2:	4b39      	ldr	r3, [pc, #228]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f023 0203 	bic.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4936      	ldr	r1, [pc, #216]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd4:	f7fe fae8 	bl	80015a8 <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fdc:	f7fe fae4 	bl	80015a8 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e053      	b.n	800309a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 020c 	and.w	r2, r3, #12
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	429a      	cmp	r2, r3
 8003002:	d1eb      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003004:	4b27      	ldr	r3, [pc, #156]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d210      	bcs.n	8003034 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b24      	ldr	r3, [pc, #144]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 0207 	bic.w	r2, r3, #7
 800301a:	4922      	ldr	r1, [pc, #136]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003022:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e032      	b.n	800309a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003040:	4b19      	ldr	r3, [pc, #100]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4916      	ldr	r1, [pc, #88]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	4313      	orrs	r3, r2
 8003050:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800305e:	4b12      	ldr	r3, [pc, #72]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	490e      	ldr	r1, [pc, #56]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003072:	f000 f821 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003076:	4602      	mov	r2, r0
 8003078:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	490a      	ldr	r1, [pc, #40]	@ (80030ac <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	5ccb      	ldrb	r3, [r1, r3]
 8003086:	fa22 f303 	lsr.w	r3, r2, r3
 800308a:	4a09      	ldr	r2, [pc, #36]	@ (80030b0 <HAL_RCC_ClockConfig+0x1cc>)
 800308c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800308e:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fa46 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40022000 	.word	0x40022000
 80030a8:	40021000 	.word	0x40021000
 80030ac:	08004a08 	.word	0x08004a08
 80030b0:	20000024 	.word	0x20000024
 80030b4:	20000028 	.word	0x20000028

080030b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030d2:	4b1e      	ldr	r3, [pc, #120]	@ (800314c <HAL_RCC_GetSysClockFreq+0x94>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d002      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x30>
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x36>
 80030e6:	e027      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e8:	4b19      	ldr	r3, [pc, #100]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ea:	613b      	str	r3, [r7, #16]
      break;
 80030ec:	e027      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	0c9b      	lsrs	r3, r3, #18
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	4a17      	ldr	r2, [pc, #92]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030f8:	5cd3      	ldrb	r3, [r2, r3]
 80030fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d010      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003106:	4b11      	ldr	r3, [pc, #68]	@ (800314c <HAL_RCC_GetSysClockFreq+0x94>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	0c5b      	lsrs	r3, r3, #17
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	4a11      	ldr	r2, [pc, #68]	@ (8003158 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003112:	5cd3      	ldrb	r3, [r2, r3]
 8003114:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a0d      	ldr	r2, [pc, #52]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x98>)
 800311a:	fb03 f202 	mul.w	r2, r3, r2
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e004      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a0c      	ldr	r2, [pc, #48]	@ (800315c <HAL_RCC_GetSysClockFreq+0xa4>)
 800312c:	fb02 f303 	mul.w	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	613b      	str	r3, [r7, #16]
      break;
 8003136:	e002      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x98>)
 800313a:	613b      	str	r3, [r7, #16]
      break;
 800313c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313e:	693b      	ldr	r3, [r7, #16]
}
 8003140:	4618      	mov	r0, r3
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
 8003150:	007a1200 	.word	0x007a1200
 8003154:	08004a20 	.word	0x08004a20
 8003158:	08004a30 	.word	0x08004a30
 800315c:	003d0900 	.word	0x003d0900

08003160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003164:	4b02      	ldr	r3, [pc, #8]	@ (8003170 <HAL_RCC_GetHCLKFreq+0x10>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	20000024 	.word	0x20000024

08003174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003178:	f7ff fff2 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	4903      	ldr	r1, [pc, #12]	@ (8003198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40021000 	.word	0x40021000
 8003198:	08004a18 	.word	0x08004a18

0800319c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031a0:	f7ff ffde 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	0adb      	lsrs	r3, r3, #11
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	@ (80031c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	08004a18 	.word	0x08004a18

080031c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031cc:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <RCC_Delay+0x34>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	@ (80031fc <RCC_Delay+0x38>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	0a5b      	lsrs	r3, r3, #9
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031e0:	bf00      	nop
  }
  while (Delay --);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	60fa      	str	r2, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f9      	bne.n	80031e0 <RCC_Delay+0x1c>
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	20000024 	.word	0x20000024
 80031fc:	10624dd3 	.word	0x10624dd3

08003200 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d07d      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800321c:	2300      	movs	r3, #0
 800321e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003220:	4b4f      	ldr	r3, [pc, #316]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10d      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	4b4c      	ldr	r3, [pc, #304]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	4a4b      	ldr	r2, [pc, #300]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003236:	61d3      	str	r3, [r2, #28]
 8003238:	4b49      	ldr	r3, [pc, #292]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003244:	2301      	movs	r3, #1
 8003246:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	4b46      	ldr	r3, [pc, #280]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d118      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003254:	4b43      	ldr	r3, [pc, #268]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a42      	ldr	r2, [pc, #264]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003260:	f7fe f9a2 	bl	80015a8 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	e008      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7fe f99e 	bl	80015a8 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	@ 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e06d      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	4b3a      	ldr	r3, [pc, #232]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003286:	4b36      	ldr	r3, [pc, #216]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800328e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d02e      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d027      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ba:	4a29      	ldr	r2, [pc, #164]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d014      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ca:	f7fe f96d 	bl	80015a8 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe f969 	bl	80015a8 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e036      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ee      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4917      	ldr	r1, [pc, #92]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	4313      	orrs	r3, r2
 8003304:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	4b14      	ldr	r3, [pc, #80]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003316:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003324:	4b0e      	ldr	r3, [pc, #56]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	490b      	ldr	r1, [pc, #44]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003342:	4b07      	ldr	r3, [pc, #28]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	4904      	ldr	r1, [pc, #16]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	40007000 	.word	0x40007000
 8003368:	42420440 	.word	0x42420440

0800336c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	2300      	movs	r3, #0
 8003386:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b10      	cmp	r3, #16
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b10      	cmp	r3, #16
 8003392:	f200 808a 	bhi.w	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d045      	beq.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d075      	beq.n	800348e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033a2:	e082      	b.n	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80033a4:	4b46      	ldr	r3, [pc, #280]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033aa:	4b45      	ldr	r3, [pc, #276]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d07b      	beq.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	0c9b      	lsrs	r3, r3, #18
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	4a41      	ldr	r2, [pc, #260]	@ (80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80033c0:	5cd3      	ldrb	r3, [r2, r3]
 80033c2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d015      	beq.n	80033fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033ce:	4b3c      	ldr	r3, [pc, #240]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	0c5b      	lsrs	r3, r3, #17
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	4a3b      	ldr	r2, [pc, #236]	@ (80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033e8:	4a38      	ldr	r2, [pc, #224]	@ (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	e004      	b.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4a34      	ldr	r2, [pc, #208]	@ (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003404:	4b2e      	ldr	r3, [pc, #184]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003410:	d102      	bne.n	8003418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	61bb      	str	r3, [r7, #24]
      break;
 8003416:	e04a      	b.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4a2d      	ldr	r2, [pc, #180]	@ (80034d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	61bb      	str	r3, [r7, #24]
      break;
 8003426:	e042      	b.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003428:	4b25      	ldr	r3, [pc, #148]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003438:	d108      	bne.n	800344c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e01f      	b.n	800348c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003456:	d109      	bne.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003458:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003464:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	e00f      	b.n	800348c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003472:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003476:	d11c      	bne.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003478:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d016      	beq.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003484:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003488:	61bb      	str	r3, [r7, #24]
      break;
 800348a:	e012      	b.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800348c:	e011      	b.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800348e:	f7ff fe85 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 8003492:	4602      	mov	r2, r0
 8003494:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0b9b      	lsrs	r3, r3, #14
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	3301      	adds	r3, #1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	61bb      	str	r3, [r7, #24]
      break;
 80034a8:	e004      	b.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034aa:	bf00      	nop
 80034ac:	e002      	b.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034b2:	bf00      	nop
    }
  }
  return (frequency);
 80034b4:	69bb      	ldr	r3, [r7, #24]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	08004a34 	.word	0x08004a34
 80034c8:	08004a44 	.word	0x08004a44
 80034cc:	007a1200 	.word	0x007a1200
 80034d0:	003d0900 	.word	0x003d0900
 80034d4:	aaaaaaab 	.word	0xaaaaaaab

080034d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e041      	b.n	800356e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fd fe30 	bl	8001164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3304      	adds	r3, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f000 fa5c 	bl	80039d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d001      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e03a      	b.n	8003606 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <HAL_TIM_Base_Start_IT+0x98>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00e      	beq.n	80035d0 <HAL_TIM_Base_Start_IT+0x58>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ba:	d009      	beq.n	80035d0 <HAL_TIM_Base_Start_IT+0x58>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a14      	ldr	r2, [pc, #80]	@ (8003614 <HAL_TIM_Base_Start_IT+0x9c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d004      	beq.n	80035d0 <HAL_TIM_Base_Start_IT+0x58>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a13      	ldr	r2, [pc, #76]	@ (8003618 <HAL_TIM_Base_Start_IT+0xa0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d111      	bne.n	80035f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b06      	cmp	r3, #6
 80035e0:	d010      	beq.n	8003604 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f2:	e007      	b.n	8003604 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800

0800361c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d020      	beq.n	8003680 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0202 	mvn.w	r2, #2
 8003650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f998 	bl	800399c <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f98b 	bl	800398a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f99a 	bl	80039ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d020      	beq.n	80036cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01b      	beq.n	80036cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0204 	mvn.w	r2, #4
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f972 	bl	800399c <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f965 	bl	800398a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f974 	bl	80039ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d020      	beq.n	8003718 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01b      	beq.n	8003718 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0208 	mvn.w	r2, #8
 80036e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2204      	movs	r2, #4
 80036ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f94c 	bl	800399c <HAL_TIM_IC_CaptureCallback>
 8003704:	e005      	b.n	8003712 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f93f 	bl	800398a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f94e 	bl	80039ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d020      	beq.n	8003764 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0210 	mvn.w	r2, #16
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2208      	movs	r2, #8
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f926 	bl	800399c <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f919 	bl	800398a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f928 	bl	80039ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0201 	mvn.w	r2, #1
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fc ff66 	bl	8000654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00c      	beq.n	80037ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fa7f 	bl	8003caa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00c      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8f8 	bl	80039c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00c      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0220 	mvn.w	r2, #32
 80037ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa52 	bl	8003c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037f4:	bf00      	nop
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_TIM_ConfigClockSource+0x1c>
 8003814:	2302      	movs	r3, #2
 8003816:	e0b4      	b.n	8003982 <HAL_TIM_ConfigClockSource+0x186>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800383e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003850:	d03e      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003856:	f200 8087 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385e:	f000 8086 	beq.w	800396e <HAL_TIM_ConfigClockSource+0x172>
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003866:	d87f      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003868:	2b70      	cmp	r3, #112	@ 0x70
 800386a:	d01a      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0xa6>
 800386c:	2b70      	cmp	r3, #112	@ 0x70
 800386e:	d87b      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003870:	2b60      	cmp	r3, #96	@ 0x60
 8003872:	d050      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x11a>
 8003874:	2b60      	cmp	r3, #96	@ 0x60
 8003876:	d877      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003878:	2b50      	cmp	r3, #80	@ 0x50
 800387a:	d03c      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0xfa>
 800387c:	2b50      	cmp	r3, #80	@ 0x50
 800387e:	d873      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	d058      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x13a>
 8003884:	2b40      	cmp	r3, #64	@ 0x40
 8003886:	d86f      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003888:	2b30      	cmp	r3, #48	@ 0x30
 800388a:	d064      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x15a>
 800388c:	2b30      	cmp	r3, #48	@ 0x30
 800388e:	d86b      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003890:	2b20      	cmp	r3, #32
 8003892:	d060      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x15a>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d867      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d05c      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x15a>
 800389c:	2b10      	cmp	r3, #16
 800389e:	d05a      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x15a>
 80038a0:	e062      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b2:	f000 f974 	bl	8003b9e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	609a      	str	r2, [r3, #8]
      break;
 80038ce:	e04f      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038e0:	f000 f95d 	bl	8003b9e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038f2:	609a      	str	r2, [r3, #8]
      break;
 80038f4:	e03c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	461a      	mov	r2, r3
 8003904:	f000 f8d4 	bl	8003ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2150      	movs	r1, #80	@ 0x50
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f92b 	bl	8003b6a <TIM_ITRx_SetConfig>
      break;
 8003914:	e02c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003922:	461a      	mov	r2, r3
 8003924:	f000 f8f2 	bl	8003b0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2160      	movs	r1, #96	@ 0x60
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f91b 	bl	8003b6a <TIM_ITRx_SetConfig>
      break;
 8003934:	e01c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003942:	461a      	mov	r2, r3
 8003944:	f000 f8b4 	bl	8003ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2140      	movs	r1, #64	@ 0x40
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f90b 	bl	8003b6a <TIM_ITRx_SetConfig>
      break;
 8003954:	e00c      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f000 f902 	bl	8003b6a <TIM_ITRx_SetConfig>
      break;
 8003966:	e003      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e000      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800396e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003980:	7bfb      	ldrb	r3, [r7, #15]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
	...

080039d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a2f      	ldr	r2, [pc, #188]	@ (8003aa4 <TIM_Base_SetConfig+0xd0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00b      	beq.n	8003a04 <TIM_Base_SetConfig+0x30>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f2:	d007      	beq.n	8003a04 <TIM_Base_SetConfig+0x30>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa8 <TIM_Base_SetConfig+0xd4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_Base_SetConfig+0x30>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a2b      	ldr	r2, [pc, #172]	@ (8003aac <TIM_Base_SetConfig+0xd8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d108      	bne.n	8003a16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a22      	ldr	r2, [pc, #136]	@ (8003aa4 <TIM_Base_SetConfig+0xd0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <TIM_Base_SetConfig+0x62>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a24:	d007      	beq.n	8003a36 <TIM_Base_SetConfig+0x62>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa8 <TIM_Base_SetConfig+0xd4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_Base_SetConfig+0x62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a1e      	ldr	r2, [pc, #120]	@ (8003aac <TIM_Base_SetConfig+0xd8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d108      	bne.n	8003a48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa4 <TIM_Base_SetConfig+0xd0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d103      	bne.n	8003a7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f023 0201 	bic.w	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	611a      	str	r2, [r3, #16]
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800

08003ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f023 0201 	bic.w	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f023 030a 	bic.w	r3, r3, #10
 8003aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f023 0210 	bic.w	r2, r3, #16
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	031b      	lsls	r3, r3, #12
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	621a      	str	r2, [r3, #32]
}
 8003b60:	bf00      	nop
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr

08003b6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f043 0307 	orr.w	r3, r3, #7
 8003b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	609a      	str	r2, [r3, #8]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	021a      	lsls	r2, r3, #8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	609a      	str	r2, [r3, #8]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e046      	b.n	8003c82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a16      	ldr	r2, [pc, #88]	@ (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00e      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c40:	d009      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a12      	ldr	r2, [pc, #72]	@ (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a10      	ldr	r2, [pc, #64]	@ (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d10c      	bne.n	8003c70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800

08003c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e042      	b.n	8003d54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fd fab6 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2224      	movs	r2, #36	@ 0x24
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fdbb 	bl	800487c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08c      	sub	sp, #48	@ 0x30
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	4613      	mov	r3, r2
 8003d68:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d156      	bne.n	8003e24 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_UART_Transmit_DMA+0x26>
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e04f      	b.n	8003e26 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2221      	movs	r2, #33	@ 0x21
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003daa:	4a21      	ldr	r2, [pc, #132]	@ (8003e30 <HAL_UART_Transmit_DMA+0xd4>)
 8003dac:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db2:	4a20      	ldr	r2, [pc, #128]	@ (8003e34 <HAL_UART_Transmit_DMA+0xd8>)
 8003db4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dba:	4a1f      	ldr	r2, [pc, #124]	@ (8003e38 <HAL_UART_Transmit_DMA+0xdc>)
 8003dbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003dc6:	f107 0308 	add.w	r3, r7, #8
 8003dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	461a      	mov	r2, r3
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	f7fe fa03 	bl	80021e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003dea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3314      	adds	r3, #20
 8003e0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e0e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6a39      	ldr	r1, [r7, #32]
 8003e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e5      	bne.n	8003dec <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e000      	b.n	8003e26 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003e24:	2302      	movs	r3, #2
  }
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3730      	adds	r7, #48	@ 0x30
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	080043ad 	.word	0x080043ad
 8003e34:	08004447 	.word	0x08004447
 8003e38:	08004463 	.word	0x08004463

08003e3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b0ba      	sub	sp, #232	@ 0xe8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10f      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x66>
 8003e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fc2f 	bl	80046fe <UART_Receive_IT>
      return;
 8003ea0:	e25b      	b.n	800435a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80de 	beq.w	8004068 <HAL_UART_IRQHandler+0x22c>
 8003eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d106      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ebc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80d1 	beq.w	8004068 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_UART_IRQHandler+0xae>
 8003ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	f043 0201 	orr.w	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_UART_IRQHandler+0xd2>
 8003ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	f043 0202 	orr.w	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <HAL_UART_IRQHandler+0xf6>
 8003f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f043 0204 	orr.w	r2, r3, #4
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d011      	beq.n	8003f62 <HAL_UART_IRQHandler+0x126>
 8003f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5a:	f043 0208 	orr.w	r2, r3, #8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 81f2 	beq.w	8004350 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_UART_IRQHandler+0x14e>
 8003f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fbba 	bl	80046fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x17a>
 8003fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d04f      	beq.n	8004056 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fac4 	bl	8004544 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d041      	beq.n	800404e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3314      	adds	r3, #20
 8003fd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3314      	adds	r3, #20
 8003ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800400e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1d9      	bne.n	8003fca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d013      	beq.n	8004046 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004022:	4a7e      	ldr	r2, [pc, #504]	@ (800421c <HAL_UART_IRQHandler+0x3e0>)
 8004024:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe f978 	bl	8002320 <HAL_DMA_Abort_IT>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004040:	4610      	mov	r0, r2
 8004042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004044:	e00e      	b.n	8004064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f99c 	bl	8004384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	e00a      	b.n	8004064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f998 	bl	8004384 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004054:	e006      	b.n	8004064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f994 	bl	8004384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004062:	e175      	b.n	8004350 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	bf00      	nop
    return;
 8004066:	e173      	b.n	8004350 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	2b01      	cmp	r3, #1
 800406e:	f040 814f 	bne.w	8004310 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 8148 	beq.w	8004310 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8141 	beq.w	8004310 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80b6 	beq.w	8004220 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8145 	beq.w	8004354 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040d2:	429a      	cmp	r2, r3
 80040d4:	f080 813e 	bcs.w	8004354 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	f000 8088 	beq.w	80041fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004102:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004106:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800410a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004118:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800411c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004124:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004130:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1d9      	bne.n	80040ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3314      	adds	r3, #20
 800413e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004148:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800415c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004160:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004164:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800416e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e1      	bne.n	8004138 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004186:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800418a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3314      	adds	r3, #20
 8004194:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004198:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800419a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800419e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e3      	bne.n	8004174 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041cc:	f023 0310 	bic.w	r3, r3, #16
 80041d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041de:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041e0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e3      	bne.n	80041ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe f856 	bl	80022a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800420a:	b29b      	uxth	r3, r3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	b29b      	uxth	r3, r3
 8004210:	4619      	mov	r1, r3
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f8bf 	bl	8004396 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004218:	e09c      	b.n	8004354 <HAL_UART_IRQHandler+0x518>
 800421a:	bf00      	nop
 800421c:	08004609 	.word	0x08004609
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004228:	b29b      	uxth	r3, r3
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 808e 	beq.w	8004358 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800423c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8089 	beq.w	8004358 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800425c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800426a:	647a      	str	r2, [r7, #68]	@ 0x44
 800426c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e3      	bne.n	8004246 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3314      	adds	r3, #20
 8004284:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	623b      	str	r3, [r7, #32]
   return(result);
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80042a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e3      	bne.n	800427e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0310 	bic.w	r3, r3, #16
 80042da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042e8:	61fa      	str	r2, [r7, #28]
 80042ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	617b      	str	r3, [r7, #20]
   return(result);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e3      	bne.n	80042c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004302:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f844 	bl	8004396 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800430e:	e023      	b.n	8004358 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <HAL_UART_IRQHandler+0x4f4>
 800431c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f981 	bl	8004630 <UART_Transmit_IT>
    return;
 800432e:	e014      	b.n	800435a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00e      	beq.n	800435a <HAL_UART_IRQHandler+0x51e>
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f9c0 	bl	80046ce <UART_EndTransmit_IT>
    return;
 800434e:	e004      	b.n	800435a <HAL_UART_IRQHandler+0x51e>
    return;
 8004350:	bf00      	nop
 8004352:	e002      	b.n	800435a <HAL_UART_IRQHandler+0x51e>
      return;
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <HAL_UART_IRQHandler+0x51e>
      return;
 8004358:	bf00      	nop
  }
}
 800435a:	37e8      	adds	r7, #232	@ 0xe8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr

08004372 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	460b      	mov	r3, r1
 80043a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b090      	sub	sp, #64	@ 0x40
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d137      	bne.n	8004438 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80043c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ca:	2200      	movs	r2, #0
 80043cc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	623b      	str	r3, [r7, #32]
   return(result);
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3314      	adds	r3, #20
 80043ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80043f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1e5      	bne.n	80043ce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	60fb      	str	r3, [r7, #12]
   return(result);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004418:	637b      	str	r3, [r7, #52]	@ 0x34
 800441a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004422:	61fa      	str	r2, [r7, #28]
 8004424:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	69b9      	ldr	r1, [r7, #24]
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	617b      	str	r3, [r7, #20]
   return(result);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e5      	bne.n	8004402 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004436:	e002      	b.n	800443e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004438:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800443a:	f7ff ff91 	bl	8004360 <HAL_UART_TxCpltCallback>
}
 800443e:	bf00      	nop
 8004440:	3740      	adds	r7, #64	@ 0x40
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff ff8c 	bl	8004372 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447e:	2b00      	cmp	r3, #0
 8004480:	bf14      	ite	ne
 8004482:	2301      	movne	r3, #1
 8004484:	2300      	moveq	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b21      	cmp	r3, #33	@ 0x21
 8004494:	d108      	bne.n	80044a8 <UART_DMAError+0x46>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2200      	movs	r2, #0
 80044a0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80044a2:	68b8      	ldr	r0, [r7, #8]
 80044a4:	f000 f827 	bl	80044f6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bf14      	ite	ne
 80044b6:	2301      	movne	r3, #1
 80044b8:	2300      	moveq	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b22      	cmp	r3, #34	@ 0x22
 80044c8:	d108      	bne.n	80044dc <UART_DMAError+0x7a>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2200      	movs	r2, #0
 80044d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80044d6:	68b8      	ldr	r0, [r7, #8]
 80044d8:	f000 f834 	bl	8004544 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e0:	f043 0210 	orr.w	r2, r3, #16
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044e8:	68b8      	ldr	r0, [r7, #8]
 80044ea:	f7ff ff4b 	bl	8004384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b089      	sub	sp, #36	@ 0x24
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	60bb      	str	r3, [r7, #8]
   return(result);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	61ba      	str	r2, [r7, #24]
 8004520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	613b      	str	r3, [r7, #16]
   return(result);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e5      	bne.n	80044fe <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800453a:	bf00      	nop
 800453c:	3724      	adds	r7, #36	@ 0x24
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b095      	sub	sp, #84	@ 0x54
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800456c:	643a      	str	r2, [r7, #64]	@ 0x40
 800456e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800457a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e5      	bne.n	800454c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3314      	adds	r3, #20
 8004586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3314      	adds	r3, #20
 800459e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e5      	bne.n	8004580 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d119      	bne.n	80045f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f023 0310 	bic.w	r3, r3, #16
 80045d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045dc:	61ba      	str	r2, [r7, #24]
 80045de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6979      	ldr	r1, [r7, #20]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e5      	bne.n	80045bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045fe:	bf00      	nop
 8004600:	3754      	adds	r7, #84	@ 0x54
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff feae 	bl	8004384 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b21      	cmp	r3, #33	@ 0x21
 8004642:	d13e      	bne.n	80046c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464c:	d114      	bne.n	8004678 <UART_Transmit_IT+0x48>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d110      	bne.n	8004678 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800466a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	1c9a      	adds	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	621a      	str	r2, [r3, #32]
 8004676:	e008      	b.n	800468a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	1c59      	adds	r1, r3, #1
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6211      	str	r1, [r2, #32]
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29b      	uxth	r3, r3
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	4619      	mov	r1, r3
 8004698:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10f      	bne.n	80046be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff fe36 	bl	8004360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b08c      	sub	sp, #48	@ 0x30
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b22      	cmp	r3, #34	@ 0x22
 8004710:	f040 80ae 	bne.w	8004870 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800471c:	d117      	bne.n	800474e <UART_Receive_IT+0x50>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d113      	bne.n	800474e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	b29b      	uxth	r3, r3
 8004738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473c:	b29a      	uxth	r2, r3
 800473e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004740:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004746:	1c9a      	adds	r2, r3, #2
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	629a      	str	r2, [r3, #40]	@ 0x28
 800474c:	e026      	b.n	800479c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004752:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004760:	d007      	beq.n	8004772 <UART_Receive_IT+0x74>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <UART_Receive_IT+0x82>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	e008      	b.n	8004792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800478c:	b2da      	uxtb	r2, r3
 800478e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4619      	mov	r1, r3
 80047aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d15d      	bne.n	800486c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0220 	bic.w	r2, r2, #32
 80047be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0201 	bic.w	r2, r2, #1
 80047de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d135      	bne.n	8004862 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	613b      	str	r3, [r7, #16]
   return(result);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f023 0310 	bic.w	r3, r3, #16
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800481c:	623a      	str	r2, [r7, #32]
 800481e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	69f9      	ldr	r1, [r7, #28]
 8004822:	6a3a      	ldr	r2, [r7, #32]
 8004824:	e841 2300 	strex	r3, r2, [r1]
 8004828:	61bb      	str	r3, [r7, #24]
   return(result);
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e5      	bne.n	80047fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b10      	cmp	r3, #16
 800483c:	d10a      	bne.n	8004854 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004858:	4619      	mov	r1, r3
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff fd9b 	bl	8004396 <HAL_UARTEx_RxEventCallback>
 8004860:	e002      	b.n	8004868 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fc f8e8 	bl	8000a38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e002      	b.n	8004872 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	e000      	b.n	8004872 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004870:	2302      	movs	r3, #2
  }
}
 8004872:	4618      	mov	r0, r3
 8004874:	3730      	adds	r7, #48	@ 0x30
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80048b6:	f023 030c 	bic.w	r3, r3, #12
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	430b      	orrs	r3, r1
 80048c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2c      	ldr	r2, [pc, #176]	@ (8004990 <UART_SetConfig+0x114>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d103      	bne.n	80048ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048e4:	f7fe fc5a 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	e002      	b.n	80048f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048ec:	f7fe fc42 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 80048f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009a      	lsls	r2, r3, #2
 80048fc:	441a      	add	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	4a22      	ldr	r2, [pc, #136]	@ (8004994 <UART_SetConfig+0x118>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	0119      	lsls	r1, r3, #4
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009a      	lsls	r2, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	fbb2 f2f3 	udiv	r2, r2, r3
 8004928:	4b1a      	ldr	r3, [pc, #104]	@ (8004994 <UART_SetConfig+0x118>)
 800492a:	fba3 0302 	umull	r0, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2064      	movs	r0, #100	@ 0x64
 8004932:	fb00 f303 	mul.w	r3, r0, r3
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	3332      	adds	r3, #50	@ 0x32
 800493c:	4a15      	ldr	r2, [pc, #84]	@ (8004994 <UART_SetConfig+0x118>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004948:	4419      	add	r1, r3
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004960:	4b0c      	ldr	r3, [pc, #48]	@ (8004994 <UART_SetConfig+0x118>)
 8004962:	fba3 0302 	umull	r0, r3, r3, r2
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2064      	movs	r0, #100	@ 0x64
 800496a:	fb00 f303 	mul.w	r3, r0, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	3332      	adds	r3, #50	@ 0x32
 8004974:	4a07      	ldr	r2, [pc, #28]	@ (8004994 <UART_SetConfig+0x118>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	f003 020f 	and.w	r2, r3, #15
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	440a      	add	r2, r1
 8004986:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40013800 	.word	0x40013800
 8004994:	51eb851f 	.word	0x51eb851f

08004998 <memset>:
 8004998:	4603      	mov	r3, r0
 800499a:	4402      	add	r2, r0
 800499c:	4293      	cmp	r3, r2
 800499e:	d100      	bne.n	80049a2 <memset+0xa>
 80049a0:	4770      	bx	lr
 80049a2:	f803 1b01 	strb.w	r1, [r3], #1
 80049a6:	e7f9      	b.n	800499c <memset+0x4>

080049a8 <__libc_init_array>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	2600      	movs	r6, #0
 80049ac:	4d0c      	ldr	r5, [pc, #48]	@ (80049e0 <__libc_init_array+0x38>)
 80049ae:	4c0d      	ldr	r4, [pc, #52]	@ (80049e4 <__libc_init_array+0x3c>)
 80049b0:	1b64      	subs	r4, r4, r5
 80049b2:	10a4      	asrs	r4, r4, #2
 80049b4:	42a6      	cmp	r6, r4
 80049b6:	d109      	bne.n	80049cc <__libc_init_array+0x24>
 80049b8:	f000 f81a 	bl	80049f0 <_init>
 80049bc:	2600      	movs	r6, #0
 80049be:	4d0a      	ldr	r5, [pc, #40]	@ (80049e8 <__libc_init_array+0x40>)
 80049c0:	4c0a      	ldr	r4, [pc, #40]	@ (80049ec <__libc_init_array+0x44>)
 80049c2:	1b64      	subs	r4, r4, r5
 80049c4:	10a4      	asrs	r4, r4, #2
 80049c6:	42a6      	cmp	r6, r4
 80049c8:	d105      	bne.n	80049d6 <__libc_init_array+0x2e>
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d0:	4798      	blx	r3
 80049d2:	3601      	adds	r6, #1
 80049d4:	e7ee      	b.n	80049b4 <__libc_init_array+0xc>
 80049d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049da:	4798      	blx	r3
 80049dc:	3601      	adds	r6, #1
 80049de:	e7f2      	b.n	80049c6 <__libc_init_array+0x1e>
 80049e0:	08004a48 	.word	0x08004a48
 80049e4:	08004a48 	.word	0x08004a48
 80049e8:	08004a48 	.word	0x08004a48
 80049ec:	08004a4c 	.word	0x08004a4c

080049f0 <_init>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr

080049fc <_fini>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr
