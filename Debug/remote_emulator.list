
remote_emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab64  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800ac70  0800ac70  0000bc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acf8  0800acf8  0000c1a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800acf8  0800acf8  0000c1a0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800acf8  0800acf8  0000c1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf8  0800acf8  0000bcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800acfc  0800acfc  0000bcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a0  20000000  0800ad00  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001434  200001a0  0800aea0  0000c1a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015d4  0800aea0  0000c5d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171c5  00000000  00000000  0000c1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa0  00000000  00000000  0002338e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00026e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb9  00000000  00000000  00028298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b200  00000000  00000000  00029251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001933b  00000000  00000000  00044451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094565  00000000  00000000  0005d78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1cf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000550c  00000000  00000000  000f1d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f7240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a0 	.word	0x200001a0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ac58 	.word	0x0800ac58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a4 	.word	0x200001a4
 8000148:	0800ac58 	.word	0x0800ac58

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d110      	bne.n	8000686 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET)
 8000664:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000668:	481d      	ldr	r0, [pc, #116]	@ (80006e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800066a:	f002 f999 	bl	80029a0 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d103      	bne.n	800067c <HAL_TIM_PeriodElapsedCallback+0x28>
		{
//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
			arm = 172;
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000676:	22ac      	movs	r2, #172	@ 0xac
 8000678:	601a      	str	r2, [r3, #0]
	}
	else if (htim == &htim4)
	{
		HAL_UART_Transmit_DMA(&huart1, sbus_out, SBUS_MAX_SIZE);
	}
}
 800067a:	e1c3      	b.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0x3b0>
			arm = 1811;
 800067c:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800067e:	f240 7213 	movw	r2, #1811	@ 0x713
 8000682:	601a      	str	r2, [r3, #0]
}
 8000684:	e1be      	b.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0x3b0>
	else if (htim == &htim2)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d138      	bne.n	8000700 <HAL_TIM_PeriodElapsedCallback+0xac>
		if (arm == 1811)
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f240 7213 	movw	r2, #1811	@ 0x713
 8000696:	4293      	cmp	r3, r2
 8000698:	d11b      	bne.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x7e>
			thr = ((float)(1811-172) * ((float)adc/4095)) + 172;
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <HAL_TIM_PeriodElapsedCallback+0x98>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fe0a 	bl	80002b8 <__aeabi_ui2f>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4912      	ldr	r1, [pc, #72]	@ (80006f0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff11 	bl	80004d0 <__aeabi_fdiv>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4910      	ldr	r1, [pc, #64]	@ (80006f4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fe58 	bl	8000368 <__aeabi_fmul>
 80006b8:	4603      	mov	r3, r0
 80006ba:	490f      	ldr	r1, [pc, #60]	@ (80006f8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd4b 	bl	8000158 <__addsf3>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff9f 	bl	8000608 <__aeabi_f2iz>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a0b      	ldr	r2, [pc, #44]	@ (80006fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	e198      	b.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0x3b0>
			thr = 172;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80006d4:	22ac      	movs	r2, #172	@ 0xac
 80006d6:	601a      	str	r2, [r3, #0]
}
 80006d8:	e194      	b.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0x3b0>
 80006da:	bf00      	nop
 80006dc:	200001ec 	.word	0x200001ec
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	2000001c 	.word	0x2000001c
 80006e8:	20000234 	.word	0x20000234
 80006ec:	2000040e 	.word	0x2000040e
 80006f0:	457ff000 	.word	0x457ff000
 80006f4:	44cce000 	.word	0x44cce000
 80006f8:	432c0000 	.word	0x432c0000
 80006fc:	20000020 	.word	0x20000020
	else if (htim == &htim3)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4aa8      	ldr	r2, [pc, #672]	@ (80009a4 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000704:	4293      	cmp	r3, r2
 8000706:	f040 8174 	bne.w	80009f2 <HAL_TIM_PeriodElapsedCallback+0x39e>
		ch[2] = thr;
 800070a:	4ba7      	ldr	r3, [pc, #668]	@ (80009a8 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	b21a      	sxth	r2, r3
 8000710:	4ba6      	ldr	r3, [pc, #664]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000712:	809a      	strh	r2, [r3, #4]
		ch[4] = arm;
 8000714:	4ba6      	ldr	r3, [pc, #664]	@ (80009b0 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	b21a      	sxth	r2, r3
 800071a:	4ba4      	ldr	r3, [pc, #656]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 800071c:	811a      	strh	r2, [r3, #8]
		sbus_out[0] = (uint8_t)(0x0F);
 800071e:	4ba5      	ldr	r3, [pc, #660]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000720:	220f      	movs	r2, #15
 8000722:	701a      	strb	r2, [r3, #0]
		sbus_out[1] = (uint8_t)(ch[0] & 0x07FF);
 8000724:	4ba1      	ldr	r3, [pc, #644]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4ba1      	ldr	r3, [pc, #644]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800072e:	705a      	strb	r2, [r3, #1]
		sbus_out[2] = (uint8_t)(((ch[0] & 0x07FF) >> 8) | ((ch[1] & 0x07FF) << 3));
 8000730:	4b9e      	ldr	r3, [pc, #632]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000736:	b29b      	uxth	r3, r3
 8000738:	121b      	asrs	r3, r3, #8
 800073a:	b25b      	sxtb	r3, r3
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	b25a      	sxtb	r2, r3
 8000742:	4b9a      	ldr	r3, [pc, #616]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000744:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000748:	b25b      	sxtb	r3, r3
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	b25b      	sxtb	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b25b      	sxtb	r3, r3
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b97      	ldr	r3, [pc, #604]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000756:	709a      	strb	r2, [r3, #2]
		sbus_out[3] = (uint8_t)(((ch[1] & 0x07FF) >> 5) | ((ch[2] & 0x07FF) << 6));
 8000758:	4b94      	ldr	r3, [pc, #592]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 800075a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800075e:	b29b      	uxth	r3, r3
 8000760:	115b      	asrs	r3, r3, #5
 8000762:	b25b      	sxtb	r3, r3
 8000764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000768:	b25a      	sxtb	r2, r3
 800076a:	4b90      	ldr	r3, [pc, #576]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 800076c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000770:	b25b      	sxtb	r3, r3
 8000772:	019b      	lsls	r3, r3, #6
 8000774:	b25b      	sxtb	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b8d      	ldr	r3, [pc, #564]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800077e:	70da      	strb	r2, [r3, #3]
		sbus_out[4] = (uint8_t)(((ch[2] & 0x07FF) >> 2));
 8000780:	4b8a      	ldr	r3, [pc, #552]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000782:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000786:	b29b      	uxth	r3, r3
 8000788:	109b      	asrs	r3, r3, #2
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b89      	ldr	r3, [pc, #548]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800078e:	711a      	strb	r2, [r3, #4]
		sbus_out[5] = (uint8_t)(((ch[2] & 0x07FF) >> 10) | ((ch[3] & 0x07FF) << 1));
 8000790:	4b86      	ldr	r3, [pc, #536]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000792:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000796:	b29b      	uxth	r3, r3
 8000798:	129b      	asrs	r3, r3, #10
 800079a:	b25b      	sxtb	r3, r3
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	b25a      	sxtb	r2, r3
 80007a2:	4b82      	ldr	r3, [pc, #520]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 80007a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b7f      	ldr	r3, [pc, #508]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80007b6:	715a      	strb	r2, [r3, #5]
		sbus_out[6] = (uint8_t)(((ch[3] & 0x07FF) >> 7) | ((ch[4] & 0x07FF) << 4));
 80007b8:	4b7c      	ldr	r3, [pc, #496]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 80007ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	11db      	asrs	r3, r3, #7
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	f003 030f 	and.w	r3, r3, #15
 80007c8:	b25a      	sxtb	r2, r3
 80007ca:	4b78      	ldr	r3, [pc, #480]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 80007cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b75      	ldr	r3, [pc, #468]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80007de:	719a      	strb	r2, [r3, #6]
		sbus_out[7] = (uint8_t)(((ch[4] & 0x07FF) >> 4) | ((ch[5] & 0x07FF) << 7));
 80007e0:	4b72      	ldr	r3, [pc, #456]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 80007e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	111b      	asrs	r3, r3, #4
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007f0:	b25a      	sxtb	r2, r3
 80007f2:	4b6e      	ldr	r3, [pc, #440]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 80007f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	01db      	lsls	r3, r3, #7
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	4313      	orrs	r3, r2
 8000800:	b25b      	sxtb	r3, r3
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b6b      	ldr	r3, [pc, #428]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000806:	71da      	strb	r2, [r3, #7]
		sbus_out[8] = (uint8_t)(((ch[5] & 0x07FF) >> 1));
 8000808:	4b68      	ldr	r3, [pc, #416]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 800080a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800080e:	b29b      	uxth	r3, r3
 8000810:	105b      	asrs	r3, r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b67      	ldr	r3, [pc, #412]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000816:	721a      	strb	r2, [r3, #8]
		sbus_out[9] = (uint8_t)(((ch[5] & 0x07FF) >> 9)  | ((ch[6] & 0x07FF) << 2));
 8000818:	4b64      	ldr	r3, [pc, #400]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 800081a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800081e:	b29b      	uxth	r3, r3
 8000820:	125b      	asrs	r3, r3, #9
 8000822:	b25b      	sxtb	r3, r3
 8000824:	f003 0303 	and.w	r3, r3, #3
 8000828:	b25a      	sxtb	r2, r3
 800082a:	4b60      	ldr	r3, [pc, #384]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 800082c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000830:	b25b      	sxtb	r3, r3
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	b25b      	sxtb	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b25b      	sxtb	r3, r3
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b5d      	ldr	r3, [pc, #372]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800083e:	725a      	strb	r2, [r3, #9]
		sbus_out[10] = (uint8_t)(((ch[6] & 0x07FF) >> 6)  | ((ch[7] & 0x07FF) << 5));
 8000840:	4b5a      	ldr	r3, [pc, #360]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000842:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000846:	b29b      	uxth	r3, r3
 8000848:	119b      	asrs	r3, r3, #6
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f003 031f 	and.w	r3, r3, #31
 8000850:	b25a      	sxtb	r2, r3
 8000852:	4b56      	ldr	r3, [pc, #344]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000854:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000858:	b25b      	sxtb	r3, r3
 800085a:	015b      	lsls	r3, r3, #5
 800085c:	b25b      	sxtb	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b25b      	sxtb	r3, r3
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b53      	ldr	r3, [pc, #332]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000866:	729a      	strb	r2, [r3, #10]
		sbus_out[11] = (uint8_t)(((ch[7] & 0x07FF) >> 3));
 8000868:	4b50      	ldr	r3, [pc, #320]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 800086a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800086e:	b29b      	uxth	r3, r3
 8000870:	10db      	asrs	r3, r3, #3
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b4f      	ldr	r3, [pc, #316]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000876:	72da      	strb	r2, [r3, #11]
		sbus_out[12] = (uint8_t)((ch[8] & 0x07FF));
 8000878:	4b4c      	ldr	r3, [pc, #304]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 800087a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b4c      	ldr	r3, [pc, #304]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000882:	731a      	strb	r2, [r3, #12]
		sbus_out[13] = (uint8_t)(((ch[8] & 0x07FF) >> 8) | ((ch[9]  & 0x07FF) << 3));
 8000884:	4b49      	ldr	r3, [pc, #292]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000886:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800088a:	b29b      	uxth	r3, r3
 800088c:	121b      	asrs	r3, r3, #8
 800088e:	b25b      	sxtb	r3, r3
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	b25a      	sxtb	r2, r3
 8000896:	4b45      	ldr	r3, [pc, #276]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000898:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b25b      	sxtb	r3, r3
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b42      	ldr	r3, [pc, #264]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80008aa:	735a      	strb	r2, [r3, #13]
		sbus_out[14] = (uint8_t)(((ch[9] & 0x07FF) >> 5) | ((ch[10] & 0x07FF) << 6));
 80008ac:	4b3f      	ldr	r3, [pc, #252]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 80008ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	115b      	asrs	r3, r3, #5
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008bc:	b25a      	sxtb	r2, r3
 80008be:	4b3b      	ldr	r3, [pc, #236]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 80008c0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	019b      	lsls	r3, r3, #6
 80008c8:	b25b      	sxtb	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b38      	ldr	r3, [pc, #224]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80008d2:	739a      	strb	r2, [r3, #14]
		sbus_out[15] = (uint8_t)(((ch[10] & 0x07FF) >> 2));
 80008d4:	4b35      	ldr	r3, [pc, #212]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 80008d6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	109b      	asrs	r3, r3, #2
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b34      	ldr	r3, [pc, #208]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80008e2:	73da      	strb	r2, [r3, #15]
		sbus_out[16] = (uint8_t)(((ch[10] & 0x07FF) >> 10) | ((ch[11] & 0x07FF) << 1));
 80008e4:	4b31      	ldr	r3, [pc, #196]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 80008e6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	129b      	asrs	r3, r3, #10
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	b25a      	sxtb	r2, r3
 80008f6:	4b2d      	ldr	r3, [pc, #180]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 80008f8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	b25b      	sxtb	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b25b      	sxtb	r3, r3
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b2a      	ldr	r3, [pc, #168]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800090a:	741a      	strb	r2, [r3, #16]
		sbus_out[17] = (uint8_t)(((ch[11] & 0x07FF) >> 7)  | ((ch[12] & 0x07FF) << 4));
 800090c:	4b27      	ldr	r3, [pc, #156]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 800090e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000912:	b29b      	uxth	r3, r3
 8000914:	11db      	asrs	r3, r3, #7
 8000916:	b25b      	sxtb	r3, r3
 8000918:	f003 030f 	and.w	r3, r3, #15
 800091c:	b25a      	sxtb	r2, r3
 800091e:	4b23      	ldr	r3, [pc, #140]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000920:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000924:	b25b      	sxtb	r3, r3
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	b25b      	sxtb	r3, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	b25b      	sxtb	r3, r3
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000932:	745a      	strb	r2, [r3, #17]
		sbus_out[18] = (uint8_t)(((ch[12] & 0x07FF) >> 4)  | ((ch[13] & 0x07FF) << 7));
 8000934:	4b1d      	ldr	r3, [pc, #116]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000936:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800093a:	b29b      	uxth	r3, r3
 800093c:	111b      	asrs	r3, r3, #4
 800093e:	b25b      	sxtb	r3, r3
 8000940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000944:	b25a      	sxtb	r2, r3
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000948:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800094c:	b25b      	sxtb	r3, r3
 800094e:	01db      	lsls	r3, r3, #7
 8000950:	b25b      	sxtb	r3, r3
 8000952:	4313      	orrs	r3, r2
 8000954:	b25b      	sxtb	r3, r3
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800095a:	749a      	strb	r2, [r3, #18]
		sbus_out[19] = (uint8_t)(((ch[13] & 0x07FF) >> 1));
 800095c:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 800095e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000962:	b29b      	uxth	r3, r3
 8000964:	105b      	asrs	r3, r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800096a:	74da      	strb	r2, [r3, #19]
		sbus_out[20] = (uint8_t)(((ch[13] & 0x07FF) >> 9)  | ((ch[14] & 0x07FF) << 2));
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 800096e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000972:	b29b      	uxth	r3, r3
 8000974:	125b      	asrs	r3, r3, #9
 8000976:	b25b      	sxtb	r3, r3
 8000978:	f003 0303 	and.w	r3, r3, #3
 800097c:	b25a      	sxtb	r2, r3
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000980:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000984:	b25b      	sxtb	r3, r3
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	b25b      	sxtb	r3, r3
 800098a:	4313      	orrs	r3, r2
 800098c:	b25b      	sxtb	r3, r3
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000992:	751a      	strb	r2, [r3, #20]
		sbus_out[21] = (uint8_t)(((ch[14] & 0x07FF) >> 6)  | ((ch[15] & 0x07FF) << 5));
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000996:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800099a:	b29b      	uxth	r3, r3
 800099c:	119b      	asrs	r3, r3, #6
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	e00a      	b.n	80009b8 <HAL_TIM_PeriodElapsedCallback+0x364>
 80009a2:	bf00      	nop
 80009a4:	2000027c 	.word	0x2000027c
 80009a8:	20000020 	.word	0x20000020
 80009ac:	200003dc 	.word	0x200003dc
 80009b0:	2000001c 	.word	0x2000001c
 80009b4:	20000000 	.word	0x20000000
 80009b8:	f003 031f 	and.w	r3, r3, #31
 80009bc:	b25a      	sxtb	r2, r3
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80009c0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	015b      	lsls	r3, r3, #5
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80009d2:	755a      	strb	r2, [r3, #21]
		sbus_out[22] = (uint8_t)(((ch[15] & 0x07FF) >> 3));
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80009d6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	10db      	asrs	r3, r3, #3
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80009e2:	759a      	strb	r2, [r3, #22]
		sbus_out[23] = (uint8_t)(0x00 | (0x00 * CH17_MASK_) | (0x00 * CH18_MASK_) | (0x00 * FAILSAFE_MASK_) | (0x00 * LOST_FRAME_MASK_));
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	75da      	strb	r2, [r3, #23]
		sbus_out[24] = (uint8_t)(0x00);
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	e008      	b.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0x3b0>
	else if (htim == &htim4)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a07      	ldr	r2, [pc, #28]	@ (8000a14 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d104      	bne.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0x3b0>
		HAL_UART_Transmit_DMA(&huart1, sbus_out, SBUS_MAX_SIZE);
 80009fa:	2219      	movs	r2, #25
 80009fc:	4904      	ldr	r1, [pc, #16]	@ (8000a10 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000a00:	f004 ff34 	bl	800586c <HAL_UART_Transmit_DMA>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200003dc 	.word	0x200003dc
 8000a10:	20000000 	.word	0x20000000
 8000a14:	200002c4 	.word	0x200002c4
 8000a18:	2000030c 	.word	0x2000030c

08000a1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
	{

	}
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
	...

08000a30 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a06      	ldr	r2, [pc, #24]	@ (8000a58 <HAL_ADC_ConvCpltCallback+0x28>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d106      	bne.n	8000a50 <HAL_ADC_ConvCpltCallback+0x20>
    {
        adc = HAL_ADC_GetValue(&hadc1);
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a44:	f000 ff58 	bl	80018f8 <HAL_ADC_GetValue>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <HAL_ADC_ConvCpltCallback+0x30>)
 8000a4e:	801a      	strh	r2, [r3, #0]
    }
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40012400 	.word	0x40012400
 8000a5c:	200001bc 	.word	0x200001bc
 8000a60:	2000040e 	.word	0x2000040e

08000a64 <USB_CDC_RxHandler>:

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a72:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <USB_CDC_RxHandler+0x30>)
 8000a74:	f001 ffc3 	bl	80029fe <HAL_GPIO_TogglePin>
	CDC_Transmit_FS(sbus_out, SBUS_MAX_SIZE);
 8000a78:	2119      	movs	r1, #25
 8000a7a:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <USB_CDC_RxHandler+0x34>)
 8000a7c:	f009 fce2 	bl	800a444 <CDC_Transmit_FS>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a84:	4803      	ldr	r0, [pc, #12]	@ (8000a94 <USB_CDC_RxHandler+0x30>)
 8000a86:	f001 ffba 	bl	80029fe <HAL_GPIO_TogglePin>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40011000 	.word	0x40011000
 8000a98:	20000000 	.word	0x20000000

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f000 fd39 	bl	8001518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa6:	f000 f859 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aaa:	f000 fa7f 	bl	8000fac <MX_GPIO_Init>
  MX_DMA_Init();
 8000aae:	f000 fa57 	bl	8000f60 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ab2:	f000 fa27 	bl	8000f04 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ab6:	f000 f8ed 	bl	8000c94 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000aba:	f000 f93b 	bl	8000d34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000abe:	f000 f985 	bl	8000dcc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ac2:	f000 f9d1 	bl	8000e68 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000ac6:	f000 f8a7 	bl	8000c18 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000aca:	f009 fbef 	bl	800a2ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000ace:	481b      	ldr	r0, [pc, #108]	@ (8000b3c <main+0xa0>)
 8000ad0:	f001 f97a 	bl	8001dc8 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000ad4:	481a      	ldr	r0, [pc, #104]	@ (8000b40 <main+0xa4>)
 8000ad6:	f004 fad7 	bl	8005088 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ada:	481a      	ldr	r0, [pc, #104]	@ (8000b44 <main+0xa8>)
 8000adc:	f004 fad4 	bl	8005088 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000ae0:	4819      	ldr	r0, [pc, #100]	@ (8000b48 <main+0xac>)
 8000ae2:	f004 fad1 	bl	8005088 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000ae6:	4819      	ldr	r0, [pc, #100]	@ (8000b4c <main+0xb0>)
 8000ae8:	f004 face 	bl	8005088 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit_DMA(&huart1, sbus_out, SBUS_MAX_SIZE);
 8000aec:	2219      	movs	r2, #25
 8000aee:	4918      	ldr	r1, [pc, #96]	@ (8000b50 <main+0xb4>)
 8000af0:	4818      	ldr	r0, [pc, #96]	@ (8000b54 <main+0xb8>)
 8000af2:	f004 febb 	bl	800586c <HAL_UART_Transmit_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8000af6:	4811      	ldr	r0, [pc, #68]	@ (8000b3c <main+0xa0>)
 8000af8:	f000 fe48 	bl	800178c <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  for (int i = 0; i < 16; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	e007      	b.n	8000b12 <main+0x76>
  {
	  ch[i] = 171;
 8000b02:	4a15      	ldr	r2, [pc, #84]	@ (8000b58 <main+0xbc>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	21ab      	movs	r1, #171	@ 0xab
 8000b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < 16; i++)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	ddf4      	ble.n	8000b02 <main+0x66>
  }

  ch[0] = 995;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <main+0xbc>)
 8000b1a:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8000b1e:	801a      	strh	r2, [r3, #0]
  ch[1] = 995;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <main+0xbc>)
 8000b22:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8000b26:	805a      	strh	r2, [r3, #2]
  ch[2] = 172;
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <main+0xbc>)
 8000b2a:	22ac      	movs	r2, #172	@ 0xac
 8000b2c:	809a      	strh	r2, [r3, #4]
  ch[3] = 995;
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <main+0xbc>)
 8000b30:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8000b34:	80da      	strh	r2, [r3, #6]

  while (1)
 8000b36:	bf00      	nop
 8000b38:	e7fd      	b.n	8000b36 <main+0x9a>
 8000b3a:	bf00      	nop
 8000b3c:	200001bc 	.word	0x200001bc
 8000b40:	200001ec 	.word	0x200001ec
 8000b44:	20000234 	.word	0x20000234
 8000b48:	2000027c 	.word	0x2000027c
 8000b4c:	200002c4 	.word	0x200002c4
 8000b50:	20000000 	.word	0x20000000
 8000b54:	2000030c 	.word	0x2000030c
 8000b58:	200003dc 	.word	0x200003dc

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	@ 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b66:	2228      	movs	r2, #40	@ 0x28
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00a f848 	bl	800ac00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ba8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fc9c 	bl	80044f0 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bbe:	f000 fa5b 	bl	8001078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 ff08 	bl	80049f4 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bea:	f000 fa45 	bl	8001078 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bf6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f004 f886 	bl	8004d10 <HAL_RCCEx_PeriphCLKConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c0a:	f000 fa35 	bl	8001078 <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3750      	adds	r7, #80	@ 0x50
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c28:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <MX_ADC1_Init+0x74>)
 8000c2a:	4a19      	ldr	r2, [pc, #100]	@ (8000c90 <MX_ADC1_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_ADC1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <MX_ADC1_Init+0x74>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_ADC1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_ADC1_Init+0x74>)
 8000c42:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c48:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <MX_ADC1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_ADC1_Init+0x74>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c54:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <MX_ADC1_Init+0x74>)
 8000c56:	f000 fcc1 	bl	80015dc <HAL_ADC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c60:	f000 fa0a 	bl	8001078 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c64:	2308      	movs	r3, #8
 8000c66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_ADC1_Init+0x74>)
 8000c76:	f000 ff13 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c80:	f000 f9fa 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200001bc 	.word	0x200001bc
 8000c90:	40012400 	.word	0x40012400

08000c94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <MX_TIM1_Init+0x98>)
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d30 <MX_TIM1_Init+0x9c>)
 8000cb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <MX_TIM1_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <MX_TIM1_Init+0x98>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <MX_TIM1_Init+0x98>)
 8000cc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cca:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <MX_TIM1_Init+0x98>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <MX_TIM1_Init+0x98>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <MX_TIM1_Init+0x98>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cdc:	4813      	ldr	r0, [pc, #76]	@ (8000d2c <MX_TIM1_Init+0x98>)
 8000cde:	f004 f983 	bl	8004fe8 <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ce8:	f000 f9c6 	bl	8001078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	@ (8000d2c <MX_TIM1_Init+0x98>)
 8000cfa:	f004 fb07 	bl	800530c <HAL_TIM_ConfigClockSource>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d04:	f000 f9b8 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <MX_TIM1_Init+0x98>)
 8000d16:	f004 fce9 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d20:	f000 f9aa 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200001ec 	.word	0x200001ec
 8000d30:	40012c00 	.word	0x40012c00

08000d34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <MX_TIM2_Init+0x94>)
 8000d52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <MX_TIM2_Init+0x94>)
 8000d5a:	2214      	movs	r2, #20
 8000d5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <MX_TIM2_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d64:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <MX_TIM2_Init+0x94>)
 8000d66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <MX_TIM2_Init+0x94>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <MX_TIM2_Init+0x94>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d78:	4813      	ldr	r0, [pc, #76]	@ (8000dc8 <MX_TIM2_Init+0x94>)
 8000d7a:	f004 f935 	bl	8004fe8 <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d84:	f000 f978 	bl	8001078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4619      	mov	r1, r3
 8000d94:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <MX_TIM2_Init+0x94>)
 8000d96:	f004 fab9 	bl	800530c <HAL_TIM_ConfigClockSource>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000da0:	f000 f96a 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <MX_TIM2_Init+0x94>)
 8000db2:	f004 fc9b 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dbc:	f000 f95c 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000234 	.word	0x20000234

08000dcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <MX_TIM3_Init+0x94>)
 8000dea:	4a1e      	ldr	r2, [pc, #120]	@ (8000e64 <MX_TIM3_Init+0x98>)
 8000dec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <MX_TIM3_Init+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <MX_TIM3_Init+0x94>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <MX_TIM3_Init+0x94>)
 8000dfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_TIM3_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_TIM3_Init+0x94>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e0e:	4814      	ldr	r0, [pc, #80]	@ (8000e60 <MX_TIM3_Init+0x94>)
 8000e10:	f004 f8ea 	bl	8004fe8 <HAL_TIM_Base_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f000 f92d 	bl	8001078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480d      	ldr	r0, [pc, #52]	@ (8000e60 <MX_TIM3_Init+0x94>)
 8000e2c:	f004 fa6e 	bl	800530c <HAL_TIM_ConfigClockSource>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e36:	f000 f91f 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <MX_TIM3_Init+0x94>)
 8000e48:	f004 fc50 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e52:	f000 f911 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000027c 	.word	0x2000027c
 8000e64:	40000400 	.word	0x40000400

08000e68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <MX_TIM4_Init+0x94>)
 8000e86:	4a1e      	ldr	r2, [pc, #120]	@ (8000f00 <MX_TIM4_Init+0x98>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_TIM4_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <MX_TIM4_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 55535;
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <MX_TIM4_Init+0x94>)
 8000e98:	f64d 02ef 	movw	r2, #55535	@ 0xd8ef
 8000e9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <MX_TIM4_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <MX_TIM4_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eaa:	4814      	ldr	r0, [pc, #80]	@ (8000efc <MX_TIM4_Init+0x94>)
 8000eac:	f004 f89c 	bl	8004fe8 <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000eb6:	f000 f8df 	bl	8001078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480d      	ldr	r0, [pc, #52]	@ (8000efc <MX_TIM4_Init+0x94>)
 8000ec8:	f004 fa20 	bl	800530c <HAL_TIM_ConfigClockSource>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 f8d1 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	@ (8000efc <MX_TIM4_Init+0x94>)
 8000ee4:	f004 fc02 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000eee:	f000 f8c3 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200002c4 	.word	0x200002c4
 8000f00:	40000800 	.word	0x40000800

08000f04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <MX_USART1_UART_Init+0x50>)
 8000f0a:	4a13      	ldr	r2, [pc, #76]	@ (8000f58 <MX_USART1_UART_Init+0x54>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <MX_USART1_UART_Init+0x50>)
 8000f10:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <MX_USART1_UART_Init+0x58>)
 8000f12:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <MX_USART1_UART_Init+0x50>)
 8000f16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <MX_USART1_UART_Init+0x50>)
 8000f1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f22:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <MX_USART1_UART_Init+0x50>)
 8000f26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <MX_USART1_UART_Init+0x50>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <MX_USART1_UART_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <MX_USART1_UART_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <MX_USART1_UART_Init+0x50>)
 8000f40:	f004 fc44 	bl	80057cc <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000f4a:	f000 f895 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000030c 	.word	0x2000030c
 8000f58:	40013800 	.word	0x40013800
 8000f5c:	000186a0 	.word	0x000186a0

08000f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <MX_DMA_Init+0x48>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa8 <MX_DMA_Init+0x48>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6153      	str	r3, [r2, #20]
 8000f72:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <MX_DMA_Init+0x48>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	200e      	movs	r0, #14
 8000f84:	f001 f8af 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f88:	200e      	movs	r0, #14
 8000f8a:	f001 f8c8 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	200f      	movs	r0, #15
 8000f94:	f001 f8a7 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f98:	200f      	movs	r0, #15
 8000f9a:	f001 f8c0 	bl	800211e <HAL_NVIC_EnableIRQ>

}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <MX_GPIO_Init+0xc0>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a29      	ldr	r2, [pc, #164]	@ (800106c <MX_GPIO_Init+0xc0>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b27      	ldr	r3, [pc, #156]	@ (800106c <MX_GPIO_Init+0xc0>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd8:	4b24      	ldr	r3, [pc, #144]	@ (800106c <MX_GPIO_Init+0xc0>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a23      	ldr	r2, [pc, #140]	@ (800106c <MX_GPIO_Init+0xc0>)
 8000fde:	f043 0320 	orr.w	r3, r3, #32
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b21      	ldr	r3, [pc, #132]	@ (800106c <MX_GPIO_Init+0xc0>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0320 	and.w	r3, r3, #32
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <MX_GPIO_Init+0xc0>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800106c <MX_GPIO_Init+0xc0>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <MX_GPIO_Init+0xc0>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b18      	ldr	r3, [pc, #96]	@ (800106c <MX_GPIO_Init+0xc0>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a17      	ldr	r2, [pc, #92]	@ (800106c <MX_GPIO_Init+0xc0>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b15      	ldr	r3, [pc, #84]	@ (800106c <MX_GPIO_Init+0xc0>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001026:	4812      	ldr	r0, [pc, #72]	@ (8001070 <MX_GPIO_Init+0xc4>)
 8001028:	f001 fcd1 	bl	80029ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800102c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2302      	movs	r3, #2
 800103c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	4619      	mov	r1, r3
 8001044:	480a      	ldr	r0, [pc, #40]	@ (8001070 <MX_GPIO_Init+0xc4>)
 8001046:	f001 fb27 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800104a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800104e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001054:	2301      	movs	r3, #1
 8001056:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_GPIO_Init+0xc8>)
 8001060:	f001 fb1a 	bl	8002698 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	40011000 	.word	0x40011000
 8001074:	40010c00 	.word	0x40010c00

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <Error_Handler+0x8>

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <HAL_MspInit+0x5c>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <HAL_MspInit+0x5c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_MspInit+0x5c>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <HAL_MspInit+0x5c>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a0e      	ldr	r2, [pc, #56]	@ (80010e0 <HAL_MspInit+0x5c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <HAL_MspInit+0x5c>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_MspInit+0x60>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <HAL_MspInit+0x60>)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000

080010e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a18      	ldr	r2, [pc, #96]	@ (8001164 <HAL_ADC_MspInit+0x7c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d129      	bne.n	800115c <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001108:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <HAL_ADC_MspInit+0x80>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a16      	ldr	r2, [pc, #88]	@ (8001168 <HAL_ADC_MspInit+0x80>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <HAL_ADC_MspInit+0x80>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <HAL_ADC_MspInit+0x80>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <HAL_ADC_MspInit+0x80>)
 8001126:	f043 0308 	orr.w	r3, r3, #8
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_ADC_MspInit+0x80>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001138:	2301      	movs	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113c:	2303      	movs	r3, #3
 800113e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	4809      	ldr	r0, [pc, #36]	@ (800116c <HAL_ADC_MspInit+0x84>)
 8001148:	f001 faa6 	bl	8002698 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2012      	movs	r0, #18
 8001152:	f000 ffc8 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001156:	2012      	movs	r0, #18
 8001158:	f000 ffe1 	bl	800211e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40012400 	.word	0x40012400
 8001168:	40021000 	.word	0x40021000
 800116c:	40010c00 	.word	0x40010c00

08001170 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a34      	ldr	r2, [pc, #208]	@ (8001250 <HAL_TIM_Base_MspInit+0xe0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d114      	bne.n	80011ac <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001182:	4b34      	ldr	r3, [pc, #208]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	4a33      	ldr	r2, [pc, #204]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 8001188:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b31      	ldr	r3, [pc, #196]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2019      	movs	r0, #25
 80011a0:	f000 ffa1 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011a4:	2019      	movs	r0, #25
 80011a6:	f000 ffba 	bl	800211e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011aa:	e04c      	b.n	8001246 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b4:	d114      	bne.n	80011e0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011b6:	4b27      	ldr	r3, [pc, #156]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a26      	ldr	r2, [pc, #152]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b24      	ldr	r3, [pc, #144]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	201c      	movs	r0, #28
 80011d4:	f000 ff87 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011d8:	201c      	movs	r0, #28
 80011da:	f000 ffa0 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 80011de:	e032      	b.n	8001246 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <HAL_TIM_Base_MspInit+0xe8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d114      	bne.n	8001214 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a19      	ldr	r2, [pc, #100]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	201d      	movs	r0, #29
 8001208:	f000 ff6d 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800120c:	201d      	movs	r0, #29
 800120e:	f000 ff86 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 8001212:	e018      	b.n	8001246 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_TIM_Base_MspInit+0xec>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d113      	bne.n	8001246 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a0c      	ldr	r2, [pc, #48]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_TIM_Base_MspInit+0xe4>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	201e      	movs	r0, #30
 800123c:	f000 ff53 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001240:	201e      	movs	r0, #30
 8001242:	f000 ff6c 	bl	800211e <HAL_NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40012c00 	.word	0x40012c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40000400 	.word	0x40000400
 800125c:	40000800 	.word	0x40000800

08001260 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a47      	ldr	r2, [pc, #284]	@ (8001398 <HAL_UART_MspInit+0x138>)
 800127c:	4293      	cmp	r3, r2
 800127e:	f040 8086 	bne.w	800138e <HAL_UART_MspInit+0x12e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001282:	4b46      	ldr	r3, [pc, #280]	@ (800139c <HAL_UART_MspInit+0x13c>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a45      	ldr	r2, [pc, #276]	@ (800139c <HAL_UART_MspInit+0x13c>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128c:	6193      	str	r3, [r2, #24]
 800128e:	4b43      	ldr	r3, [pc, #268]	@ (800139c <HAL_UART_MspInit+0x13c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b40      	ldr	r3, [pc, #256]	@ (800139c <HAL_UART_MspInit+0x13c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a3f      	ldr	r2, [pc, #252]	@ (800139c <HAL_UART_MspInit+0x13c>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <HAL_UART_MspInit+0x13c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	4836      	ldr	r0, [pc, #216]	@ (80013a0 <HAL_UART_MspInit+0x140>)
 80012c8:	f001 f9e6 	bl	8002698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	482f      	ldr	r0, [pc, #188]	@ (80013a0 <HAL_UART_MspInit+0x140>)
 80012e2:	f001 f9d9 	bl	8002698 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80012e6:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <HAL_UART_MspInit+0x144>)
 80012e8:	4a2f      	ldr	r2, [pc, #188]	@ (80013a8 <HAL_UART_MspInit+0x148>)
 80012ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ec:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <HAL_UART_MspInit+0x144>)
 80012ee:	2210      	movs	r2, #16
 80012f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f2:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <HAL_UART_MspInit+0x144>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f8:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <HAL_UART_MspInit+0x144>)
 80012fa:	2280      	movs	r2, #128	@ 0x80
 80012fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fe:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <HAL_UART_MspInit+0x144>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001304:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <HAL_UART_MspInit+0x144>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800130a:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <HAL_UART_MspInit+0x144>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <HAL_UART_MspInit+0x144>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001316:	4823      	ldr	r0, [pc, #140]	@ (80013a4 <HAL_UART_MspInit+0x144>)
 8001318:	f000 ff1c 	bl	8002154 <HAL_DMA_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001322:	f7ff fea9 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <HAL_UART_MspInit+0x144>)
 800132a:	639a      	str	r2, [r3, #56]	@ 0x38
 800132c:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <HAL_UART_MspInit+0x144>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <HAL_UART_MspInit+0x14c>)
 8001334:	4a1e      	ldr	r2, [pc, #120]	@ (80013b0 <HAL_UART_MspInit+0x150>)
 8001336:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001338:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <HAL_UART_MspInit+0x14c>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800133e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <HAL_UART_MspInit+0x14c>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_UART_MspInit+0x14c>)
 8001346:	2280      	movs	r2, #128	@ 0x80
 8001348:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_UART_MspInit+0x14c>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001350:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <HAL_UART_MspInit+0x14c>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_UART_MspInit+0x14c>)
 8001358:	2220      	movs	r2, #32
 800135a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <HAL_UART_MspInit+0x14c>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001362:	4812      	ldr	r0, [pc, #72]	@ (80013ac <HAL_UART_MspInit+0x14c>)
 8001364:	f000 fef6 	bl	8002154 <HAL_DMA_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800136e:	f7ff fe83 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a0d      	ldr	r2, [pc, #52]	@ (80013ac <HAL_UART_MspInit+0x14c>)
 8001376:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001378:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <HAL_UART_MspInit+0x14c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2025      	movs	r0, #37	@ 0x25
 8001384:	f000 feaf 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001388:	2025      	movs	r0, #37	@ 0x25
 800138a:	f000 fec8 	bl	800211e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40013800 	.word	0x40013800
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010800 	.word	0x40010800
 80013a4:	20000354 	.word	0x20000354
 80013a8:	40020044 	.word	0x40020044
 80013ac:	20000398 	.word	0x20000398
 80013b0:	40020058 	.word	0x40020058

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <NMI_Handler+0x4>

080013bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <MemManage_Handler+0x4>

080013cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <UsageFault_Handler+0x4>

080013dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 f8ce 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <DMA1_Channel4_IRQHandler+0x10>)
 8001412:	f001 f80d 	bl	8002430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000354 	.word	0x20000354

08001420 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <DMA1_Channel5_IRQHandler+0x10>)
 8001426:	f001 f803 	bl	8002430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000398 	.word	0x20000398

08001434 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <ADC1_2_IRQHandler+0x10>)
 800143a:	f000 fa69 	bl	8001910 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001bc 	.word	0x200001bc

08001448 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800144e:	f001 fc0b 	bl	8002c68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200010dc 	.word	0x200010dc

0800145c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <TIM1_UP_IRQHandler+0x10>)
 8001462:	f003 fe63 	bl	800512c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200001ec 	.word	0x200001ec

08001470 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <TIM2_IRQHandler+0x10>)
 8001476:	f003 fe59 	bl	800512c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000234 	.word	0x20000234

08001484 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <TIM3_IRQHandler+0x10>)
 800148a:	f003 fe4f 	bl	800512c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000027c 	.word	0x2000027c

08001498 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <TIM4_IRQHandler+0x10>)
 800149e:	f003 fe45 	bl	800512c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200002c4 	.word	0x200002c4

080014ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <USART1_IRQHandler+0x10>)
 80014b2:	f004 fa4b 	bl	800594c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000030c 	.word	0x2000030c

080014c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff fff8 	bl	80014c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480b      	ldr	r0, [pc, #44]	@ (8001500 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014d2:	490c      	ldr	r1, [pc, #48]	@ (8001504 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001508 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014e8:	4c09      	ldr	r4, [pc, #36]	@ (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f009 fb8b 	bl	800ac10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fa:	f7ff facf 	bl	8000a9c <main>
  bx lr
 80014fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8001508:	0800ad00 	.word	0x0800ad00
  ldr r2, =_sbss
 800150c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001510:	200015d4 	.word	0x200015d4

08001514 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <CAN1_RX1_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <HAL_Init+0x28>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a07      	ldr	r2, [pc, #28]	@ (8001540 <HAL_Init+0x28>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 fdd1 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152e:	200f      	movs	r0, #15
 8001530:	f000 f808 	bl	8001544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001534:	f7ff fda6 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40022000 	.word	0x40022000

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_InitTick+0x54>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_InitTick+0x58>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800155a:	fbb3 f3f1 	udiv	r3, r3, r1
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fde9 	bl	800213a <HAL_SYSTICK_Config>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e00e      	b.n	8001590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d80a      	bhi.n	800158e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f000 fdb1 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001584:	4a06      	ldr	r2, [pc, #24]	@ (80015a0 <HAL_InitTick+0x5c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000024 	.word	0x20000024
 800159c:	2000002c 	.word	0x2000002c
 80015a0:	20000028 	.word	0x20000028

080015a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_IncTick+0x1c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <HAL_IncTick+0x20>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a03      	ldr	r2, [pc, #12]	@ (80015c4 <HAL_IncTick+0x20>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	2000002c 	.word	0x2000002c
 80015c4:	20000410 	.word	0x20000410

080015c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b02      	ldr	r3, [pc, #8]	@ (80015d8 <HAL_GetTick+0x10>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20000410 	.word	0x20000410

080015dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0be      	b.n	800177c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fd64 	bl	80010e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fb8f 	bl	8001d44 <ADC_ConversionStop_Disable>
 8001626:	4603      	mov	r3, r0
 8001628:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 8099 	bne.w	800176a <HAL_ADC_Init+0x18e>
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 8095 	bne.w	800176a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001644:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001648:	f023 0302 	bic.w	r3, r3, #2
 800164c:	f043 0202 	orr.w	r2, r3, #2
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800165c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7b1b      	ldrb	r3, [r3, #12]
 8001662:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001664:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	4313      	orrs	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001674:	d003      	beq.n	800167e <HAL_ADC_Init+0xa2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <HAL_ADC_Init+0xa8>
 800167e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001682:	e000      	b.n	8001686 <HAL_ADC_Init+0xaa>
 8001684:	2300      	movs	r3, #0
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7d1b      	ldrb	r3, [r3, #20]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d119      	bne.n	80016c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7b1b      	ldrb	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	035a      	lsls	r2, r3, #13
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	e00b      	b.n	80016c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b4:	f043 0220 	orr.w	r2, r3, #32
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <HAL_ADC_Init+0x1a8>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016f8:	d003      	beq.n	8001702 <HAL_ADC_Init+0x126>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d104      	bne.n	800170c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	3b01      	subs	r3, #1
 8001708:	051b      	lsls	r3, r3, #20
 800170a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001712:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	430a      	orrs	r2, r1
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <HAL_ADC_Init+0x1ac>)
 8001728:	4013      	ands	r3, r2
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	429a      	cmp	r2, r3
 800172e:	d10b      	bne.n	8001748 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	f043 0201 	orr.w	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001746:	e018      	b.n	800177a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	f023 0312 	bic.w	r3, r3, #18
 8001750:	f043 0210 	orr.w	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001768:	e007      	b.n	800177a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176e:	f043 0210 	orr.w	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	ffe1f7fd 	.word	0xffe1f7fd
 8001788:	ff1f0efe 	.word	0xff1f0efe

0800178c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Start_IT+0x1a>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e0a0      	b.n	80018e8 <HAL_ADC_Start_IT+0x15c>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fa6e 	bl	8001c90 <ADC_Enable>
 80017b4:	4603      	mov	r3, r0
 80017b6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 808f 	bne.w	80018de <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a45      	ldr	r2, [pc, #276]	@ (80018f0 <HAL_ADC_Start_IT+0x164>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d105      	bne.n	80017ea <HAL_ADC_Start_IT+0x5e>
 80017de:	4b45      	ldr	r3, [pc, #276]	@ (80018f4 <HAL_ADC_Start_IT+0x168>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d115      	bne.n	8001816 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d026      	beq.n	8001852 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001808:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800180c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001814:	e01d      	b.n	8001852 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a33      	ldr	r2, [pc, #204]	@ (80018f4 <HAL_ADC_Start_IT+0x168>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d004      	beq.n	8001836 <HAL_ADC_Start_IT+0xaa>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a2f      	ldr	r2, [pc, #188]	@ (80018f0 <HAL_ADC_Start_IT+0x164>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10d      	bne.n	8001852 <HAL_ADC_Start_IT+0xc6>
 8001836:	4b2f      	ldr	r3, [pc, #188]	@ (80018f4 <HAL_ADC_Start_IT+0x168>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001846:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800184a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	f023 0206 	bic.w	r2, r3, #6
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	62da      	str	r2, [r3, #44]	@ 0x2c
 800186a:	e002      	b.n	8001872 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f06f 0202 	mvn.w	r2, #2
 8001882:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0220 	orr.w	r2, r2, #32
 8001892:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800189e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80018a2:	d113      	bne.n	80018cc <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018a8:	4a11      	ldr	r2, [pc, #68]	@ (80018f0 <HAL_ADC_Start_IT+0x164>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d105      	bne.n	80018ba <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018ae:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <HAL_ADC_Start_IT+0x168>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d108      	bne.n	80018cc <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	e00c      	b.n	80018e6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	e003      	b.n	80018e6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40012800 	.word	0x40012800
 80018f4:	40012400 	.word	0x40012400

080018f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	2b00      	cmp	r3, #0
 8001930:	d03e      	beq.n	80019b0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d039      	beq.n	80019b0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800195e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001962:	d11d      	bne.n	80019a0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001968:	2b00      	cmp	r3, #0
 800196a:	d119      	bne.n	80019a0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0220 	bic.w	r2, r2, #32
 800197a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff f845 	bl	8000a30 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f06f 0212 	mvn.w	r2, #18
 80019ae:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d04d      	beq.n	8001a56 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d048      	beq.n	8001a56 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80019e6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80019ea:	d012      	beq.n	8001a12 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d125      	bne.n	8001a46 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a04:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a08:	d11d      	bne.n	8001a46 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d119      	bne.n	8001a46 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a20:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fa6c 	bl	8001f24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 020c 	mvn.w	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d012      	beq.n	8001a86 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00d      	beq.n	8001a86 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f809 	bl	8001a8e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f06f 0201 	mvn.w	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x20>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e0dc      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x1da>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b06      	cmp	r3, #6
 8001ace:	d81c      	bhi.n	8001b0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b05      	subs	r3, #5
 8001ae2:	221f      	movs	r2, #31
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4019      	ands	r1, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3b05      	subs	r3, #5
 8001afc:	fa00 f203 	lsl.w	r2, r0, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b08:	e03c      	b.n	8001b84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d81c      	bhi.n	8001b4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	3b23      	subs	r3, #35	@ 0x23
 8001b24:	221f      	movs	r2, #31
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	4019      	ands	r1, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b23      	subs	r3, #35	@ 0x23
 8001b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b4a:	e01b      	b.n	8001b84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b41      	subs	r3, #65	@ 0x41
 8001b5e:	221f      	movs	r2, #31
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4019      	ands	r1, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b41      	subs	r3, #65	@ 0x41
 8001b78:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	d91c      	bls.n	8001bc6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68d9      	ldr	r1, [r3, #12]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b1e      	subs	r3, #30
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6898      	ldr	r0, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b1e      	subs	r3, #30
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	e019      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6919      	ldr	r1, [r3, #16]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4019      	ands	r1, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6898      	ldr	r0, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d003      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c06:	2b11      	cmp	r3, #17
 8001c08:	d132      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001c84 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d125      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d126      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c30:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d11a      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a13      	ldr	r2, [pc, #76]	@ (8001c8c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	0c9a      	lsrs	r2, r3, #18
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c50:	e002      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f9      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x1b2>
 8001c5e:	e007      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40012400 	.word	0x40012400
 8001c88:	20000024 	.word	0x20000024
 8001c8c:	431bde83 	.word	0x431bde83

08001c90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d040      	beq.n	8001d30 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <ADC_Enable+0xac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d40 <ADC_Enable+0xb0>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	0c9b      	lsrs	r3, r3, #18
 8001cca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ccc:	e002      	b.n	8001cd4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f9      	bne.n	8001cce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cda:	f7ff fc75 	bl	80015c8 <HAL_GetTick>
 8001cde:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ce0:	e01f      	b.n	8001d22 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ce2:	f7ff fc71 	bl	80015c8 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d918      	bls.n	8001d22 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d011      	beq.n	8001d22 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d02:	f043 0210 	orr.w	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e007      	b.n	8001d32 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d1d8      	bne.n	8001ce2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000024 	.word	0x20000024
 8001d40:	431bde83 	.word	0x431bde83

08001d44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d12e      	bne.n	8001dbc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d6e:	f7ff fc2b 	bl	80015c8 <HAL_GetTick>
 8001d72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d74:	e01b      	b.n	8001dae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d76:	f7ff fc27 	bl	80015c8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d914      	bls.n	8001dae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d10d      	bne.n	8001dae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	f043 0210 	orr.w	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e007      	b.n	8001dbe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d0dc      	beq.n	8001d76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_ADCEx_Calibration_Start+0x1e>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e097      	b.n	8001f16 <HAL_ADCEx_Calibration_Start+0x14e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffa8 	bl	8001d44 <ADC_ConversionStop_Disable>
 8001df4:	4603      	mov	r3, r0
 8001df6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff49 	bl	8001c90 <ADC_Enable>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 8081 	bne.w	8001f0c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e12:	f023 0302 	bic.w	r3, r3, #2
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e1e:	4b40      	ldr	r3, [pc, #256]	@ (8001f20 <HAL_ADCEx_Calibration_Start+0x158>)
 8001e20:	681c      	ldr	r4, [r3, #0]
 8001e22:	2002      	movs	r0, #2
 8001e24:	f003 f82a 	bl	8004e7c <HAL_RCCEx_GetPeriphCLKFreq>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001e2e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001e30:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001e32:	e002      	b.n	8001e3a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f9      	bne.n	8001e34 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0208 	orr.w	r2, r2, #8
 8001e4e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001e50:	f7ff fbba 	bl	80015c8 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e56:	e01b      	b.n	8001e90 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e58:	f7ff fbb6 	bl	80015c8 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b0a      	cmp	r3, #10
 8001e64:	d914      	bls.n	8001e90 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00d      	beq.n	8001e90 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e78:	f023 0312 	bic.w	r3, r3, #18
 8001e7c:	f043 0210 	orr.w	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e042      	b.n	8001f16 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1dc      	bne.n	8001e58 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0204 	orr.w	r2, r2, #4
 8001eac:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001eae:	f7ff fb8b 	bl	80015c8 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001eb4:	e01b      	b.n	8001eee <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001eb6:	f7ff fb87 	bl	80015c8 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b0a      	cmp	r3, #10
 8001ec2:	d914      	bls.n	8001eee <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed6:	f023 0312 	bic.w	r3, r3, #18
 8001eda:	f043 0210 	orr.w	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e013      	b.n	8001f16 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1dc      	bne.n	8001eb6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f00:	f023 0303 	bic.w	r3, r3, #3
 8001f04:	f043 0201 	orr.w	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd90      	pop	{r4, r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000024 	.word	0x20000024

08001f24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
	...

08001f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db0b      	blt.n	8001fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4906      	ldr	r1, [pc, #24]	@ (8001fd0 <__NVIC_EnableIRQ+0x34>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	@ (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	@ (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	@ 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff90 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff2d 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff42 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff90 	bl	8002028 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5f 	bl	8001fd4 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff35 	bl	8001f9c <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e043      	b.n	80021f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <HAL_DMA_Init+0xa8>)
 8002172:	4413      	add	r3, r2
 8002174:	4a22      	ldr	r2, [pc, #136]	@ (8002200 <HAL_DMA_Init+0xac>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	009a      	lsls	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1f      	ldr	r2, [pc, #124]	@ (8002204 <HAL_DMA_Init+0xb0>)
 8002186:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800219e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80021a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	bffdfff8 	.word	0xbffdfff8
 8002200:	cccccccd 	.word	0xcccccccd
 8002204:	40020000 	.word	0x40020000

08002208 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_DMA_Start_IT+0x20>
 8002224:	2302      	movs	r3, #2
 8002226:	e04b      	b.n	80022c0 <HAL_DMA_Start_IT+0xb8>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d13a      	bne.n	80022b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f9eb 	bl	800263c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d008      	beq.n	8002280 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 020e 	orr.w	r2, r2, #14
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e00f      	b.n	80022a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0204 	bic.w	r2, r2, #4
 800228e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 020a 	orr.w	r2, r2, #10
 800229e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	e005      	b.n	80022be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022ba:	2302      	movs	r3, #2
 80022bc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80022be:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d008      	beq.n	80022f2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2204      	movs	r2, #4
 80022e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e020      	b.n	8002334 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 020e 	bic.w	r2, r2, #14
 8002300:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0201 	bic.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f202 	lsl.w	r2, r1, r2
 8002320:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002332:	7bfb      	ldrb	r3, [r7, #15]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
	...

08002340 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d005      	beq.n	8002364 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2204      	movs	r2, #4
 800235c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	e051      	b.n	8002408 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 020e 	bic.w	r2, r2, #14
 8002372:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a22      	ldr	r2, [pc, #136]	@ (8002414 <HAL_DMA_Abort_IT+0xd4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d029      	beq.n	80023e2 <HAL_DMA_Abort_IT+0xa2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a21      	ldr	r2, [pc, #132]	@ (8002418 <HAL_DMA_Abort_IT+0xd8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d022      	beq.n	80023de <HAL_DMA_Abort_IT+0x9e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1f      	ldr	r2, [pc, #124]	@ (800241c <HAL_DMA_Abort_IT+0xdc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01a      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x98>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002420 <HAL_DMA_Abort_IT+0xe0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d012      	beq.n	80023d2 <HAL_DMA_Abort_IT+0x92>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002424 <HAL_DMA_Abort_IT+0xe4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00a      	beq.n	80023cc <HAL_DMA_Abort_IT+0x8c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002428 <HAL_DMA_Abort_IT+0xe8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d102      	bne.n	80023c6 <HAL_DMA_Abort_IT+0x86>
 80023c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80023c4:	e00e      	b.n	80023e4 <HAL_DMA_Abort_IT+0xa4>
 80023c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023ca:	e00b      	b.n	80023e4 <HAL_DMA_Abort_IT+0xa4>
 80023cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023d0:	e008      	b.n	80023e4 <HAL_DMA_Abort_IT+0xa4>
 80023d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023d6:	e005      	b.n	80023e4 <HAL_DMA_Abort_IT+0xa4>
 80023d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023dc:	e002      	b.n	80023e4 <HAL_DMA_Abort_IT+0xa4>
 80023de:	2310      	movs	r3, #16
 80023e0:	e000      	b.n	80023e4 <HAL_DMA_Abort_IT+0xa4>
 80023e2:	2301      	movs	r3, #1
 80023e4:	4a11      	ldr	r2, [pc, #68]	@ (800242c <HAL_DMA_Abort_IT+0xec>)
 80023e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4798      	blx	r3
    } 
  }
  return status;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40020008 	.word	0x40020008
 8002418:	4002001c 	.word	0x4002001c
 800241c:	40020030 	.word	0x40020030
 8002420:	40020044 	.word	0x40020044
 8002424:	40020058 	.word	0x40020058
 8002428:	4002006c 	.word	0x4002006c
 800242c:	40020000 	.word	0x40020000

08002430 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	2204      	movs	r2, #4
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d04f      	beq.n	80024f8 <HAL_DMA_IRQHandler+0xc8>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d04a      	beq.n	80024f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0204 	bic.w	r2, r2, #4
 800247e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a66      	ldr	r2, [pc, #408]	@ (8002620 <HAL_DMA_IRQHandler+0x1f0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d029      	beq.n	80024de <HAL_DMA_IRQHandler+0xae>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a65      	ldr	r2, [pc, #404]	@ (8002624 <HAL_DMA_IRQHandler+0x1f4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d022      	beq.n	80024da <HAL_DMA_IRQHandler+0xaa>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a63      	ldr	r2, [pc, #396]	@ (8002628 <HAL_DMA_IRQHandler+0x1f8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01a      	beq.n	80024d4 <HAL_DMA_IRQHandler+0xa4>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a62      	ldr	r2, [pc, #392]	@ (800262c <HAL_DMA_IRQHandler+0x1fc>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d012      	beq.n	80024ce <HAL_DMA_IRQHandler+0x9e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a60      	ldr	r2, [pc, #384]	@ (8002630 <HAL_DMA_IRQHandler+0x200>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00a      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x98>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002634 <HAL_DMA_IRQHandler+0x204>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d102      	bne.n	80024c2 <HAL_DMA_IRQHandler+0x92>
 80024bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024c0:	e00e      	b.n	80024e0 <HAL_DMA_IRQHandler+0xb0>
 80024c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80024c6:	e00b      	b.n	80024e0 <HAL_DMA_IRQHandler+0xb0>
 80024c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80024cc:	e008      	b.n	80024e0 <HAL_DMA_IRQHandler+0xb0>
 80024ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024d2:	e005      	b.n	80024e0 <HAL_DMA_IRQHandler+0xb0>
 80024d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024d8:	e002      	b.n	80024e0 <HAL_DMA_IRQHandler+0xb0>
 80024da:	2340      	movs	r3, #64	@ 0x40
 80024dc:	e000      	b.n	80024e0 <HAL_DMA_IRQHandler+0xb0>
 80024de:	2304      	movs	r3, #4
 80024e0:	4a55      	ldr	r2, [pc, #340]	@ (8002638 <HAL_DMA_IRQHandler+0x208>)
 80024e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8094 	beq.w	8002616 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80024f6:	e08e      	b.n	8002616 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	2202      	movs	r2, #2
 80024fe:	409a      	lsls	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d056      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x186>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d051      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10b      	bne.n	8002538 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 020a 	bic.w	r2, r2, #10
 800252e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a38      	ldr	r2, [pc, #224]	@ (8002620 <HAL_DMA_IRQHandler+0x1f0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d029      	beq.n	8002596 <HAL_DMA_IRQHandler+0x166>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a37      	ldr	r2, [pc, #220]	@ (8002624 <HAL_DMA_IRQHandler+0x1f4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d022      	beq.n	8002592 <HAL_DMA_IRQHandler+0x162>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a35      	ldr	r2, [pc, #212]	@ (8002628 <HAL_DMA_IRQHandler+0x1f8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01a      	beq.n	800258c <HAL_DMA_IRQHandler+0x15c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a34      	ldr	r2, [pc, #208]	@ (800262c <HAL_DMA_IRQHandler+0x1fc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d012      	beq.n	8002586 <HAL_DMA_IRQHandler+0x156>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a32      	ldr	r2, [pc, #200]	@ (8002630 <HAL_DMA_IRQHandler+0x200>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00a      	beq.n	8002580 <HAL_DMA_IRQHandler+0x150>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a31      	ldr	r2, [pc, #196]	@ (8002634 <HAL_DMA_IRQHandler+0x204>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d102      	bne.n	800257a <HAL_DMA_IRQHandler+0x14a>
 8002574:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002578:	e00e      	b.n	8002598 <HAL_DMA_IRQHandler+0x168>
 800257a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800257e:	e00b      	b.n	8002598 <HAL_DMA_IRQHandler+0x168>
 8002580:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002584:	e008      	b.n	8002598 <HAL_DMA_IRQHandler+0x168>
 8002586:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800258a:	e005      	b.n	8002598 <HAL_DMA_IRQHandler+0x168>
 800258c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002590:	e002      	b.n	8002598 <HAL_DMA_IRQHandler+0x168>
 8002592:	2320      	movs	r3, #32
 8002594:	e000      	b.n	8002598 <HAL_DMA_IRQHandler+0x168>
 8002596:	2302      	movs	r3, #2
 8002598:	4a27      	ldr	r2, [pc, #156]	@ (8002638 <HAL_DMA_IRQHandler+0x208>)
 800259a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d034      	beq.n	8002616 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025b4:	e02f      	b.n	8002616 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	2208      	movs	r2, #8
 80025bc:	409a      	lsls	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d028      	beq.n	8002618 <HAL_DMA_IRQHandler+0x1e8>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d023      	beq.n	8002618 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 020e 	bic.w	r2, r2, #14
 80025de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	4798      	blx	r3
    }
  }
  return;
 8002616:	bf00      	nop
 8002618:	bf00      	nop
}
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40020008 	.word	0x40020008
 8002624:	4002001c 	.word	0x4002001c
 8002628:	40020030 	.word	0x40020030
 800262c:	40020044 	.word	0x40020044
 8002630:	40020058 	.word	0x40020058
 8002634:	4002006c 	.word	0x4002006c
 8002638:	40020000 	.word	0x40020000

0800263c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002652:	2101      	movs	r1, #1
 8002654:	fa01 f202 	lsl.w	r2, r1, r2
 8002658:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b10      	cmp	r3, #16
 8002668:	d108      	bne.n	800267c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800267a:	e007      	b.n	800268c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
	...

08002698 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002698:	b480      	push	{r7}
 800269a:	b08b      	sub	sp, #44	@ 0x2c
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026aa:	e169      	b.n	8002980 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026ac:	2201      	movs	r2, #1
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f040 8158 	bne.w	800297a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002938 <HAL_GPIO_Init+0x2a0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d05e      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
 80026d4:	4a98      	ldr	r2, [pc, #608]	@ (8002938 <HAL_GPIO_Init+0x2a0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d875      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 80026da:	4a98      	ldr	r2, [pc, #608]	@ (800293c <HAL_GPIO_Init+0x2a4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d058      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
 80026e0:	4a96      	ldr	r2, [pc, #600]	@ (800293c <HAL_GPIO_Init+0x2a4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d86f      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 80026e6:	4a96      	ldr	r2, [pc, #600]	@ (8002940 <HAL_GPIO_Init+0x2a8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d052      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
 80026ec:	4a94      	ldr	r2, [pc, #592]	@ (8002940 <HAL_GPIO_Init+0x2a8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d869      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 80026f2:	4a94      	ldr	r2, [pc, #592]	@ (8002944 <HAL_GPIO_Init+0x2ac>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d04c      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
 80026f8:	4a92      	ldr	r2, [pc, #584]	@ (8002944 <HAL_GPIO_Init+0x2ac>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d863      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 80026fe:	4a92      	ldr	r2, [pc, #584]	@ (8002948 <HAL_GPIO_Init+0x2b0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d046      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
 8002704:	4a90      	ldr	r2, [pc, #576]	@ (8002948 <HAL_GPIO_Init+0x2b0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d85d      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 800270a:	2b12      	cmp	r3, #18
 800270c:	d82a      	bhi.n	8002764 <HAL_GPIO_Init+0xcc>
 800270e:	2b12      	cmp	r3, #18
 8002710:	d859      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 8002712:	a201      	add	r2, pc, #4	@ (adr r2, 8002718 <HAL_GPIO_Init+0x80>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	08002793 	.word	0x08002793
 800271c:	0800276d 	.word	0x0800276d
 8002720:	0800277f 	.word	0x0800277f
 8002724:	080027c1 	.word	0x080027c1
 8002728:	080027c7 	.word	0x080027c7
 800272c:	080027c7 	.word	0x080027c7
 8002730:	080027c7 	.word	0x080027c7
 8002734:	080027c7 	.word	0x080027c7
 8002738:	080027c7 	.word	0x080027c7
 800273c:	080027c7 	.word	0x080027c7
 8002740:	080027c7 	.word	0x080027c7
 8002744:	080027c7 	.word	0x080027c7
 8002748:	080027c7 	.word	0x080027c7
 800274c:	080027c7 	.word	0x080027c7
 8002750:	080027c7 	.word	0x080027c7
 8002754:	080027c7 	.word	0x080027c7
 8002758:	080027c7 	.word	0x080027c7
 800275c:	08002775 	.word	0x08002775
 8002760:	08002789 	.word	0x08002789
 8002764:	4a79      	ldr	r2, [pc, #484]	@ (800294c <HAL_GPIO_Init+0x2b4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800276a:	e02c      	b.n	80027c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	623b      	str	r3, [r7, #32]
          break;
 8002772:	e029      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	3304      	adds	r3, #4
 800277a:	623b      	str	r3, [r7, #32]
          break;
 800277c:	e024      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	3308      	adds	r3, #8
 8002784:	623b      	str	r3, [r7, #32]
          break;
 8002786:	e01f      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	330c      	adds	r3, #12
 800278e:	623b      	str	r3, [r7, #32]
          break;
 8002790:	e01a      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d102      	bne.n	80027a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800279a:	2304      	movs	r3, #4
 800279c:	623b      	str	r3, [r7, #32]
          break;
 800279e:	e013      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a8:	2308      	movs	r3, #8
 80027aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	611a      	str	r2, [r3, #16]
          break;
 80027b2:	e009      	b.n	80027c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b4:	2308      	movs	r3, #8
 80027b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	615a      	str	r2, [r3, #20]
          break;
 80027be:	e003      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
          break;
 80027c4:	e000      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          break;
 80027c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2bff      	cmp	r3, #255	@ 0xff
 80027cc:	d801      	bhi.n	80027d2 <HAL_GPIO_Init+0x13a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	e001      	b.n	80027d6 <HAL_GPIO_Init+0x13e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2bff      	cmp	r3, #255	@ 0xff
 80027dc:	d802      	bhi.n	80027e4 <HAL_GPIO_Init+0x14c>
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	e002      	b.n	80027ea <HAL_GPIO_Init+0x152>
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	3b08      	subs	r3, #8
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	210f      	movs	r1, #15
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	6a39      	ldr	r1, [r7, #32]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	431a      	orrs	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80b1 	beq.w	800297a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002818:	4b4d      	ldr	r3, [pc, #308]	@ (8002950 <HAL_GPIO_Init+0x2b8>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	4a4c      	ldr	r2, [pc, #304]	@ (8002950 <HAL_GPIO_Init+0x2b8>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6193      	str	r3, [r2, #24]
 8002824:	4b4a      	ldr	r3, [pc, #296]	@ (8002950 <HAL_GPIO_Init+0x2b8>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002830:	4a48      	ldr	r2, [pc, #288]	@ (8002954 <HAL_GPIO_Init+0x2bc>)
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a40      	ldr	r2, [pc, #256]	@ (8002958 <HAL_GPIO_Init+0x2c0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d013      	beq.n	8002884 <HAL_GPIO_Init+0x1ec>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3f      	ldr	r2, [pc, #252]	@ (800295c <HAL_GPIO_Init+0x2c4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00d      	beq.n	8002880 <HAL_GPIO_Init+0x1e8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3e      	ldr	r2, [pc, #248]	@ (8002960 <HAL_GPIO_Init+0x2c8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d007      	beq.n	800287c <HAL_GPIO_Init+0x1e4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a3d      	ldr	r2, [pc, #244]	@ (8002964 <HAL_GPIO_Init+0x2cc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d101      	bne.n	8002878 <HAL_GPIO_Init+0x1e0>
 8002874:	2303      	movs	r3, #3
 8002876:	e006      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 8002878:	2304      	movs	r3, #4
 800287a:	e004      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 800287c:	2302      	movs	r3, #2
 800287e:	e002      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 8002884:	2300      	movs	r3, #0
 8002886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002888:	f002 0203 	and.w	r2, r2, #3
 800288c:	0092      	lsls	r2, r2, #2
 800288e:	4093      	lsls	r3, r2
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002896:	492f      	ldr	r1, [pc, #188]	@ (8002954 <HAL_GPIO_Init+0x2bc>)
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	492c      	ldr	r1, [pc, #176]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028be:	4b2a      	ldr	r3, [pc, #168]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	4928      	ldr	r1, [pc, #160]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028d8:	4b23      	ldr	r3, [pc, #140]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	4922      	ldr	r1, [pc, #136]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60cb      	str	r3, [r1, #12]
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028e6:	4b20      	ldr	r3, [pc, #128]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	491e      	ldr	r1, [pc, #120]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4918      	ldr	r1, [pc, #96]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800290e:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	43db      	mvns	r3, r3
 8002916:	4914      	ldr	r1, [pc, #80]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 8002918:	4013      	ands	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d021      	beq.n	800296c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002928:	4b0f      	ldr	r3, [pc, #60]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	490e      	ldr	r1, [pc, #56]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	e021      	b.n	800297a <HAL_GPIO_Init+0x2e2>
 8002936:	bf00      	nop
 8002938:	10320000 	.word	0x10320000
 800293c:	10310000 	.word	0x10310000
 8002940:	10220000 	.word	0x10220000
 8002944:	10210000 	.word	0x10210000
 8002948:	10120000 	.word	0x10120000
 800294c:	10110000 	.word	0x10110000
 8002950:	40021000 	.word	0x40021000
 8002954:	40010000 	.word	0x40010000
 8002958:	40010800 	.word	0x40010800
 800295c:	40010c00 	.word	0x40010c00
 8002960:	40011000 	.word	0x40011000
 8002964:	40011400 	.word	0x40011400
 8002968:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_GPIO_Init+0x304>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	43db      	mvns	r3, r3
 8002974:	4909      	ldr	r1, [pc, #36]	@ (800299c <HAL_GPIO_Init+0x304>)
 8002976:	4013      	ands	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	3301      	adds	r3, #1
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	f47f ae8e 	bne.w	80026ac <HAL_GPIO_Init+0x14>
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	372c      	adds	r7, #44	@ 0x2c
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	40010400 	.word	0x40010400

080029a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	887b      	ldrh	r3, [r7, #2]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	e001      	b.n	80029c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	807b      	strh	r3, [r7, #2]
 80029da:	4613      	mov	r3, r2
 80029dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029de:	787b      	ldrb	r3, [r7, #1]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e4:	887a      	ldrh	r2, [r7, #2]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ea:	e003      	b.n	80029f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	041a      	lsls	r2, r3, #16
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	611a      	str	r2, [r3, #16]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a10:	887a      	ldrh	r2, [r7, #2]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4013      	ands	r3, r2
 8002a16:	041a      	lsls	r2, r3, #16
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	400b      	ands	r3, r1
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	611a      	str	r2, [r3, #16]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0e8      	b.n	8002c14 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f007 fe28 	bl	800a6ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2203      	movs	r2, #3
 8002a60:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fd3d 	bl	80064ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7e:	f003 fd13 	bl	80064a8 <USB_CoreInit>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0bf      	b.n	8002c14 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 fd41 	bl	8006522 <USB_SetCurrentMode>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0b0      	b.n	8002c14 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e03e      	b.n	8002b36 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3311      	adds	r3, #17
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	3310      	adds	r3, #16
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	3313      	adds	r3, #19
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	3320      	adds	r3, #32
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	3324      	adds	r3, #36	@ 0x24
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	3301      	adds	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	791b      	ldrb	r3, [r3, #4]
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d3bb      	bcc.n	8002ab8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b40:	2300      	movs	r3, #0
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	e044      	b.n	8002bd0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	791b      	ldrb	r3, [r3, #4]
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d3b5      	bcc.n	8002b46 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be4:	f003 fca9 	bl	800653a <USB_DevInit>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00c      	b.n	8002c14 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f005 ff28 	bl	8008a62 <USB_DevDisconnect>

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_PCD_Start+0x16>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e016      	b.n	8002c60 <HAL_PCD_Start+0x44>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 fc3f 	bl	80064c2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c44:	2101      	movs	r1, #1
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f007 ffa3 	bl	800ab92 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f005 fefc 	bl	8008a4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f005 fefe 	bl	8008a76 <USB_ReadInterrupts>
 8002c7a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fb1a 	bl	80032c0 <PCD_EP_ISR_Handler>

    return;
 8002c8c:	e119      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002caa:	b292      	uxth	r2, r2
 8002cac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f007 fd76 	bl	800a7a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f905 	bl	8002ec8 <HAL_PCD_SetAddress>

    return;
 8002cbe:	e100      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cdc:	b292      	uxth	r2, r2
 8002cde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ce2:	e0ee      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00c      	beq.n	8002d08 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d00:	b292      	uxth	r2, r2
 8002d02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d06:	e0dc      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d027      	beq.n	8002d62 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0204 	bic.w	r2, r2, #4
 8002d24:	b292      	uxth	r2, r2
 8002d26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0208 	bic.w	r2, r2, #8
 8002d3c:	b292      	uxth	r2, r2
 8002d3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f007 fd66 	bl	800a814 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d5a:	b292      	uxth	r2, r2
 8002d5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d60:	e0af      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8083 	beq.w	8002e74 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e010      	b.n	8002d96 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	7ffb      	ldrb	r3, [r7, #31]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	441a      	add	r2, r3
 8002d80:	7ffb      	ldrb	r3, [r7, #31]
 8002d82:	8812      	ldrh	r2, [r2, #0]
 8002d84:	b292      	uxth	r2, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	3320      	adds	r3, #32
 8002d8a:	443b      	add	r3, r7
 8002d8c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002d90:	7ffb      	ldrb	r3, [r7, #31]
 8002d92:	3301      	adds	r3, #1
 8002d94:	77fb      	strb	r3, [r7, #31]
 8002d96:	7ffb      	ldrb	r3, [r7, #31]
 8002d98:	2b07      	cmp	r3, #7
 8002d9a:	d9eb      	bls.n	8002d74 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	b292      	uxth	r2, r2
 8002db0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	b292      	uxth	r2, r2
 8002dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002dcc:	bf00      	nop
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f6      	beq.n	8002dce <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df2:	b292      	uxth	r2, r2
 8002df4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e00f      	b.n	8002e1e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002dfe:	7ffb      	ldrb	r3, [r7, #31]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	4611      	mov	r1, r2
 8002e06:	7ffa      	ldrb	r2, [r7, #31]
 8002e08:	0092      	lsls	r2, r2, #2
 8002e0a:	440a      	add	r2, r1
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	3320      	adds	r3, #32
 8002e10:	443b      	add	r3, r7
 8002e12:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002e16:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	2b07      	cmp	r3, #7
 8002e22:	d9ec      	bls.n	8002dfe <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0208 	orr.w	r2, r2, #8
 8002e36:	b292      	uxth	r2, r2
 8002e38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0204 	orr.w	r2, r2, #4
 8002e66:	b292      	uxth	r2, r2
 8002e68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f007 fcb7 	bl	800a7e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e72:	e026      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00f      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e90:	b292      	uxth	r2, r2
 8002e92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f007 fc75 	bl	800a786 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e9c:	e011      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00c      	beq.n	8002ec2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ec0:	bf00      	nop
  }
}
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_PCD_SetAddress+0x1a>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e012      	b.n	8002f08 <HAL_PCD_SetAddress+0x40>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f005 fd95 	bl	8008a28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	70fb      	strb	r3, [r7, #3]
 8002f22:	460b      	mov	r3, r1
 8002f24:	803b      	strh	r3, [r7, #0]
 8002f26:	4613      	mov	r3, r2
 8002f28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	da0e      	bge.n	8002f54 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	f003 0207 	and.w	r2, r3, #7
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	3310      	adds	r3, #16
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	705a      	strb	r2, [r3, #1]
 8002f52:	e00e      	b.n	8002f72 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	f003 0207 	and.w	r2, r3, #7
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f7e:	883a      	ldrh	r2, [r7, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	78ba      	ldrb	r2, [r7, #2]
 8002f88:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f8a:	78bb      	ldrb	r3, [r7, #2]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d102      	bne.n	8002f96 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_PCD_EP_Open+0x94>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e00e      	b.n	8002fc2 <HAL_PCD_EP_Open+0xb2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68f9      	ldr	r1, [r7, #12]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fade 	bl	8006574 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	da0e      	bge.n	8002ffc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 0207 	and.w	r2, r3, #7
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	3310      	adds	r3, #16
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	705a      	strb	r2, [r3, #1]
 8002ffa:	e00e      	b.n	800301a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 0207 	and.w	r2, r3, #7
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_PCD_EP_Close+0x6a>
 8003030:	2302      	movs	r3, #2
 8003032:	e00e      	b.n	8003052 <HAL_PCD_EP_Close+0x88>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	4618      	mov	r0, r3
 8003044:	f003 fe56 	bl	8006cf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	460b      	mov	r3, r1
 8003068:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800306a:	7afb      	ldrb	r3, [r7, #11]
 800306c:	f003 0207 	and.w	r2, r3, #7
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2200      	movs	r2, #0
 8003092:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2200      	movs	r2, #0
 8003098:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309a:	7afb      	ldrb	r3, [r7, #11]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6979      	ldr	r1, [r7, #20]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f004 f80d 	bl	80070cc <USB_EPStartXfer>

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	f003 0207 	and.w	r2, r3, #7
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	440b      	add	r3, r1
 80030da:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr

080030ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	460b      	mov	r3, r1
 80030f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	f003 0207 	and.w	r2, r3, #7
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	3310      	adds	r3, #16
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2201      	movs	r2, #1
 8003134:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003136:	7afb      	ldrb	r3, [r7, #11]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	b2da      	uxtb	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6979      	ldr	r1, [r7, #20]
 8003148:	4618      	mov	r0, r3
 800314a:	f003 ffbf 	bl	80070cc <USB_EPStartXfer>

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	7912      	ldrb	r2, [r2, #4]
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e04c      	b.n	8003210 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800317a:	2b00      	cmp	r3, #0
 800317c:	da0e      	bge.n	800319c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 0207 	and.w	r2, r3, #7
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	3310      	adds	r3, #16
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	705a      	strb	r2, [r3, #1]
 800319a:	e00c      	b.n	80031b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_PCD_EP_SetStall+0x7e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e01c      	b.n	8003210 <HAL_PCD_EP_SetStall+0xb8>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f005 fb22 	bl	800882e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d108      	bne.n	8003206 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f005 fc47 	bl	8008a94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	7912      	ldrb	r2, [r2, #4]
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e040      	b.n	80032b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323a:	2b00      	cmp	r3, #0
 800323c:	da0e      	bge.n	800325c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 0207 	and.w	r2, r3, #7
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	3310      	adds	r3, #16
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	705a      	strb	r2, [r3, #1]
 800325a:	e00e      	b.n	800327a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	f003 0207 	and.w	r2, r3, #7
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_PCD_EP_ClrStall+0x82>
 8003296:	2302      	movs	r3, #2
 8003298:	e00e      	b.n	80032b8 <HAL_PCD_EP_ClrStall+0xa0>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f005 fb10 	bl	80088ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b096      	sub	sp, #88	@ 0x58
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032c8:	e3bb      	b.n	8003a42 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80032e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 8175 	bne.w	80035d8 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d14e      	bne.n	8003398 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	b29b      	uxth	r3, r3
 8003302:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330a:	81fb      	strh	r3, [r7, #14]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	89fb      	ldrh	r3, [r7, #14]
 8003312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800331a:	b29b      	uxth	r3, r3
 800331c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3310      	adds	r3, #16
 8003322:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800332c:	b29b      	uxth	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	3302      	adds	r3, #2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800334c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	441a      	add	r2, r3
 800335a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800335c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800335e:	2100      	movs	r1, #0
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f007 f9f6 	bl	800a752 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7b5b      	ldrb	r3, [r3, #13]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8368 	beq.w	8003a42 <PCD_EP_ISR_Handler+0x782>
 8003372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 8363 	bne.w	8003a42 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7b5b      	ldrb	r3, [r3, #13]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003386:	b2da      	uxtb	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	735a      	strb	r2, [r3, #13]
 8003396:	e354      	b.n	8003a42 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800339e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80033aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80033ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d034      	beq.n	8003420 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033be:	b29b      	uxth	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	3306      	adds	r3, #6
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80033ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f005 fb9e 	bl	8008b36 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29a      	uxth	r2, r3
 8003402:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003406:	4013      	ands	r3, r2
 8003408:	823b      	strh	r3, [r7, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	8a3a      	ldrh	r2, [r7, #16]
 8003410:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003414:	b292      	uxth	r2, r2
 8003416:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f007 f96d 	bl	800a6f8 <HAL_PCD_SetupStageCallback>
 800341e:	e310      	b.n	8003a42 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003420:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003424:	2b00      	cmp	r3, #0
 8003426:	f280 830c 	bge.w	8003a42 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29a      	uxth	r2, r3
 8003432:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003436:	4013      	ands	r3, r2
 8003438:	83fb      	strh	r3, [r7, #30]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	8bfa      	ldrh	r2, [r7, #30]
 8003440:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003444:	b292      	uxth	r2, r2
 8003446:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003450:	b29b      	uxth	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	3306      	adds	r3, #6
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003472:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d019      	beq.n	80034b0 <PCD_EP_ISR_Handler+0x1f0>
 800347c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348a:	6959      	ldr	r1, [r3, #20]
 800348c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003492:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003494:	b29b      	uxth	r3, r3
 8003496:	f005 fb4e 	bl	8008b36 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800349a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	441a      	add	r2, r3
 80034a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034a8:	2100      	movs	r1, #0
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f007 f936 	bl	800a71c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80034ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f040 82bd 	bne.w	8003a42 <PCD_EP_ISR_Handler+0x782>
 80034c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034cc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034d4:	f000 82b5 	beq.w	8003a42 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	4413      	add	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003502:	b29a      	uxth	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	801a      	strh	r2, [r3, #0]
 8003508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b3e      	cmp	r3, #62	@ 0x3e
 800350e:	d91d      	bls.n	800354c <PCD_EP_ISR_Handler+0x28c>
 8003510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	647b      	str	r3, [r7, #68]	@ 0x44
 8003518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <PCD_EP_ISR_Handler+0x26a>
 8003524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003526:	3b01      	subs	r3, #1
 8003528:	647b      	str	r3, [r7, #68]	@ 0x44
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29a      	uxth	r2, r3
 8003530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003532:	b29b      	uxth	r3, r3
 8003534:	029b      	lsls	r3, r3, #10
 8003536:	b29b      	uxth	r3, r3
 8003538:	4313      	orrs	r3, r2
 800353a:	b29b      	uxth	r3, r3
 800353c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003544:	b29a      	uxth	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	e026      	b.n	800359a <PCD_EP_ISR_Handler+0x2da>
 800354c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <PCD_EP_ISR_Handler+0x2aa>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800355e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003562:	b29a      	uxth	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	801a      	strh	r2, [r3, #0]
 8003568:	e017      	b.n	800359a <PCD_EP_ISR_Handler+0x2da>
 800356a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	647b      	str	r3, [r7, #68]	@ 0x44
 8003572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <PCD_EP_ISR_Handler+0x2c4>
 800357e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003580:	3301      	adds	r3, #1
 8003582:	647b      	str	r3, [r7, #68]	@ 0x44
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29a      	uxth	r2, r3
 800358a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358c:	b29b      	uxth	r3, r3
 800358e:	029b      	lsls	r3, r3, #10
 8003590:	b29b      	uxth	r3, r3
 8003592:	4313      	orrs	r3, r2
 8003594:	b29a      	uxth	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035aa:	827b      	strh	r3, [r7, #18]
 80035ac:	8a7b      	ldrh	r3, [r7, #18]
 80035ae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80035b2:	827b      	strh	r3, [r7, #18]
 80035b4:	8a7b      	ldrh	r3, [r7, #18]
 80035b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035ba:	827b      	strh	r3, [r7, #18]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	8a7b      	ldrh	r3, [r7, #18]
 80035c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	8013      	strh	r3, [r2, #0]
 80035d6:	e234      	b.n	8003a42 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035ec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f280 80fc 	bge.w	80037ee <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	b29a      	uxth	r2, r3
 8003608:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800360c:	4013      	ands	r3, r2
 800360e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003624:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003628:	b292      	uxth	r2, r2
 800362a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800362c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003644:	7b1b      	ldrb	r3, [r3, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d125      	bne.n	8003696 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003652:	b29b      	uxth	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	3306      	adds	r3, #6
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003672:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003676:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8092 	beq.w	80037a4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003686:	6959      	ldr	r1, [r3, #20]
 8003688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368a:	88da      	ldrh	r2, [r3, #6]
 800368c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003690:	f005 fa51 	bl	8008b36 <USB_ReadPMA>
 8003694:	e086      	b.n	80037a4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003698:	78db      	ldrb	r3, [r3, #3]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d10a      	bne.n	80036b4 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800369e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036a2:	461a      	mov	r2, r3
 80036a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f9d9 	bl	8003a5e <HAL_PCD_EP_DB_Receive>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80036b2:	e077      	b.n	80037a4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ce:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	441a      	add	r2, r3
 80036e0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80036e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d024      	beq.n	800375c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800371a:	b29b      	uxth	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	3302      	adds	r3, #2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800373e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003742:	2b00      	cmp	r3, #0
 8003744:	d02e      	beq.n	80037a4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374c:	6959      	ldr	r1, [r3, #20]
 800374e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003750:	891a      	ldrh	r2, [r3, #8]
 8003752:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003756:	f005 f9ee 	bl	8008b36 <USB_ReadPMA>
 800375a:	e023      	b.n	80037a4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003764:	b29b      	uxth	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	3306      	adds	r3, #6
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003784:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003788:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800378c:	2b00      	cmp	r3, #0
 800378e:	d009      	beq.n	80037a4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	6959      	ldr	r1, [r3, #20]
 8003798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379a:	895a      	ldrh	r2, [r3, #10]
 800379c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037a0:	f005 f9c9 	bl	8008b36 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037ac:	441a      	add	r2, r3
 80037ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80037ba:	441a      	add	r2, r3
 80037bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037be:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <PCD_EP_ISR_Handler+0x514>
 80037c8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80037cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d206      	bcs.n	80037e2 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f006 ff9e 	bl	800a71c <HAL_PCD_DataOutStageCallback>
 80037e0:	e005      	b.n	80037ee <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037e8:	4618      	mov	r0, r3
 80037ea:	f003 fc6f 	bl	80070cc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8123 	beq.w	8003a42 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80037fc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	3310      	adds	r3, #16
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800382a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	441a      	add	r2, r3
 800383c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003848:	b29b      	uxth	r3, r3
 800384a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800384c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384e:	78db      	ldrb	r3, [r3, #3]
 8003850:	2b01      	cmp	r3, #1
 8003852:	f040 80a2 	bne.w	800399a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800385c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385e:	7b1b      	ldrb	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8093 	beq.w	800398c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003866:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800386a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d046      	beq.n	8003900 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003874:	785b      	ldrb	r3, [r3, #1]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d126      	bne.n	80038c8 <PCD_EP_ISR_Handler+0x608>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003888:	b29b      	uxth	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	4413      	add	r3, r2
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
 8003892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	011a      	lsls	r2, r3, #4
 8003898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389a:	4413      	add	r3, r2
 800389c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	801a      	strh	r2, [r3, #0]
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	801a      	strh	r2, [r3, #0]
 80038c6:	e061      	b.n	800398c <PCD_EP_ISR_Handler+0x6cc>
 80038c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ca:	785b      	ldrb	r3, [r3, #1]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d15d      	bne.n	800398c <PCD_EP_ISR_Handler+0x6cc>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038de:	b29b      	uxth	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e4:	4413      	add	r3, r2
 80038e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	011a      	lsls	r2, r3, #4
 80038ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f0:	4413      	add	r3, r2
 80038f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fa:	2200      	movs	r2, #0
 80038fc:	801a      	strh	r2, [r3, #0]
 80038fe:	e045      	b.n	800398c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003908:	785b      	ldrb	r3, [r3, #1]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d126      	bne.n	800395c <PCD_EP_ISR_Handler+0x69c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	637b      	str	r3, [r7, #52]	@ 0x34
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800391c:	b29b      	uxth	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003922:	4413      	add	r3, r2
 8003924:	637b      	str	r3, [r7, #52]	@ 0x34
 8003926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	011a      	lsls	r2, r3, #4
 800392c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392e:	4413      	add	r3, r2
 8003930:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003934:	633b      	str	r3, [r7, #48]	@ 0x30
 8003936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003940:	b29a      	uxth	r2, r3
 8003942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003944:	801a      	strh	r2, [r3, #0]
 8003946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	b29b      	uxth	r3, r3
 800394c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003954:	b29a      	uxth	r2, r3
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	e017      	b.n	800398c <PCD_EP_ISR_Handler+0x6cc>
 800395c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395e:	785b      	ldrb	r3, [r3, #1]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d113      	bne.n	800398c <PCD_EP_ISR_Handler+0x6cc>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800396c:	b29b      	uxth	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003972:	4413      	add	r3, r2
 8003974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	011a      	lsls	r2, r3, #4
 800397c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397e:	4413      	add	r3, r2
 8003980:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003984:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003988:	2200      	movs	r2, #0
 800398a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	4619      	mov	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f006 fedd 	bl	800a752 <HAL_PCD_DataInStageCallback>
 8003998:	e053      	b.n	8003a42 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800399a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800399e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d146      	bne.n	8003a34 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4413      	add	r3, r2
 80039ba:	3302      	adds	r3, #2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80039d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039da:	429a      	cmp	r2, r3
 80039dc:	d907      	bls.n	80039ee <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80039de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039e6:	1ad2      	subs	r2, r2, r3
 80039e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ea:	619a      	str	r2, [r3, #24]
 80039ec:	e002      	b.n	80039f4 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80039ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80039f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d106      	bne.n	8003a0a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	4619      	mov	r1, r3
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f006 fea5 	bl	800a752 <HAL_PCD_DataInStageCallback>
 8003a08:	e01b      	b.n	8003a42 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a12:	441a      	add	r2, r3
 8003a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a16:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003a20:	441a      	add	r2, r3
 8003a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a24:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 fb4d 	bl	80070cc <USB_EPStartXfer>
 8003a32:	e006      	b.n	8003a42 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f91b 	bl	8003c78 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	b21b      	sxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f6ff ac3b 	blt.w	80032ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3758      	adds	r7, #88	@ 0x58
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b088      	sub	sp, #32
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d07e      	beq.n	8003b74 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	8b7b      	ldrh	r3, [r7, #26]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d306      	bcc.n	8003ab8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	8b7b      	ldrh	r3, [r7, #26]
 8003ab0:	1ad2      	subs	r2, r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	619a      	str	r2, [r3, #24]
 8003ab6:	e002      	b.n	8003abe <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2200      	movs	r2, #0
 8003abc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d123      	bne.n	8003b0e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae0:	833b      	strh	r3, [r7, #24]
 8003ae2:	8b3b      	ldrh	r3, [r7, #24]
 8003ae4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ae8:	833b      	strh	r3, [r7, #24]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	8b3b      	ldrh	r3, [r7, #24]
 8003afa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003afe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01f      	beq.n	8003b58 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b32:	82fb      	strh	r3, [r7, #22]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	441a      	add	r2, r3
 8003b42:	8afb      	ldrh	r3, [r7, #22]
 8003b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b58:	8b7b      	ldrh	r3, [r7, #26]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8087 	beq.w	8003c6e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	6959      	ldr	r1, [r3, #20]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	891a      	ldrh	r2, [r3, #8]
 8003b6c:	8b7b      	ldrh	r3, [r7, #26]
 8003b6e:	f004 ffe2 	bl	8008b36 <USB_ReadPMA>
 8003b72:	e07c      	b.n	8003c6e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	3306      	adds	r3, #6
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	8b7b      	ldrh	r3, [r7, #26]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d306      	bcc.n	8003bb6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	8b7b      	ldrh	r3, [r7, #26]
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	619a      	str	r2, [r3, #24]
 8003bb4:	e002      	b.n	8003bbc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d123      	bne.n	8003c0c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bde:	83fb      	strh	r3, [r7, #30]
 8003be0:	8bfb      	ldrh	r3, [r7, #30]
 8003be2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003be6:	83fb      	strh	r3, [r7, #30]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	8bfb      	ldrh	r3, [r7, #30]
 8003bf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d11f      	bne.n	8003c56 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c30:	83bb      	strh	r3, [r7, #28]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	441a      	add	r2, r3
 8003c40:	8bbb      	ldrh	r3, [r7, #28]
 8003c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c56:	8b7b      	ldrh	r3, [r7, #26]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6959      	ldr	r1, [r3, #20]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	895a      	ldrh	r2, [r3, #10]
 8003c68:	8b7b      	ldrh	r3, [r7, #26]
 8003c6a:	f004 ff64 	bl	8008b36 <USB_ReadPMA>
    }
  }

  return count;
 8003c6e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b0a4      	sub	sp, #144	@ 0x90
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 81dd 	beq.w	800404c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cba:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	699a      	ldr	r2, [r3, #24]
 8003cc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d907      	bls.n	8003cda <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cd2:	1ad2      	subs	r2, r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	619a      	str	r2, [r3, #24]
 8003cd8:	e002      	b.n	8003ce0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f040 80b9 	bne.w	8003e5c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	785b      	ldrb	r3, [r3, #1]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d126      	bne.n	8003d40 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d06:	4413      	add	r3, r2
 8003d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	011a      	lsls	r2, r3, #4
 8003d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d12:	4413      	add	r3, r2
 8003d14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3c:	801a      	strh	r2, [r3, #0]
 8003d3e:	e01a      	b.n	8003d76 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d116      	bne.n	8003d76 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5c:	4413      	add	r3, r2
 8003d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	011a      	lsls	r2, r3, #4
 8003d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d68:	4413      	add	r3, r2
 8003d6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	2200      	movs	r2, #0
 8003d74:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d126      	bne.n	8003dd2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	011a      	lsls	r2, r3, #4
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	801a      	strh	r2, [r3, #0]
 8003dd0:	e017      	b.n	8003e02 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d113      	bne.n	8003e02 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	4413      	add	r3, r2
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	011a      	lsls	r2, r3, #4
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	4413      	add	r3, r2
 8003df6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003dfa:	623b      	str	r3, [r7, #32]
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	4619      	mov	r1, r3
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f006 fca2 	bl	800a752 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 82fc 	beq.w	8004412 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e34:	82fb      	strh	r3, [r7, #22]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	441a      	add	r2, r3
 8003e44:	8afb      	ldrh	r3, [r7, #22]
 8003e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	8013      	strh	r3, [r2, #0]
 8003e5a:	e2da      	b.n	8004412 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d021      	beq.n	8003eaa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e80:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	f040 82ae 	bne.w	8004412 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ebe:	441a      	add	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	69da      	ldr	r2, [r3, #28]
 8003ec8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ecc:	441a      	add	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	6a1a      	ldr	r2, [r3, #32]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d30b      	bcc.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eee:	1ad2      	subs	r2, r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	621a      	str	r2, [r3, #32]
 8003ef4:	e017      	b.n	8003f26 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d108      	bne.n	8003f10 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003efe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f0e:	e00a      	b.n	8003f26 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2200      	movs	r2, #0
 8003f24:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	785b      	ldrb	r3, [r3, #1]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d165      	bne.n	8003ffa <HAL_PCD_EP_DB_Transmit+0x382>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f42:	4413      	add	r3, r2
 8003f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	011a      	lsls	r2, r3, #4
 8003f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4e:	4413      	add	r3, r2
 8003f50:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	801a      	strh	r2, [r3, #0]
 8003f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f6c:	d91d      	bls.n	8003faa <HAL_PCD_EP_DB_Transmit+0x332>
 8003f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <HAL_PCD_EP_DB_Transmit+0x310>
 8003f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f84:	3b01      	subs	r3, #1
 8003f86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	029b      	lsls	r3, r3, #10
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	4313      	orrs	r3, r2
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	e044      	b.n	8004034 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x350>
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc4:	801a      	strh	r2, [r3, #0]
 8003fc6:	e035      	b.n	8004034 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fde:	3301      	adds	r3, #1
 8003fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	029b      	lsls	r3, r3, #10
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff6:	801a      	strh	r2, [r3, #0]
 8003ff8:	e01c      	b.n	8004034 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	785b      	ldrb	r3, [r3, #1]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d118      	bne.n	8004034 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	647b      	str	r3, [r7, #68]	@ 0x44
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004010:	b29b      	uxth	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004016:	4413      	add	r3, r2
 8004018:	647b      	str	r3, [r7, #68]	@ 0x44
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	011a      	lsls	r2, r3, #4
 8004020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004022:	4413      	add	r3, r2
 8004024:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004028:	643b      	str	r3, [r7, #64]	@ 0x40
 800402a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800402e:	b29a      	uxth	r2, r3
 8004030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004032:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6959      	ldr	r1, [r3, #20]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	891a      	ldrh	r2, [r3, #8]
 8004040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004044:	b29b      	uxth	r3, r3
 8004046:	f004 fd30 	bl	8008aaa <USB_WritePMA>
 800404a:	e1e2      	b.n	8004412 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004054:	b29b      	uxth	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	3306      	adds	r3, #6
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004074:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004080:	429a      	cmp	r2, r3
 8004082:	d307      	bcc.n	8004094 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800408c:	1ad2      	subs	r2, r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	619a      	str	r2, [r3, #24]
 8004092:	e002      	b.n	800409a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 80c0 	bne.w	8004224 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	785b      	ldrb	r3, [r3, #1]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d126      	bne.n	80040fa <HAL_PCD_EP_DB_Transmit+0x482>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040c0:	4413      	add	r3, r2
 80040c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	011a      	lsls	r2, r3, #4
 80040ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040cc:	4413      	add	r3, r2
 80040ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040de:	b29a      	uxth	r2, r3
 80040e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040e2:	801a      	strh	r2, [r3, #0]
 80040e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040f6:	801a      	strh	r2, [r3, #0]
 80040f8:	e01a      	b.n	8004130 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d116      	bne.n	8004130 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	667b      	str	r3, [r7, #100]	@ 0x64
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004110:	b29b      	uxth	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004116:	4413      	add	r3, r2
 8004118:	667b      	str	r3, [r7, #100]	@ 0x64
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	011a      	lsls	r2, r3, #4
 8004120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004122:	4413      	add	r3, r2
 8004124:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004128:	663b      	str	r3, [r7, #96]	@ 0x60
 800412a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800412c:	2200      	movs	r2, #0
 800412e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	677b      	str	r3, [r7, #116]	@ 0x74
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	785b      	ldrb	r3, [r3, #1]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d12b      	bne.n	8004196 <HAL_PCD_EP_DB_Transmit+0x51e>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800414c:	b29b      	uxth	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004152:	4413      	add	r3, r2
 8004154:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	011a      	lsls	r2, r3, #4
 800415c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800415e:	4413      	add	r3, r2
 8004160:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004164:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004168:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004174:	b29a      	uxth	r2, r3
 8004176:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800417a:	801a      	strh	r2, [r3, #0]
 800417c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800418c:	b29a      	uxth	r2, r3
 800418e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004192:	801a      	strh	r2, [r3, #0]
 8004194:	e017      	b.n	80041c6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	785b      	ldrb	r3, [r3, #1]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d113      	bne.n	80041c6 <HAL_PCD_EP_DB_Transmit+0x54e>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041ac:	4413      	add	r3, r2
 80041ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	011a      	lsls	r2, r3, #4
 80041b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041b8:	4413      	add	r3, r2
 80041ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041be:	673b      	str	r3, [r7, #112]	@ 0x70
 80041c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041c2:	2200      	movs	r2, #0
 80041c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	4619      	mov	r1, r3
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f006 fac0 	bl	800a752 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f040 811a 	bne.w	8004412 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	441a      	add	r2, r3
 800420a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800420e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004212:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004216:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800421a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800421e:	b29b      	uxth	r3, r3
 8004220:	8013      	strh	r3, [r2, #0]
 8004222:	e0f6      	b.n	8004412 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d121      	bne.n	8004272 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004248:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800425e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004266:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800426a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800426e:	b29b      	uxth	r3, r3
 8004270:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004278:	2b01      	cmp	r3, #1
 800427a:	f040 80ca 	bne.w	8004412 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004286:	441a      	add	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004294:	441a      	add	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6a1a      	ldr	r2, [r3, #32]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d30b      	bcc.n	80042be <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6a1a      	ldr	r2, [r3, #32]
 80042b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042b6:	1ad2      	subs	r2, r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	621a      	str	r2, [r3, #32]
 80042bc:	e017      	b.n	80042ee <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80042c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042d6:	e00a      	b.n	80042ee <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2200      	movs	r2, #0
 80042e4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d165      	bne.n	80043c8 <HAL_PCD_EP_DB_Transmit+0x750>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800430a:	b29b      	uxth	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004310:	4413      	add	r3, r2
 8004312:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	011a      	lsls	r2, r3, #4
 800431a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800431c:	4413      	add	r3, r2
 800431e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004322:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004324:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800432e:	b29a      	uxth	r2, r3
 8004330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004332:	801a      	strh	r2, [r3, #0]
 8004334:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004338:	2b3e      	cmp	r3, #62	@ 0x3e
 800433a:	d91d      	bls.n	8004378 <HAL_PCD_EP_DB_Transmit+0x700>
 800433c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004344:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004350:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004352:	3b01      	subs	r3, #1
 8004354:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29a      	uxth	r2, r3
 800435c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800435e:	b29b      	uxth	r3, r3
 8004360:	029b      	lsls	r3, r3, #10
 8004362:	b29b      	uxth	r3, r3
 8004364:	4313      	orrs	r3, r2
 8004366:	b29b      	uxth	r3, r3
 8004368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004370:	b29a      	uxth	r2, r3
 8004372:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	e041      	b.n	80043fc <HAL_PCD_EP_DB_Transmit+0x784>
 8004378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004380:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800438e:	b29a      	uxth	r2, r3
 8004390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	e032      	b.n	80043fc <HAL_PCD_EP_DB_Transmit+0x784>
 8004396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800439e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_PCD_EP_DB_Transmit+0x738>
 80043aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043ac:	3301      	adds	r3, #1
 80043ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	029b      	lsls	r3, r3, #10
 80043bc:	b29b      	uxth	r3, r3
 80043be:	4313      	orrs	r3, r2
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	e019      	b.n	80043fc <HAL_PCD_EP_DB_Transmit+0x784>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	785b      	ldrb	r3, [r3, #1]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d115      	bne.n	80043fc <HAL_PCD_EP_DB_Transmit+0x784>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043d8:	b29b      	uxth	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043de:	4413      	add	r3, r2
 80043e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	011a      	lsls	r2, r3, #4
 80043e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ea:	4413      	add	r3, r2
 80043ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80043f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043fa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	6959      	ldr	r1, [r3, #20]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	895a      	ldrh	r2, [r3, #10]
 8004408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800440c:	b29b      	uxth	r3, r3
 800440e:	f004 fb4c 	bl	8008aaa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800442c:	82bb      	strh	r3, [r7, #20]
 800442e:	8abb      	ldrh	r3, [r7, #20]
 8004430:	f083 0310 	eor.w	r3, r3, #16
 8004434:	82bb      	strh	r3, [r7, #20]
 8004436:	8abb      	ldrh	r3, [r7, #20]
 8004438:	f083 0320 	eor.w	r3, r3, #32
 800443c:	82bb      	strh	r3, [r7, #20]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	441a      	add	r2, r3
 800444c:	8abb      	ldrh	r3, [r7, #20]
 800444e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800445a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800445e:	b29b      	uxth	r3, r3
 8004460:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3790      	adds	r7, #144	@ 0x90
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	817b      	strh	r3, [r7, #10]
 800447a:	4613      	mov	r3, r2
 800447c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800447e:	897b      	ldrh	r3, [r7, #10]
 8004480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	f003 0207 	and.w	r2, r3, #7
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	3310      	adds	r3, #16
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4413      	add	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	e009      	b.n	80044b6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044a2:	897a      	ldrh	r2, [r7, #10]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044b6:	893b      	ldrh	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d107      	bne.n	80044cc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2200      	movs	r2, #0
 80044c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	80da      	strh	r2, [r3, #6]
 80044ca:	e00b      	b.n	80044e4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2201      	movs	r2, #1
 80044d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	b29a      	uxth	r2, r3
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e272      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8087 	beq.w	800461e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004510:	4b92      	ldr	r3, [pc, #584]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 030c 	and.w	r3, r3, #12
 8004518:	2b04      	cmp	r3, #4
 800451a:	d00c      	beq.n	8004536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800451c:	4b8f      	ldr	r3, [pc, #572]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b08      	cmp	r3, #8
 8004526:	d112      	bne.n	800454e <HAL_RCC_OscConfig+0x5e>
 8004528:	4b8c      	ldr	r3, [pc, #560]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004534:	d10b      	bne.n	800454e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004536:	4b89      	ldr	r3, [pc, #548]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d06c      	beq.n	800461c <HAL_RCC_OscConfig+0x12c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d168      	bne.n	800461c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e24c      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004556:	d106      	bne.n	8004566 <HAL_RCC_OscConfig+0x76>
 8004558:	4b80      	ldr	r3, [pc, #512]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a7f      	ldr	r2, [pc, #508]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800455e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	e02e      	b.n	80045c4 <HAL_RCC_OscConfig+0xd4>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x98>
 800456e:	4b7b      	ldr	r3, [pc, #492]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a7a      	ldr	r2, [pc, #488]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b78      	ldr	r3, [pc, #480]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a77      	ldr	r2, [pc, #476]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xd4>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0xbc>
 8004592:	4b72      	ldr	r3, [pc, #456]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a71      	ldr	r2, [pc, #452]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b6f      	ldr	r3, [pc, #444]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6e      	ldr	r2, [pc, #440]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xd4>
 80045ac:	4b6b      	ldr	r3, [pc, #428]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a6a      	ldr	r2, [pc, #424]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b68      	ldr	r3, [pc, #416]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a67      	ldr	r2, [pc, #412]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fc fffc 	bl	80015c8 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fc fff8 	bl	80015c8 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	@ 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e200      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b5d      	ldr	r3, [pc, #372]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xe4>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fc ffe8 	bl	80015c8 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fc ffe4 	bl	80015c8 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	@ 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1ec      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	4b53      	ldr	r3, [pc, #332]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x10c>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800462a:	4b4c      	ldr	r3, [pc, #304]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004636:	4b49      	ldr	r3, [pc, #292]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b08      	cmp	r3, #8
 8004640:	d11c      	bne.n	800467c <HAL_RCC_OscConfig+0x18c>
 8004642:	4b46      	ldr	r3, [pc, #280]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	4b43      	ldr	r3, [pc, #268]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCC_OscConfig+0x176>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1c0      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	4b3d      	ldr	r3, [pc, #244]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4939      	ldr	r1, [pc, #228]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	e03a      	b.n	80046f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004684:	4b36      	ldr	r3, [pc, #216]	@ (8004760 <HAL_RCC_OscConfig+0x270>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468a:	f7fc ff9d 	bl	80015c8 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004692:	f7fc ff99 	bl	80015c8 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1a1      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	4b2d      	ldr	r3, [pc, #180]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b2a      	ldr	r3, [pc, #168]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4927      	ldr	r1, [pc, #156]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]
 80046c4:	e015      	b.n	80046f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b26      	ldr	r3, [pc, #152]	@ (8004760 <HAL_RCC_OscConfig+0x270>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fc ff7c 	bl	80015c8 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fc ff78 	bl	80015c8 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e180      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d03a      	beq.n	8004774 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d019      	beq.n	800473a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004706:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470c:	f7fc ff5c 	bl	80015c8 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004714:	f7fc ff58 	bl	80015c8 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e160      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	4b0d      	ldr	r3, [pc, #52]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004732:	2001      	movs	r0, #1
 8004734:	f000 face 	bl	8004cd4 <RCC_Delay>
 8004738:	e01c      	b.n	8004774 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800473a:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004740:	f7fc ff42 	bl	80015c8 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004746:	e00f      	b.n	8004768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004748:	f7fc ff3e 	bl	80015c8 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d908      	bls.n	8004768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e146      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	42420000 	.word	0x42420000
 8004764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004768:	4b92      	ldr	r3, [pc, #584]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e9      	bne.n	8004748 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a6 	beq.w	80048ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004782:	2300      	movs	r3, #0
 8004784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004786:	4b8b      	ldr	r3, [pc, #556]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10d      	bne.n	80047ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004792:	4b88      	ldr	r3, [pc, #544]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	4a87      	ldr	r2, [pc, #540]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800479c:	61d3      	str	r3, [r2, #28]
 800479e:	4b85      	ldr	r3, [pc, #532]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	4b82      	ldr	r3, [pc, #520]	@ (80049b8 <HAL_RCC_OscConfig+0x4c8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d118      	bne.n	80047ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ba:	4b7f      	ldr	r3, [pc, #508]	@ (80049b8 <HAL_RCC_OscConfig+0x4c8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a7e      	ldr	r2, [pc, #504]	@ (80049b8 <HAL_RCC_OscConfig+0x4c8>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c6:	f7fc feff 	bl	80015c8 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ce:	f7fc fefb 	bl	80015c8 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b64      	cmp	r3, #100	@ 0x64
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e103      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	4b75      	ldr	r3, [pc, #468]	@ (80049b8 <HAL_RCC_OscConfig+0x4c8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x312>
 80047f4:	4b6f      	ldr	r3, [pc, #444]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	4a6e      	ldr	r2, [pc, #440]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6213      	str	r3, [r2, #32]
 8004800:	e02d      	b.n	800485e <HAL_RCC_OscConfig+0x36e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10c      	bne.n	8004824 <HAL_RCC_OscConfig+0x334>
 800480a:	4b6a      	ldr	r3, [pc, #424]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	4a69      	ldr	r2, [pc, #420]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	6213      	str	r3, [r2, #32]
 8004816:	4b67      	ldr	r3, [pc, #412]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	4a66      	ldr	r2, [pc, #408]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	6213      	str	r3, [r2, #32]
 8004822:	e01c      	b.n	800485e <HAL_RCC_OscConfig+0x36e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2b05      	cmp	r3, #5
 800482a:	d10c      	bne.n	8004846 <HAL_RCC_OscConfig+0x356>
 800482c:	4b61      	ldr	r3, [pc, #388]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	4a60      	ldr	r2, [pc, #384]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	6213      	str	r3, [r2, #32]
 8004838:	4b5e      	ldr	r3, [pc, #376]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	4a5d      	ldr	r2, [pc, #372]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6213      	str	r3, [r2, #32]
 8004844:	e00b      	b.n	800485e <HAL_RCC_OscConfig+0x36e>
 8004846:	4b5b      	ldr	r3, [pc, #364]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	4a5a      	ldr	r2, [pc, #360]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	6213      	str	r3, [r2, #32]
 8004852:	4b58      	ldr	r3, [pc, #352]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	4a57      	ldr	r2, [pc, #348]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d015      	beq.n	8004892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004866:	f7fc feaf 	bl	80015c8 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486c:	e00a      	b.n	8004884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486e:	f7fc feab 	bl	80015c8 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e0b1      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004884:	4b4b      	ldr	r3, [pc, #300]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ee      	beq.n	800486e <HAL_RCC_OscConfig+0x37e>
 8004890:	e014      	b.n	80048bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004892:	f7fc fe99 	bl	80015c8 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fc fe95 	bl	80015c8 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e09b      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b0:	4b40      	ldr	r3, [pc, #256]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1ee      	bne.n	800489a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d105      	bne.n	80048ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c2:	4b3c      	ldr	r3, [pc, #240]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4a3b      	ldr	r2, [pc, #236]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8087 	beq.w	80049e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048d8:	4b36      	ldr	r3, [pc, #216]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 030c 	and.w	r3, r3, #12
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d061      	beq.n	80049a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d146      	bne.n	800497a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ec:	4b33      	ldr	r3, [pc, #204]	@ (80049bc <HAL_RCC_OscConfig+0x4cc>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f2:	f7fc fe69 	bl	80015c8 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048fa:	f7fc fe65 	bl	80015c8 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e06d      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800490c:	4b29      	ldr	r3, [pc, #164]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f0      	bne.n	80048fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004920:	d108      	bne.n	8004934 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004922:	4b24      	ldr	r3, [pc, #144]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	4921      	ldr	r1, [pc, #132]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004934:	4b1f      	ldr	r3, [pc, #124]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a19      	ldr	r1, [r3, #32]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	430b      	orrs	r3, r1
 8004946:	491b      	ldr	r1, [pc, #108]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494c:	4b1b      	ldr	r3, [pc, #108]	@ (80049bc <HAL_RCC_OscConfig+0x4cc>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fc fe39 	bl	80015c8 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495a:	f7fc fe35 	bl	80015c8 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e03d      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800496c:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x46a>
 8004978:	e035      	b.n	80049e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497a:	4b10      	ldr	r3, [pc, #64]	@ (80049bc <HAL_RCC_OscConfig+0x4cc>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fc fe22 	bl	80015c8 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004988:	f7fc fe1e 	bl	80015c8 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e026      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800499a:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x498>
 80049a6:	e01e      	b.n	80049e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e019      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40007000 	.word	0x40007000
 80049bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049c0:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <HAL_RCC_OscConfig+0x500>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d106      	bne.n	80049e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d001      	beq.n	80049e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000

080049f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0d0      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d910      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b67      	ldr	r3, [pc, #412]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 0207 	bic.w	r2, r3, #7
 8004a1e:	4965      	ldr	r1, [pc, #404]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b63      	ldr	r3, [pc, #396]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0b8      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d020      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a50:	4b59      	ldr	r3, [pc, #356]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4a58      	ldr	r2, [pc, #352]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a68:	4b53      	ldr	r3, [pc, #332]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4a52      	ldr	r2, [pc, #328]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a74:	4b50      	ldr	r3, [pc, #320]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	494d      	ldr	r1, [pc, #308]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d040      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d107      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	4b47      	ldr	r3, [pc, #284]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d115      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e07f      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab2:	4b41      	ldr	r3, [pc, #260]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e073      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06b      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ad2:	4b39      	ldr	r3, [pc, #228]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f023 0203 	bic.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4936      	ldr	r1, [pc, #216]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae4:	f7fc fd70 	bl	80015c8 <HAL_GetTick>
 8004ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aec:	f7fc fd6c 	bl	80015c8 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e053      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 020c 	and.w	r2, r3, #12
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d1eb      	bne.n	8004aec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b14:	4b27      	ldr	r3, [pc, #156]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d210      	bcs.n	8004b44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b24      	ldr	r3, [pc, #144]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 0207 	bic.w	r2, r3, #7
 8004b2a:	4922      	ldr	r1, [pc, #136]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	4b20      	ldr	r3, [pc, #128]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e032      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b50:	4b19      	ldr	r3, [pc, #100]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4916      	ldr	r1, [pc, #88]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b6e:	4b12      	ldr	r3, [pc, #72]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	490e      	ldr	r1, [pc, #56]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b82:	f000 f821 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	490a      	ldr	r1, [pc, #40]	@ (8004bbc <HAL_RCC_ClockConfig+0x1c8>)
 8004b94:	5ccb      	ldrb	r3, [r1, r3]
 8004b96:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9a:	4a09      	ldr	r2, [pc, #36]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b9e:	4b09      	ldr	r3, [pc, #36]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fc fcce 	bl	8001544 <HAL_InitTick>

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40022000 	.word	0x40022000
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	0800acb8 	.word	0x0800acb8
 8004bc0:	20000024 	.word	0x20000024
 8004bc4:	20000028 	.word	0x20000028

08004bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004be2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d002      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x30>
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCC_GetSysClockFreq+0x36>
 8004bf6:	e027      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bf8:	4b19      	ldr	r3, [pc, #100]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bfa:	613b      	str	r3, [r7, #16]
      break;
 8004bfc:	e027      	b.n	8004c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	0c9b      	lsrs	r3, r3, #18
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	4a17      	ldr	r2, [pc, #92]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c08:	5cd3      	ldrb	r3, [r2, r3]
 8004c0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d010      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c16:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	0c5b      	lsrs	r3, r3, #17
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	4a11      	ldr	r2, [pc, #68]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c22:	5cd3      	ldrb	r3, [r2, r3]
 8004c24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a0d      	ldr	r2, [pc, #52]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c2a:	fb03 f202 	mul.w	r2, r3, r2
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	e004      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	613b      	str	r3, [r7, #16]
      break;
 8004c46:	e002      	b.n	8004c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c48:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c4a:	613b      	str	r3, [r7, #16]
      break;
 8004c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c4e:	693b      	ldr	r3, [r7, #16]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	007a1200 	.word	0x007a1200
 8004c64:	0800acd0 	.word	0x0800acd0
 8004c68:	0800ace0 	.word	0x0800ace0
 8004c6c:	003d0900 	.word	0x003d0900

08004c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c74:	4b02      	ldr	r3, [pc, #8]	@ (8004c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	20000024 	.word	0x20000024

08004c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c88:	f7ff fff2 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4903      	ldr	r1, [pc, #12]	@ (8004ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	0800acc8 	.word	0x0800acc8

08004cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cb0:	f7ff ffde 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	0adb      	lsrs	r3, r3, #11
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4903      	ldr	r1, [pc, #12]	@ (8004cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	0800acc8 	.word	0x0800acc8

08004cd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d08 <RCC_Delay+0x34>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8004d0c <RCC_Delay+0x38>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	0a5b      	lsrs	r3, r3, #9
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cf0:	bf00      	nop
  }
  while (Delay --);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1e5a      	subs	r2, r3, #1
 8004cf6:	60fa      	str	r2, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f9      	bne.n	8004cf0 <RCC_Delay+0x1c>
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr
 8004d08:	20000024 	.word	0x20000024
 8004d0c:	10624dd3 	.word	0x10624dd3

08004d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d07d      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d30:	4b4f      	ldr	r3, [pc, #316]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10d      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	4a4b      	ldr	r2, [pc, #300]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	61d3      	str	r3, [r2, #28]
 8004d48:	4b49      	ldr	r3, [pc, #292]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d54:	2301      	movs	r3, #1
 8004d56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d58:	4b46      	ldr	r3, [pc, #280]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d118      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d64:	4b43      	ldr	r3, [pc, #268]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a42      	ldr	r2, [pc, #264]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d70:	f7fc fc2a 	bl	80015c8 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d76:	e008      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d78:	f7fc fc26 	bl	80015c8 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	@ 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e06d      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d96:	4b36      	ldr	r3, [pc, #216]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d02e      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d027      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004db4:	4b2e      	ldr	r3, [pc, #184]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dca:	4a29      	ldr	r2, [pc, #164]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d014      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dda:	f7fc fbf5 	bl	80015c8 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fc fbf1 	bl	80015c8 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e036      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0ee      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e04:	4b1a      	ldr	r3, [pc, #104]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4917      	ldr	r1, [pc, #92]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e16:	7dfb      	ldrb	r3, [r7, #23]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d105      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1c:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	4a13      	ldr	r2, [pc, #76]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e34:	4b0e      	ldr	r3, [pc, #56]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	490b      	ldr	r1, [pc, #44]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e52:	4b07      	ldr	r3, [pc, #28]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	4904      	ldr	r1, [pc, #16]	@ (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40021000 	.word	0x40021000
 8004e74:	40007000 	.word	0x40007000
 8004e78:	42420440 	.word	0x42420440

08004e7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	2300      	movs	r3, #0
 8004e96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b10      	cmp	r3, #16
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	f200 808a 	bhi.w	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d045      	beq.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d075      	beq.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004eb2:	e082      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004eb4:	4b46      	ldr	r3, [pc, #280]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004eba:	4b45      	ldr	r3, [pc, #276]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d07b      	beq.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	0c9b      	lsrs	r3, r3, #18
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	4a41      	ldr	r2, [pc, #260]	@ (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004ed0:	5cd3      	ldrb	r3, [r2, r3]
 8004ed2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d015      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ede:	4b3c      	ldr	r3, [pc, #240]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	0c5b      	lsrs	r3, r3, #17
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	4a3b      	ldr	r2, [pc, #236]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004eea:	5cd3      	ldrb	r3, [r2, r3]
 8004eec:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00d      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004ef8:	4a38      	ldr	r2, [pc, #224]	@ (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	fb02 f303 	mul.w	r3, r2, r3
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	e004      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4a34      	ldr	r2, [pc, #208]	@ (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
 8004f12:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004f14:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f20:	d102      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	61bb      	str	r3, [r7, #24]
      break;
 8004f26:	e04a      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	61bb      	str	r3, [r7, #24]
      break;
 8004f36:	e042      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004f38:	4b25      	ldr	r3, [pc, #148]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f48:	d108      	bne.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004f54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	e01f      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f66:	d109      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004f68:	4b19      	ldr	r3, [pc, #100]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004f74:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	e00f      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f86:	d11c      	bne.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004f88:	4b11      	ldr	r3, [pc, #68]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d016      	beq.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004f94:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004f98:	61bb      	str	r3, [r7, #24]
      break;
 8004f9a:	e012      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004f9c:	e011      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004f9e:	f7ff fe85 	bl	8004cac <HAL_RCC_GetPCLK2Freq>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	0b9b      	lsrs	r3, r3, #14
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb6:	61bb      	str	r3, [r7, #24]
      break;
 8004fb8:	e004      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e002      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e000      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004fc2:	bf00      	nop
    }
  }
  return (frequency);
 8004fc4:	69bb      	ldr	r3, [r7, #24]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	0800ace4 	.word	0x0800ace4
 8004fd8:	0800acf4 	.word	0x0800acf4
 8004fdc:	007a1200 	.word	0x007a1200
 8004fe0:	003d0900 	.word	0x003d0900
 8004fe4:	aaaaaaab 	.word	0xaaaaaaab

08004fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e041      	b.n	800507e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc f8ae 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f000 fa5c 	bl	80054e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d001      	beq.n	80050a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e03a      	b.n	8005116 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a18      	ldr	r2, [pc, #96]	@ (8005120 <HAL_TIM_Base_Start_IT+0x98>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x58>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ca:	d009      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x58>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a14      	ldr	r2, [pc, #80]	@ (8005124 <HAL_TIM_Base_Start_IT+0x9c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x58>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a13      	ldr	r2, [pc, #76]	@ (8005128 <HAL_TIM_Base_Start_IT+0xa0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d111      	bne.n	8005104 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d010      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0201 	orr.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005102:	e007      	b.n	8005114 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800

0800512c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d020      	beq.n	8005190 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01b      	beq.n	8005190 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0202 	mvn.w	r2, #2
 8005160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f998 	bl	80054ac <HAL_TIM_IC_CaptureCallback>
 800517c:	e005      	b.n	800518a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f98b 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f99a 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d020      	beq.n	80051dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01b      	beq.n	80051dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0204 	mvn.w	r2, #4
 80051ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f972 	bl	80054ac <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f965 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f974 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d020      	beq.n	8005228 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01b      	beq.n	8005228 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0208 	mvn.w	r2, #8
 80051f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2204      	movs	r2, #4
 80051fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f94c 	bl	80054ac <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f93f 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f94e 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	2b00      	cmp	r3, #0
 8005230:	d020      	beq.n	8005274 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01b      	beq.n	8005274 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0210 	mvn.w	r2, #16
 8005244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2208      	movs	r2, #8
 800524a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f926 	bl	80054ac <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f919 	bl	800549a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f928 	bl	80054be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00c      	beq.n	8005298 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0201 	mvn.w	r2, #1
 8005290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fb f9de 	bl	8000654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00c      	beq.n	80052bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d007      	beq.n	80052bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa7f 	bl	80057ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00c      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d007      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8f8 	bl	80054d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00c      	beq.n	8005304 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0220 	mvn.w	r2, #32
 80052fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fa52 	bl	80057a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005304:	bf00      	nop
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_TIM_ConfigClockSource+0x1c>
 8005324:	2302      	movs	r3, #2
 8005326:	e0b4      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x186>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800534e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005360:	d03e      	beq.n	80053e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005362:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005366:	f200 8087 	bhi.w	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 800536a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800536e:	f000 8086 	beq.w	800547e <HAL_TIM_ConfigClockSource+0x172>
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005376:	d87f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b70      	cmp	r3, #112	@ 0x70
 800537a:	d01a      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0xa6>
 800537c:	2b70      	cmp	r3, #112	@ 0x70
 800537e:	d87b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b60      	cmp	r3, #96	@ 0x60
 8005382:	d050      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x11a>
 8005384:	2b60      	cmp	r3, #96	@ 0x60
 8005386:	d877      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b50      	cmp	r3, #80	@ 0x50
 800538a:	d03c      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0xfa>
 800538c:	2b50      	cmp	r3, #80	@ 0x50
 800538e:	d873      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005390:	2b40      	cmp	r3, #64	@ 0x40
 8005392:	d058      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x13a>
 8005394:	2b40      	cmp	r3, #64	@ 0x40
 8005396:	d86f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	2b30      	cmp	r3, #48	@ 0x30
 800539a:	d064      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 800539c:	2b30      	cmp	r3, #48	@ 0x30
 800539e:	d86b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d060      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d867      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d05c      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d05a      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15a>
 80053b0:	e062      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053c2:	f000 f974 	bl	80056ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	609a      	str	r2, [r3, #8]
      break;
 80053de:	e04f      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053f0:	f000 f95d 	bl	80056ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005402:	609a      	str	r2, [r3, #8]
      break;
 8005404:	e03c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005412:	461a      	mov	r2, r3
 8005414:	f000 f8d4 	bl	80055c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2150      	movs	r1, #80	@ 0x50
 800541e:	4618      	mov	r0, r3
 8005420:	f000 f92b 	bl	800567a <TIM_ITRx_SetConfig>
      break;
 8005424:	e02c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005432:	461a      	mov	r2, r3
 8005434:	f000 f8f2 	bl	800561c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2160      	movs	r1, #96	@ 0x60
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f91b 	bl	800567a <TIM_ITRx_SetConfig>
      break;
 8005444:	e01c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	461a      	mov	r2, r3
 8005454:	f000 f8b4 	bl	80055c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2140      	movs	r1, #64	@ 0x40
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f90b 	bl	800567a <TIM_ITRx_SetConfig>
      break;
 8005464:	e00c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f000 f902 	bl	800567a <TIM_ITRx_SetConfig>
      break;
 8005476:	e003      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      break;
 800547c:	e000      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800547e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr

080054be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr
	...

080054e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a2f      	ldr	r2, [pc, #188]	@ (80055b4 <TIM_Base_SetConfig+0xd0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00b      	beq.n	8005514 <TIM_Base_SetConfig+0x30>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005502:	d007      	beq.n	8005514 <TIM_Base_SetConfig+0x30>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a2c      	ldr	r2, [pc, #176]	@ (80055b8 <TIM_Base_SetConfig+0xd4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_Base_SetConfig+0x30>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a2b      	ldr	r2, [pc, #172]	@ (80055bc <TIM_Base_SetConfig+0xd8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d108      	bne.n	8005526 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a22      	ldr	r2, [pc, #136]	@ (80055b4 <TIM_Base_SetConfig+0xd0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00b      	beq.n	8005546 <TIM_Base_SetConfig+0x62>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005534:	d007      	beq.n	8005546 <TIM_Base_SetConfig+0x62>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1f      	ldr	r2, [pc, #124]	@ (80055b8 <TIM_Base_SetConfig+0xd4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_Base_SetConfig+0x62>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a1e      	ldr	r2, [pc, #120]	@ (80055bc <TIM_Base_SetConfig+0xd8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d108      	bne.n	8005558 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a0d      	ldr	r2, [pc, #52]	@ (80055b4 <TIM_Base_SetConfig+0xd0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d103      	bne.n	800558c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f023 0201 	bic.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	611a      	str	r2, [r3, #16]
  }
}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800

080055c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f023 0201 	bic.w	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f023 030a 	bic.w	r3, r3, #10
 80055fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f023 0210 	bic.w	r2, r3, #16
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	031b      	lsls	r3, r3, #12
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005658:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	621a      	str	r2, [r3, #32]
}
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800567a:	b480      	push	{r7}
 800567c:	b085      	sub	sp, #20
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	f043 0307 	orr.w	r3, r3, #7
 800569c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	609a      	str	r2, [r3, #8]
}
 80056a4:	bf00      	nop
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr

080056ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b087      	sub	sp, #28
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
 80056ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	021a      	lsls	r2, r3, #8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	609a      	str	r2, [r3, #8]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005700:	2302      	movs	r3, #2
 8005702:	e046      	b.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a16      	ldr	r2, [pc, #88]	@ (800579c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005750:	d009      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a12      	ldr	r2, [pc, #72]	@ (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a10      	ldr	r2, [pc, #64]	@ (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d10c      	bne.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	4313      	orrs	r3, r2
 8005776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr
 800579c:	40012c00 	.word	0x40012c00
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800

080057a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr

080057ba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr

080057cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e042      	b.n	8005864 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fb fd34 	bl	8001260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2224      	movs	r2, #36	@ 0x24
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800580e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fdbb 	bl	800638c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695a      	ldr	r2, [r3, #20]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08c      	sub	sp, #48	@ 0x30
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	4613      	mov	r3, r2
 8005878:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b20      	cmp	r3, #32
 8005884:	d156      	bne.n	8005934 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_UART_Transmit_DMA+0x26>
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e04f      	b.n	8005936 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	88fa      	ldrh	r2, [r7, #6]
 80058a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	88fa      	ldrh	r2, [r7, #6]
 80058a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2221      	movs	r2, #33	@ 0x21
 80058b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	4a21      	ldr	r2, [pc, #132]	@ (8005940 <HAL_UART_Transmit_DMA+0xd4>)
 80058bc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c2:	4a20      	ldr	r2, [pc, #128]	@ (8005944 <HAL_UART_Transmit_DMA+0xd8>)
 80058c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005948 <HAL_UART_Transmit_DMA+0xdc>)
 80058cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	2200      	movs	r2, #0
 80058d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80058d6:	f107 0308 	add.w	r3, r7, #8
 80058da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80058e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3304      	adds	r3, #4
 80058ea:	461a      	mov	r2, r3
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	f7fc fc8b 	bl	8002208 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3314      	adds	r3, #20
 8005902:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	617b      	str	r3, [r7, #20]
   return(result);
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005912:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3314      	adds	r3, #20
 800591a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800591c:	627a      	str	r2, [r7, #36]	@ 0x24
 800591e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6a39      	ldr	r1, [r7, #32]
 8005922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	61fb      	str	r3, [r7, #28]
   return(result);
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e5      	bne.n	80058fc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	e000      	b.n	8005936 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005934:	2302      	movs	r3, #2
  }
}
 8005936:	4618      	mov	r0, r3
 8005938:	3730      	adds	r7, #48	@ 0x30
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	08005ebd 	.word	0x08005ebd
 8005944:	08005f57 	.word	0x08005f57
 8005948:	08005f73 	.word	0x08005f73

0800594c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b0ba      	sub	sp, #232	@ 0xe8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005972:	2300      	movs	r3, #0
 8005974:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005978:	2300      	movs	r3, #0
 800597a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800598a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10f      	bne.n	80059b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <HAL_UART_IRQHandler+0x66>
 800599e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fc2f 	bl	800620e <UART_Receive_IT>
      return;
 80059b0:	e25b      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80de 	beq.w	8005b78 <HAL_UART_IRQHandler+0x22c>
 80059bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80d1 	beq.w	8005b78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_UART_IRQHandler+0xae>
 80059e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f2:	f043 0201 	orr.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_UART_IRQHandler+0xd2>
 8005a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a16:	f043 0202 	orr.w	r2, r3, #2
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_UART_IRQHandler+0xf6>
 8005a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	f043 0204 	orr.w	r2, r3, #4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d011      	beq.n	8005a72 <HAL_UART_IRQHandler+0x126>
 8005a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6a:	f043 0208 	orr.w	r2, r3, #8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 81f2 	beq.w	8005e60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_UART_IRQHandler+0x14e>
 8005a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fbba 	bl	800620e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bf14      	ite	ne
 8005aa8:	2301      	movne	r3, #1
 8005aaa:	2300      	moveq	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x17a>
 8005abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d04f      	beq.n	8005b66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fac4 	bl	8006054 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d041      	beq.n	8005b5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3314      	adds	r3, #20
 8005ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3314      	adds	r3, #20
 8005b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1d9      	bne.n	8005ada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d013      	beq.n	8005b56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	4a7e      	ldr	r2, [pc, #504]	@ (8005d2c <HAL_UART_IRQHandler+0x3e0>)
 8005b34:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fc fc00 	bl	8002340 <HAL_DMA_Abort_IT>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	e00e      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f99c 	bl	8005e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	e00a      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f998 	bl	8005e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	e006      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f994 	bl	8005e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005b72:	e175      	b.n	8005e60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	bf00      	nop
    return;
 8005b76:	e173      	b.n	8005e60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 814f 	bne.w	8005e20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8148 	beq.w	8005e20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8141 	beq.w	8005e20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 80b6 	beq.w	8005d30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8145 	beq.w	8005e64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005be2:	429a      	cmp	r2, r3
 8005be4:	f080 813e 	bcs.w	8005e64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	f000 8088 	beq.w	8005d0c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c28:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c34:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1d9      	bne.n	8005bfc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c5a:	f023 0301 	bic.w	r3, r3, #1
 8005c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3314      	adds	r3, #20
 8005c68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c6c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c70:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c74:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e1      	bne.n	8005c48 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3314      	adds	r3, #20
 8005c8a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3314      	adds	r3, #20
 8005ca4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ca8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005caa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005cae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e3      	bne.n	8005c84 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	330c      	adds	r3, #12
 8005cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cdc:	f023 0310 	bic.w	r3, r3, #16
 8005ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005cee:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cf0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e3      	bne.n	8005cca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fc fade 	bl	80022c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	4619      	mov	r1, r3
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f8bf 	bl	8005ea6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d28:	e09c      	b.n	8005e64 <HAL_UART_IRQHandler+0x518>
 8005d2a:	bf00      	nop
 8005d2c:	08006119 	.word	0x08006119
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 808e 	beq.w	8005e68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8089 	beq.w	8005e68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e3      	bne.n	8005d56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3314      	adds	r3, #20
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3314      	adds	r3, #20
 8005dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005db2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e3      	bne.n	8005d8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0310 	bic.w	r3, r3, #16
 8005dea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005df8:	61fa      	str	r2, [r7, #28]
 8005dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	69b9      	ldr	r1, [r7, #24]
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	617b      	str	r3, [r7, #20]
   return(result);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e3      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f844 	bl	8005ea6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e1e:	e023      	b.n	8005e68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d009      	beq.n	8005e40 <HAL_UART_IRQHandler+0x4f4>
 8005e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f981 	bl	8006140 <UART_Transmit_IT>
    return;
 8005e3e:	e014      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <HAL_UART_IRQHandler+0x51e>
 8005e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f9c0 	bl	80061de <UART_EndTransmit_IT>
    return;
 8005e5e:	e004      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
    return;
 8005e60:	bf00      	nop
 8005e62:	e002      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8005e64:	bf00      	nop
 8005e66:	e000      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8005e68:	bf00      	nop
  }
}
 8005e6a:	37e8      	adds	r7, #232	@ 0xe8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr

08005e94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr

08005ebc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b090      	sub	sp, #64	@ 0x40
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d137      	bne.n	8005f48 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eda:	2200      	movs	r2, #0
 8005edc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	623b      	str	r3, [r7, #32]
   return(result);
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3314      	adds	r3, #20
 8005efc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005efe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e5      	bne.n	8005ede <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f32:	61fa      	str	r2, [r7, #28]
 8005f34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	69b9      	ldr	r1, [r7, #24]
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	617b      	str	r3, [r7, #20]
   return(result);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e5      	bne.n	8005f12 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f46:	e002      	b.n	8005f4e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005f48:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005f4a:	f7ff ff91 	bl	8005e70 <HAL_UART_TxCpltCallback>
}
 8005f4e:	bf00      	nop
 8005f50:	3740      	adds	r7, #64	@ 0x40
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7ff ff8c 	bl	8005e82 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bf14      	ite	ne
 8005f92:	2301      	movne	r3, #1
 8005f94:	2300      	moveq	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b21      	cmp	r3, #33	@ 0x21
 8005fa4:	d108      	bne.n	8005fb8 <UART_DMAError+0x46>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005fb2:	68b8      	ldr	r0, [r7, #8]
 8005fb4:	f000 f827 	bl	8006006 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	bf14      	ite	ne
 8005fc6:	2301      	movne	r3, #1
 8005fc8:	2300      	moveq	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b22      	cmp	r3, #34	@ 0x22
 8005fd8:	d108      	bne.n	8005fec <UART_DMAError+0x7a>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005fe6:	68b8      	ldr	r0, [r7, #8]
 8005fe8:	f000 f834 	bl	8006054 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff0:	f043 0210 	orr.w	r2, r3, #16
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ff8:	68b8      	ldr	r0, [r7, #8]
 8005ffa:	f7ff ff4b 	bl	8005e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006006:	b480      	push	{r7}
 8006008:	b089      	sub	sp, #36	@ 0x24
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	330c      	adds	r3, #12
 8006014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	60bb      	str	r3, [r7, #8]
   return(result);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	330c      	adds	r3, #12
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	61ba      	str	r2, [r7, #24]
 8006030:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6979      	ldr	r1, [r7, #20]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	613b      	str	r3, [r7, #16]
   return(result);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e5      	bne.n	800600e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800604a:	bf00      	nop
 800604c:	3724      	adds	r7, #36	@ 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b095      	sub	sp, #84	@ 0x54
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800607c:	643a      	str	r2, [r7, #64]	@ 0x40
 800607e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800608a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e5      	bne.n	800605c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3314      	adds	r3, #20
 8006096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	61fb      	str	r3, [r7, #28]
   return(result);
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e5      	bne.n	8006090 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d119      	bne.n	8006100 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	60bb      	str	r3, [r7, #8]
   return(result);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f023 0310 	bic.w	r3, r3, #16
 80060e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	330c      	adds	r3, #12
 80060ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ec:	61ba      	str	r2, [r7, #24]
 80060ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6979      	ldr	r1, [r7, #20]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	613b      	str	r3, [r7, #16]
   return(result);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e5      	bne.n	80060cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800610e:	bf00      	nop
 8006110:	3754      	adds	r7, #84	@ 0x54
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff feae 	bl	8005e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b21      	cmp	r3, #33	@ 0x21
 8006152:	d13e      	bne.n	80061d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615c:	d114      	bne.n	8006188 <UART_Transmit_IT+0x48>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d110      	bne.n	8006188 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800617a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	1c9a      	adds	r2, r3, #2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	621a      	str	r2, [r3, #32]
 8006186:	e008      	b.n	800619a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	1c59      	adds	r1, r3, #1
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6211      	str	r1, [r2, #32]
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4619      	mov	r1, r3
 80061a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10f      	bne.n	80061ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e000      	b.n	80061d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061d2:	2302      	movs	r3, #2
  }
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr

080061de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff fe36 	bl	8005e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b08c      	sub	sp, #48	@ 0x30
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b22      	cmp	r3, #34	@ 0x22
 8006220:	f040 80ae 	bne.w	8006380 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800622c:	d117      	bne.n	800625e <UART_Receive_IT+0x50>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d113      	bne.n	800625e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006236:	2300      	movs	r3, #0
 8006238:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624c:	b29a      	uxth	r2, r3
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006256:	1c9a      	adds	r2, r3, #2
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	629a      	str	r2, [r3, #40]	@ 0x28
 800625c:	e026      	b.n	80062ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006262:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006264:	2300      	movs	r3, #0
 8006266:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006270:	d007      	beq.n	8006282 <UART_Receive_IT+0x74>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <UART_Receive_IT+0x82>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	b2da      	uxtb	r2, r3
 800628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	e008      	b.n	80062a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	4619      	mov	r1, r3
 80062ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d15d      	bne.n	800637c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0220 	bic.w	r2, r2, #32
 80062ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695a      	ldr	r2, [r3, #20]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0201 	bic.w	r2, r2, #1
 80062ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	2b01      	cmp	r3, #1
 8006304:	d135      	bne.n	8006372 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	613b      	str	r3, [r7, #16]
   return(result);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f023 0310 	bic.w	r3, r3, #16
 8006322:	627b      	str	r3, [r7, #36]	@ 0x24
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	330c      	adds	r3, #12
 800632a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800632c:	623a      	str	r2, [r7, #32]
 800632e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	69f9      	ldr	r1, [r7, #28]
 8006332:	6a3a      	ldr	r2, [r7, #32]
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	61bb      	str	r3, [r7, #24]
   return(result);
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e5      	bne.n	800630c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	2b10      	cmp	r3, #16
 800634c:	d10a      	bne.n	8006364 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff fd9b 	bl	8005ea6 <HAL_UARTEx_RxEventCallback>
 8006370:	e002      	b.n	8006378 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fa fb52 	bl	8000a1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	e002      	b.n	8006382 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	e000      	b.n	8006382 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006380:	2302      	movs	r3, #2
  }
}
 8006382:	4618      	mov	r0, r3
 8006384:	3730      	adds	r7, #48	@ 0x30
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80063c6:	f023 030c 	bic.w	r3, r3, #12
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	430b      	orrs	r3, r1
 80063d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a2c      	ldr	r2, [pc, #176]	@ (80064a0 <UART_SetConfig+0x114>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d103      	bne.n	80063fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80063f4:	f7fe fc5a 	bl	8004cac <HAL_RCC_GetPCLK2Freq>
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	e002      	b.n	8006402 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80063fc:	f7fe fc42 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8006400:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	009a      	lsls	r2, r3, #2
 800640c:	441a      	add	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	fbb2 f3f3 	udiv	r3, r2, r3
 8006418:	4a22      	ldr	r2, [pc, #136]	@ (80064a4 <UART_SetConfig+0x118>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	0119      	lsls	r1, r3, #4
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009a      	lsls	r2, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	fbb2 f2f3 	udiv	r2, r2, r3
 8006438:	4b1a      	ldr	r3, [pc, #104]	@ (80064a4 <UART_SetConfig+0x118>)
 800643a:	fba3 0302 	umull	r0, r3, r3, r2
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	2064      	movs	r0, #100	@ 0x64
 8006442:	fb00 f303 	mul.w	r3, r0, r3
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	3332      	adds	r3, #50	@ 0x32
 800644c:	4a15      	ldr	r2, [pc, #84]	@ (80064a4 <UART_SetConfig+0x118>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006458:	4419      	add	r1, r3
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009a      	lsls	r2, r3, #2
 8006464:	441a      	add	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006470:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <UART_SetConfig+0x118>)
 8006472:	fba3 0302 	umull	r0, r3, r3, r2
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	2064      	movs	r0, #100	@ 0x64
 800647a:	fb00 f303 	mul.w	r3, r0, r3
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	3332      	adds	r3, #50	@ 0x32
 8006484:	4a07      	ldr	r2, [pc, #28]	@ (80064a4 <UART_SetConfig+0x118>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	440a      	add	r2, r1
 8006496:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40013800 	.word	0x40013800
 80064a4:	51eb851f 	.word	0x51eb851f

080064a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	4638      	mov	r0, r7
 80064b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr

080064c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064d2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80064d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	b29a      	uxth	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr

080064ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064f6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80064fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	b29b      	uxth	r3, r3
 8006508:	43db      	mvns	r3, r3
 800650a:	b29b      	uxth	r3, r3
 800650c:	4013      	ands	r3, r2
 800650e:	b29a      	uxth	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr

08006522 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	bc80      	pop	{r7}
 8006538:	4770      	bx	lr

0800653a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	4638      	mov	r0, r7
 8006544:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006574:	b480      	push	{r7}
 8006576:	b09d      	sub	sp, #116	@ 0x74
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	78db      	ldrb	r3, [r3, #3]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d81f      	bhi.n	80065e6 <USB_ActivateEndpoint+0x72>
 80065a6:	a201      	add	r2, pc, #4	@ (adr r2, 80065ac <USB_ActivateEndpoint+0x38>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	080065bd 	.word	0x080065bd
 80065b0:	080065d9 	.word	0x080065d9
 80065b4:	080065ef 	.word	0x080065ef
 80065b8:	080065cb 	.word	0x080065cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80065bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065c8:	e012      	b.n	80065f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80065ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065ce:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80065d2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065d6:	e00b      	b.n	80065f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80065d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80065e4:	e004      	b.n	80065f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80065ec:	e000      	b.n	80065f0 <USB_ActivateEndpoint+0x7c>
      break;
 80065ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	441a      	add	r2, r3
 80065fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006602:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800660a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660e:	b29b      	uxth	r3, r3
 8006610:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006628:	b29b      	uxth	r3, r3
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	7812      	ldrb	r2, [r2, #0]
 800662e:	4313      	orrs	r3, r2
 8006630:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	441a      	add	r2, r3
 800663e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800664a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800664e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006652:	b29b      	uxth	r3, r3
 8006654:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	7b1b      	ldrb	r3, [r3, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f040 8178 	bne.w	8006950 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 8084 	beq.w	8006772 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006674:	b29b      	uxth	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	4413      	add	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	011a      	lsls	r2, r3, #4
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	88db      	ldrh	r3, [r3, #6]
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	b29b      	uxth	r3, r3
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	827b      	strh	r3, [r7, #18]
 80066ac:	8a7b      	ldrh	r3, [r7, #18]
 80066ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d01b      	beq.n	80066ee <USB_ActivateEndpoint+0x17a>
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066cc:	823b      	strh	r3, [r7, #16]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	441a      	add	r2, r3
 80066d8:	8a3b      	ldrh	r3, [r7, #16]
 80066da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	78db      	ldrb	r3, [r3, #3]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d020      	beq.n	8006738 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800670c:	81bb      	strh	r3, [r7, #12]
 800670e:	89bb      	ldrh	r3, [r7, #12]
 8006710:	f083 0320 	eor.w	r3, r3, #32
 8006714:	81bb      	strh	r3, [r7, #12]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	89bb      	ldrh	r3, [r7, #12]
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800672e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
 8006736:	e2d5      	b.n	8006ce4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800674a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800674e:	81fb      	strh	r3, [r7, #14]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	441a      	add	r2, r3
 800675a:	89fb      	ldrh	r3, [r7, #14]
 800675c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006760:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006764:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800676c:	b29b      	uxth	r3, r3
 800676e:	8013      	strh	r3, [r2, #0]
 8006770:	e2b8      	b.n	8006ce4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	633b      	str	r3, [r7, #48]	@ 0x30
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800677c:	b29b      	uxth	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006782:	4413      	add	r3, r2
 8006784:	633b      	str	r3, [r7, #48]	@ 0x30
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	011a      	lsls	r2, r3, #4
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	4413      	add	r3, r2
 8006790:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	88db      	ldrh	r3, [r3, #6]
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	b29b      	uxth	r3, r3
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	4413      	add	r3, r2
 80067b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	011a      	lsls	r2, r3, #4
 80067c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c2:	4413      	add	r3, r2
 80067c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	801a      	strh	r2, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b3e      	cmp	r3, #62	@ 0x3e
 80067e0:	d91d      	bls.n	800681e <USB_ActivateEndpoint+0x2aa>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <USB_ActivateEndpoint+0x288>
 80067f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067f8:	3b01      	subs	r3, #1
 80067fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29a      	uxth	r2, r3
 8006802:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006804:	b29b      	uxth	r3, r3
 8006806:	029b      	lsls	r3, r3, #10
 8006808:	b29b      	uxth	r3, r3
 800680a:	4313      	orrs	r3, r2
 800680c:	b29b      	uxth	r3, r3
 800680e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006816:	b29a      	uxth	r2, r3
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	801a      	strh	r2, [r3, #0]
 800681c:	e026      	b.n	800686c <USB_ActivateEndpoint+0x2f8>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <USB_ActivateEndpoint+0x2c8>
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006834:	b29a      	uxth	r2, r3
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e017      	b.n	800686c <USB_ActivateEndpoint+0x2f8>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <USB_ActivateEndpoint+0x2e2>
 8006850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006852:	3301      	adds	r3, #1
 8006854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29a      	uxth	r2, r3
 800685c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800685e:	b29b      	uxth	r3, r3
 8006860:	029b      	lsls	r3, r3, #10
 8006862:	b29b      	uxth	r3, r3
 8006864:	4313      	orrs	r3, r2
 8006866:	b29a      	uxth	r2, r3
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	847b      	strh	r3, [r7, #34]	@ 0x22
 800687a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800687c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01b      	beq.n	80068bc <USB_ActivateEndpoint+0x348>
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689a:	843b      	strh	r3, [r7, #32]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	441a      	add	r2, r3
 80068a6:	8c3b      	ldrh	r3, [r7, #32]
 80068a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d124      	bne.n	800690e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068da:	83bb      	strh	r3, [r7, #28]
 80068dc:	8bbb      	ldrh	r3, [r7, #28]
 80068de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068e2:	83bb      	strh	r3, [r7, #28]
 80068e4:	8bbb      	ldrh	r3, [r7, #28]
 80068e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068ea:	83bb      	strh	r3, [r7, #28]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	441a      	add	r2, r3
 80068f6:	8bbb      	ldrh	r3, [r7, #28]
 80068f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006900:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006908:	b29b      	uxth	r3, r3
 800690a:	8013      	strh	r3, [r2, #0]
 800690c:	e1ea      	b.n	8006ce4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006924:	83fb      	strh	r3, [r7, #30]
 8006926:	8bfb      	ldrh	r3, [r7, #30]
 8006928:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800692c:	83fb      	strh	r3, [r7, #30]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	441a      	add	r2, r3
 8006938:	8bfb      	ldrh	r3, [r7, #30]
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
 800694e:	e1c9      	b.n	8006ce4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	78db      	ldrb	r3, [r3, #3]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d11e      	bne.n	8006996 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800696a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800696e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006988:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800698c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006990:	b29b      	uxth	r3, r3
 8006992:	8013      	strh	r3, [r2, #0]
 8006994:	e01d      	b.n	80069d2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80069a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ac:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	441a      	add	r2, r3
 80069ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80069be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069dc:	b29b      	uxth	r3, r3
 80069de:	461a      	mov	r2, r3
 80069e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069e2:	4413      	add	r3, r2
 80069e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	011a      	lsls	r2, r3, #4
 80069ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	891b      	ldrh	r3, [r3, #8]
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a16:	4413      	add	r3, r2
 8006a18:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	011a      	lsls	r2, r3, #4
 8006a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006a28:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	895b      	ldrh	r3, [r3, #10]
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a38:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f040 8093 	bne.w	8006b6a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006a54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01b      	beq.n	8006a98 <USB_ActivateEndpoint+0x524>
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	441a      	add	r2, r3
 8006a82:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006aa6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01b      	beq.n	8006ae8 <USB_ActivateEndpoint+0x574>
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	441a      	add	r2, r3
 8006ad2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ae0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006afe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006b00:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b02:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b06:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006b08:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b0e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006b1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b46:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	8013      	strh	r3, [r2, #0]
 8006b68:	e0bc      	b.n	8006ce4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006b7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01d      	beq.n	8006bc2 <USB_ActivateEndpoint+0x64e>
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	441a      	add	r2, r3
 8006baa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006bd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01d      	beq.n	8006c1a <USB_ActivateEndpoint+0x6a6>
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	441a      	add	r2, r3
 8006c02:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	78db      	ldrb	r3, [r3, #3]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d024      	beq.n	8006c6c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c38:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c40:	f083 0320 	eor.w	r3, r3, #32
 8006c44:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	441a      	add	r2, r3
 8006c52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	8013      	strh	r3, [r2, #0]
 8006c6a:	e01d      	b.n	8006ca8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c82:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	441a      	add	r2, r3
 8006c90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006c94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cbe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	441a      	add	r2, r3
 8006ccc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006cd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006ce4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3774      	adds	r7, #116	@ 0x74
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop

08006cf4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b08d      	sub	sp, #52	@ 0x34
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	7b1b      	ldrb	r3, [r3, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f040 808e 	bne.w	8006e24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d044      	beq.n	8006d9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	81bb      	strh	r3, [r7, #12]
 8006d1e:	89bb      	ldrh	r3, [r7, #12]
 8006d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01b      	beq.n	8006d60 <USB_DeactivateEndpoint+0x6c>
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3e:	817b      	strh	r3, [r7, #10]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	897b      	ldrh	r3, [r7, #10]
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d76:	813b      	strh	r3, [r7, #8]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	893b      	ldrh	r3, [r7, #8]
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
 8006d98:	e192      	b.n	80070c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	827b      	strh	r3, [r7, #18]
 8006da8:	8a7b      	ldrh	r3, [r7, #18]
 8006daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d01b      	beq.n	8006dea <USB_DeactivateEndpoint+0xf6>
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc8:	823b      	strh	r3, [r7, #16]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	441a      	add	r2, r3
 8006dd4:	8a3b      	ldrh	r3, [r7, #16]
 8006dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e00:	81fb      	strh	r3, [r7, #14]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	441a      	add	r2, r3
 8006e0c:	89fb      	ldrh	r3, [r7, #14]
 8006e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	8013      	strh	r3, [r2, #0]
 8006e22:	e14d      	b.n	80070c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	785b      	ldrb	r3, [r3, #1]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f040 80a5 	bne.w	8006f78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	843b      	strh	r3, [r7, #32]
 8006e3c:	8c3b      	ldrh	r3, [r7, #32]
 8006e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d01b      	beq.n	8006e7e <USB_DeactivateEndpoint+0x18a>
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e5c:	83fb      	strh	r3, [r7, #30]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	441a      	add	r2, r3
 8006e68:	8bfb      	ldrh	r3, [r7, #30]
 8006e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	83bb      	strh	r3, [r7, #28]
 8006e8c:	8bbb      	ldrh	r3, [r7, #28]
 8006e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d01b      	beq.n	8006ece <USB_DeactivateEndpoint+0x1da>
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eac:	837b      	strh	r3, [r7, #26]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	441a      	add	r2, r3
 8006eb8:	8b7b      	ldrh	r3, [r7, #26]
 8006eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ec6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee4:	833b      	strh	r3, [r7, #24]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	441a      	add	r2, r3
 8006ef0:	8b3b      	ldrh	r3, [r7, #24]
 8006ef2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ef6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006efe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1c:	82fb      	strh	r3, [r7, #22]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	441a      	add	r2, r3
 8006f28:	8afb      	ldrh	r3, [r7, #22]
 8006f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f54:	82bb      	strh	r3, [r7, #20]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	441a      	add	r2, r3
 8006f60:	8abb      	ldrh	r3, [r7, #20]
 8006f62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	8013      	strh	r3, [r2, #0]
 8006f76:	e0a3      	b.n	80070c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006f86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01b      	beq.n	8006fc8 <USB_DeactivateEndpoint+0x2d4>
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	441a      	add	r2, r3
 8006fb2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006fb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006fd6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01b      	beq.n	8007018 <USB_DeactivateEndpoint+0x324>
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	441a      	add	r2, r3
 8007002:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800700c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007010:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007014:	b29b      	uxth	r3, r3
 8007016:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800702a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	441a      	add	r2, r3
 800703a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800703c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007040:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007044:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800704c:	b29b      	uxth	r3, r3
 800704e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	b29b      	uxth	r3, r3
 800705e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007066:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	441a      	add	r2, r3
 8007072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800707c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007084:	b29b      	uxth	r3, r3
 8007086:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800709a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800709e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	441a      	add	r2, r3
 80070aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80070ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070bc:	b29b      	uxth	r3, r3
 80070be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3734      	adds	r7, #52	@ 0x34
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b0c2      	sub	sp, #264	@ 0x108
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070da:	6018      	str	r0, [r3, #0]
 80070dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	785b      	ldrb	r3, [r3, #1]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	f040 86b7 	bne.w	8007e66 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	429a      	cmp	r2, r3
 8007112:	d908      	bls.n	8007126 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007124:	e007      	b.n	8007136 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	7b1b      	ldrb	r3, [r3, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d13a      	bne.n	80071bc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6959      	ldr	r1, [r3, #20]
 8007152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	88da      	ldrh	r2, [r3, #6]
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007162:	b29b      	uxth	r3, r3
 8007164:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007168:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800716c:	6800      	ldr	r0, [r0, #0]
 800716e:	f001 fc9c 	bl	8008aaa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800718c:	b29b      	uxth	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	4413      	add	r3, r2
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	011a      	lsls	r2, r3, #4
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	4413      	add	r3, r2
 80071a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	801a      	strh	r2, [r3, #0]
 80071b8:	f000 be1f 	b.w	8007dfa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80071bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	78db      	ldrb	r3, [r3, #3]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	f040 8462 	bne.w	8007a92 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80071ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6a1a      	ldr	r2, [r3, #32]
 80071da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	f240 83df 	bls.w	80079aa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80071ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	b29b      	uxth	r3, r3
 800720a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800720e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007212:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800723c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007244:	b29b      	uxth	r3, r3
 8007246:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6a1a      	ldr	r2, [r3, #32]
 8007254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007258:	1ad2      	subs	r2, r2, r3
 800725a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 81c7 	beq.w	800761c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800728e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	633b      	str	r3, [r7, #48]	@ 0x30
 800729a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	785b      	ldrb	r3, [r3, #1]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d177      	bne.n	800739a <USB_EPStartXfer+0x2ce>
 80072aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	461a      	mov	r2, r3
 80072c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ca:	4413      	add	r3, r2
 80072cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	011a      	lsls	r2, r3, #4
 80072dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072de:	4413      	add	r3, r2
 80072e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	801a      	strh	r2, [r3, #0]
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80072fc:	d921      	bls.n	8007342 <USB_EPStartXfer+0x276>
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	2b00      	cmp	r3, #0
 8007312:	d104      	bne.n	800731e <USB_EPStartXfer+0x252>
 8007314:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007318:	3b01      	subs	r3, #1
 800731a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	b29a      	uxth	r2, r3
 8007324:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007328:	b29b      	uxth	r3, r3
 800732a:	029b      	lsls	r3, r3, #10
 800732c:	b29b      	uxth	r3, r3
 800732e:	4313      	orrs	r3, r2
 8007330:	b29b      	uxth	r3, r3
 8007332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800733a:	b29a      	uxth	r2, r3
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	801a      	strh	r2, [r3, #0]
 8007340:	e050      	b.n	80073e4 <USB_EPStartXfer+0x318>
 8007342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <USB_EPStartXfer+0x294>
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007358:	b29a      	uxth	r2, r3
 800735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	e041      	b.n	80073e4 <USB_EPStartXfer+0x318>
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007364:	085b      	lsrs	r3, r3, #1
 8007366:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800736a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <USB_EPStartXfer+0x2b4>
 8007376:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800737a:	3301      	adds	r3, #1
 800737c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	b29a      	uxth	r2, r3
 8007386:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800738a:	b29b      	uxth	r3, r3
 800738c:	029b      	lsls	r3, r3, #10
 800738e:	b29b      	uxth	r3, r3
 8007390:	4313      	orrs	r3, r2
 8007392:	b29a      	uxth	r2, r3
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	801a      	strh	r2, [r3, #0]
 8007398:	e024      	b.n	80073e4 <USB_EPStartXfer+0x318>
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d11c      	bne.n	80073e4 <USB_EPStartXfer+0x318>
 80073aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	461a      	mov	r2, r3
 80073bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073be:	4413      	add	r3, r2
 80073c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	011a      	lsls	r2, r3, #4
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	4413      	add	r3, r2
 80073d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073de:	b29a      	uxth	r2, r3
 80073e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	895b      	ldrh	r3, [r3, #10]
 80073f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6959      	ldr	r1, [r3, #20]
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007404:	b29b      	uxth	r3, r3
 8007406:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800740a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800740e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007412:	6800      	ldr	r0, [r0, #0]
 8007414:	f001 fb49 	bl	8008aaa <USB_WritePMA>
            ep->xfer_buff += len;
 8007418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	695a      	ldr	r2, [r3, #20]
 8007424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007428:	441a      	add	r2, r3
 800742a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6a1a      	ldr	r2, [r3, #32]
 8007442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	429a      	cmp	r2, r3
 8007450:	d90f      	bls.n	8007472 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	621a      	str	r2, [r3, #32]
 8007470:	e00e      	b.n	8007490 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2200      	movs	r2, #0
 800748e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d177      	bne.n	8007590 <USB_EPStartXfer+0x4c4>
 80074a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	4413      	add	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
 80074c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	011a      	lsls	r2, r3, #4
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	4413      	add	r3, r2
 80074d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	801a      	strh	r2, [r3, #0]
 80074ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80074f2:	d921      	bls.n	8007538 <USB_EPStartXfer+0x46c>
 80074f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007502:	f003 031f 	and.w	r3, r3, #31
 8007506:	2b00      	cmp	r3, #0
 8007508:	d104      	bne.n	8007514 <USB_EPStartXfer+0x448>
 800750a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800750e:	3b01      	subs	r3, #1
 8007510:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29a      	uxth	r2, r3
 800751a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800751e:	b29b      	uxth	r3, r3
 8007520:	029b      	lsls	r3, r3, #10
 8007522:	b29b      	uxth	r3, r3
 8007524:	4313      	orrs	r3, r2
 8007526:	b29b      	uxth	r3, r3
 8007528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800752c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007530:	b29a      	uxth	r2, r3
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	801a      	strh	r2, [r3, #0]
 8007536:	e056      	b.n	80075e6 <USB_EPStartXfer+0x51a>
 8007538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <USB_EPStartXfer+0x48a>
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29b      	uxth	r3, r3
 8007546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800754e:	b29a      	uxth	r2, r3
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	e047      	b.n	80075e6 <USB_EPStartXfer+0x51a>
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755a:	085b      	lsrs	r3, r3, #1
 800755c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <USB_EPStartXfer+0x4aa>
 800756c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007570:	3301      	adds	r3, #1
 8007572:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29a      	uxth	r2, r3
 800757c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007580:	b29b      	uxth	r3, r3
 8007582:	029b      	lsls	r3, r3, #10
 8007584:	b29b      	uxth	r3, r3
 8007586:	4313      	orrs	r3, r2
 8007588:	b29a      	uxth	r2, r3
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	801a      	strh	r2, [r3, #0]
 800758e:	e02a      	b.n	80075e6 <USB_EPStartXfer+0x51a>
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d122      	bne.n	80075e6 <USB_EPStartXfer+0x51a>
 80075a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	623b      	str	r3, [r7, #32]
 80075ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	4413      	add	r3, r2
 80075c2:	623b      	str	r3, [r7, #32]
 80075c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	011a      	lsls	r2, r3, #4
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	4413      	add	r3, r2
 80075d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075da:	61fb      	str	r3, [r7, #28]
 80075dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	891b      	ldrh	r3, [r3, #8]
 80075f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6959      	ldr	r1, [r3, #20]
 8007602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007606:	b29b      	uxth	r3, r3
 8007608:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800760c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007610:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007614:	6800      	ldr	r0, [r0, #0]
 8007616:	f001 fa48 	bl	8008aaa <USB_WritePMA>
 800761a:	e3ee      	b.n	8007dfa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800761c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d177      	bne.n	800771c <USB_EPStartXfer+0x650>
 800762c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007630:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007646:	b29b      	uxth	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800764c:	4413      	add	r3, r2
 800764e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	011a      	lsls	r2, r3, #4
 800765e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007660:	4413      	add	r3, r2
 8007662:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007666:	647b      	str	r3, [r7, #68]	@ 0x44
 8007668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007672:	b29a      	uxth	r2, r3
 8007674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007676:	801a      	strh	r2, [r3, #0]
 8007678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767c:	2b3e      	cmp	r3, #62	@ 0x3e
 800767e:	d921      	bls.n	80076c4 <USB_EPStartXfer+0x5f8>
 8007680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	2b00      	cmp	r3, #0
 8007694:	d104      	bne.n	80076a0 <USB_EPStartXfer+0x5d4>
 8007696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800769a:	3b01      	subs	r3, #1
 800769c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	029b      	lsls	r3, r3, #10
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	4313      	orrs	r3, r2
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076bc:	b29a      	uxth	r2, r3
 80076be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c0:	801a      	strh	r2, [r3, #0]
 80076c2:	e056      	b.n	8007772 <USB_EPStartXfer+0x6a6>
 80076c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <USB_EPStartXfer+0x616>
 80076cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076da:	b29a      	uxth	r2, r3
 80076dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	e047      	b.n	8007772 <USB_EPStartXfer+0x6a6>
 80076e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e6:	085b      	lsrs	r3, r3, #1
 80076e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <USB_EPStartXfer+0x636>
 80076f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076fc:	3301      	adds	r3, #1
 80076fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	b29a      	uxth	r2, r3
 8007708:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800770c:	b29b      	uxth	r3, r3
 800770e:	029b      	lsls	r3, r3, #10
 8007710:	b29b      	uxth	r3, r3
 8007712:	4313      	orrs	r3, r2
 8007714:	b29a      	uxth	r2, r3
 8007716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007718:	801a      	strh	r2, [r3, #0]
 800771a:	e02a      	b.n	8007772 <USB_EPStartXfer+0x6a6>
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d122      	bne.n	8007772 <USB_EPStartXfer+0x6a6>
 800772c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007730:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	653b      	str	r3, [r7, #80]	@ 0x50
 8007738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007746:	b29b      	uxth	r3, r3
 8007748:	461a      	mov	r2, r3
 800774a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800774c:	4413      	add	r3, r2
 800774e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	011a      	lsls	r2, r3, #4
 800775e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007760:	4413      	add	r3, r2
 8007762:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776c:	b29a      	uxth	r2, r3
 800776e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007770:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	891b      	ldrh	r3, [r3, #8]
 800777e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6959      	ldr	r1, [r3, #20]
 800778e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007792:	b29b      	uxth	r3, r3
 8007794:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007798:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800779c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077a0:	6800      	ldr	r0, [r0, #0]
 80077a2:	f001 f982 	bl	8008aaa <USB_WritePMA>
            ep->xfer_buff += len;
 80077a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695a      	ldr	r2, [r3, #20]
 80077b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b6:	441a      	add	r2, r3
 80077b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6a1a      	ldr	r2, [r3, #32]
 80077d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d90f      	bls.n	8007800 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80077e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6a1a      	ldr	r2, [r3, #32]
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f0:	1ad2      	subs	r2, r2, r3
 80077f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	621a      	str	r2, [r3, #32]
 80077fe:	e00e      	b.n	800781e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2200      	movs	r2, #0
 800781c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800781e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	643b      	str	r3, [r7, #64]	@ 0x40
 800782a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	785b      	ldrb	r3, [r3, #1]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d177      	bne.n	800792a <USB_EPStartXfer+0x85e>
 800783a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007854:	b29b      	uxth	r3, r3
 8007856:	461a      	mov	r2, r3
 8007858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785a:	4413      	add	r3, r2
 800785c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800785e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	011a      	lsls	r2, r3, #4
 800786c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786e:	4413      	add	r3, r2
 8007870:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007874:	637b      	str	r3, [r7, #52]	@ 0x34
 8007876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007880:	b29a      	uxth	r2, r3
 8007882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788a:	2b3e      	cmp	r3, #62	@ 0x3e
 800788c:	d921      	bls.n	80078d2 <USB_EPStartXfer+0x806>
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <USB_EPStartXfer+0x7e2>
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a8:	3b01      	subs	r3, #1
 80078aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	029b      	lsls	r3, r3, #10
 80078bc:	b29b      	uxth	r3, r3
 80078be:	4313      	orrs	r3, r2
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ce:	801a      	strh	r2, [r3, #0]
 80078d0:	e050      	b.n	8007974 <USB_EPStartXfer+0x8a8>
 80078d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10a      	bne.n	80078f0 <USB_EPStartXfer+0x824>
 80078da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ec:	801a      	strh	r2, [r3, #0]
 80078ee:	e041      	b.n	8007974 <USB_EPStartXfer+0x8a8>
 80078f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f4:	085b      	lsrs	r3, r3, #1
 80078f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80078fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <USB_EPStartXfer+0x844>
 8007906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790a:	3301      	adds	r3, #1
 800790c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	b29a      	uxth	r2, r3
 8007916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800791a:	b29b      	uxth	r3, r3
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	b29b      	uxth	r3, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	b29a      	uxth	r2, r3
 8007924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007926:	801a      	strh	r2, [r3, #0]
 8007928:	e024      	b.n	8007974 <USB_EPStartXfer+0x8a8>
 800792a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	785b      	ldrb	r3, [r3, #1]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d11c      	bne.n	8007974 <USB_EPStartXfer+0x8a8>
 800793a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007948:	b29b      	uxth	r3, r3
 800794a:	461a      	mov	r2, r3
 800794c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800794e:	4413      	add	r3, r2
 8007950:	643b      	str	r3, [r7, #64]	@ 0x40
 8007952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	011a      	lsls	r2, r3, #4
 8007960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007962:	4413      	add	r3, r2
 8007964:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796e:	b29a      	uxth	r2, r3
 8007970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007972:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	895b      	ldrh	r3, [r3, #10]
 8007980:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6959      	ldr	r1, [r3, #20]
 8007990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007994:	b29b      	uxth	r3, r3
 8007996:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800799a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800799e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80079a2:	6800      	ldr	r0, [r0, #0]
 80079a4:	f001 f881 	bl	8008aaa <USB_WritePMA>
 80079a8:	e227      	b.n	8007dfa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80079aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80079ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80079dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079e0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80079e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	441a      	add	r2, r3
 80079fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	461a      	mov	r2, r3
 8007a34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a36:	4413      	add	r3, r2
 8007a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	011a      	lsls	r2, r3, #4
 8007a48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	891b      	ldrh	r3, [r3, #8]
 8007a68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6959      	ldr	r1, [r3, #20]
 8007a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a82:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a86:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	f001 f80d 	bl	8008aaa <USB_WritePMA>
 8007a90:	e1b3      	b.n	8007dfa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6a1a      	ldr	r2, [r3, #32]
 8007a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa2:	1ad2      	subs	r2, r2, r3
 8007aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 80c6 	beq.w	8007c64 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007adc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	785b      	ldrb	r3, [r3, #1]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d177      	bne.n	8007be4 <USB_EPStartXfer+0xb18>
 8007af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b14:	4413      	add	r3, r2
 8007b16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	011a      	lsls	r2, r3, #4
 8007b26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b28:	4413      	add	r3, r2
 8007b2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b3e:	801a      	strh	r2, [r3, #0]
 8007b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b44:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b46:	d921      	bls.n	8007b8c <USB_EPStartXfer+0xac0>
 8007b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b56:	f003 031f 	and.w	r3, r3, #31
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d104      	bne.n	8007b68 <USB_EPStartXfer+0xa9c>
 8007b5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b62:	3b01      	subs	r3, #1
 8007b64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	029b      	lsls	r3, r3, #10
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	e050      	b.n	8007c2e <USB_EPStartXfer+0xb62>
 8007b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <USB_EPStartXfer+0xade>
 8007b94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	e041      	b.n	8007c2e <USB_EPStartXfer+0xb62>
 8007baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bae:	085b      	lsrs	r3, r3, #1
 8007bb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d004      	beq.n	8007bca <USB_EPStartXfer+0xafe>
 8007bc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007bca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	029b      	lsls	r3, r3, #10
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007be0:	801a      	strh	r2, [r3, #0]
 8007be2:	e024      	b.n	8007c2e <USB_EPStartXfer+0xb62>
 8007be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	785b      	ldrb	r3, [r3, #1]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d11c      	bne.n	8007c2e <USB_EPStartXfer+0xb62>
 8007bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	461a      	mov	r2, r3
 8007c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c08:	4413      	add	r3, r2
 8007c0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	011a      	lsls	r2, r3, #4
 8007c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	895b      	ldrh	r3, [r3, #10]
 8007c3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6959      	ldr	r1, [r3, #20]
 8007c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c5c:	6800      	ldr	r0, [r0, #0]
 8007c5e:	f000 ff24 	bl	8008aaa <USB_WritePMA>
 8007c62:	e0ca      	b.n	8007dfa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	785b      	ldrb	r3, [r3, #1]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d177      	bne.n	8007d64 <USB_EPStartXfer+0xc98>
 8007c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	461a      	mov	r2, r3
 8007c92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c94:	4413      	add	r3, r2
 8007c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	011a      	lsls	r2, r3, #4
 8007ca6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ca8:	4413      	add	r3, r2
 8007caa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cbe:	801a      	strh	r2, [r3, #0]
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cc6:	d921      	bls.n	8007d0c <USB_EPStartXfer+0xc40>
 8007cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd6:	f003 031f 	and.w	r3, r3, #31
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d104      	bne.n	8007ce8 <USB_EPStartXfer+0xc1c>
 8007cde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	029b      	lsls	r3, r3, #10
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d08:	801a      	strh	r2, [r3, #0]
 8007d0a:	e05c      	b.n	8007dc6 <USB_EPStartXfer+0xcfa>
 8007d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <USB_EPStartXfer+0xc5e>
 8007d14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d26:	801a      	strh	r2, [r3, #0]
 8007d28:	e04d      	b.n	8007dc6 <USB_EPStartXfer+0xcfa>
 8007d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2e:	085b      	lsrs	r3, r3, #1
 8007d30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d004      	beq.n	8007d4a <USB_EPStartXfer+0xc7e>
 8007d40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d44:	3301      	adds	r3, #1
 8007d46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	029b      	lsls	r3, r3, #10
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	e030      	b.n	8007dc6 <USB_EPStartXfer+0xcfa>
 8007d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d128      	bne.n	8007dc6 <USB_EPStartXfer+0xcfa>
 8007d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	461a      	mov	r2, r3
 8007d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d98:	4413      	add	r3, r2
 8007d9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	011a      	lsls	r2, r3, #4
 8007dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007db0:	4413      	add	r3, r2
 8007db2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007db6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007dc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	891b      	ldrh	r3, [r3, #8]
 8007dd2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6959      	ldr	r1, [r3, #20]
 8007de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007dec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007df0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007df4:	6800      	ldr	r0, [r0, #0]
 8007df6:	f000 fe58 	bl	8008aaa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e20:	817b      	strh	r3, [r7, #10]
 8007e22:	897b      	ldrh	r3, [r7, #10]
 8007e24:	f083 0310 	eor.w	r3, r3, #16
 8007e28:	817b      	strh	r3, [r7, #10]
 8007e2a:	897b      	ldrh	r3, [r7, #10]
 8007e2c:	f083 0320 	eor.w	r3, r3, #32
 8007e30:	817b      	strh	r3, [r7, #10]
 8007e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	441a      	add	r2, r3
 8007e4c:	897b      	ldrh	r3, [r7, #10]
 8007e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	8013      	strh	r3, [r2, #0]
 8007e62:	f000 bcde 	b.w	8008822 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	7b1b      	ldrb	r3, [r3, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f040 80bb 	bne.w	8007fee <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	699a      	ldr	r2, [r3, #24]
 8007e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d917      	bls.n	8007ec4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	699a      	ldr	r2, [r3, #24]
 8007eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb4:	1ad2      	subs	r2, r2, r3
 8007eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	619a      	str	r2, [r3, #24]
 8007ec2:	e00e      	b.n	8007ee2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	461a      	mov	r2, r3
 8007f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f06:	4413      	add	r3, r2
 8007f08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	011a      	lsls	r2, r3, #4
 8007f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f1e:	4413      	add	r3, r2
 8007f20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f3a:	801a      	strh	r2, [r3, #0]
 8007f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f40:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f42:	d924      	bls.n	8007f8e <USB_EPStartXfer+0xec2>
 8007f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f52:	f003 031f 	and.w	r3, r3, #31
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d104      	bne.n	8007f64 <USB_EPStartXfer+0xe98>
 8007f5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	029b      	lsls	r3, r3, #10
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	4313      	orrs	r3, r2
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f88:	801a      	strh	r2, [r3, #0]
 8007f8a:	f000 bc10 	b.w	80087ae <USB_EPStartXfer+0x16e2>
 8007f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10c      	bne.n	8007fb0 <USB_EPStartXfer+0xee4>
 8007f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fac:	801a      	strh	r2, [r3, #0]
 8007fae:	e3fe      	b.n	80087ae <USB_EPStartXfer+0x16e2>
 8007fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d004      	beq.n	8007fd0 <USB_EPStartXfer+0xf04>
 8007fc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fca:	3301      	adds	r3, #1
 8007fcc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	029b      	lsls	r3, r3, #10
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fea:	801a      	strh	r2, [r3, #0]
 8007fec:	e3df      	b.n	80087ae <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	78db      	ldrb	r3, [r3, #3]
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	f040 8218 	bne.w	8008430 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 809d 	bne.w	800814c <USB_EPStartXfer+0x1080>
 8008012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800802e:	b29b      	uxth	r3, r3
 8008030:	461a      	mov	r2, r3
 8008032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008036:	4413      	add	r3, r2
 8008038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800803c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	011a      	lsls	r2, r3, #4
 800804a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800804e:	4413      	add	r3, r2
 8008050:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008064:	b29a      	uxth	r2, r3
 8008066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800806a:	801a      	strh	r2, [r3, #0]
 800806c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	2b3e      	cmp	r3, #62	@ 0x3e
 800807a:	d92b      	bls.n	80080d4 <USB_EPStartXfer+0x1008>
 800807c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	095b      	lsrs	r3, r3, #5
 800808a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800808e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 031f 	and.w	r3, r3, #31
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d104      	bne.n	80080ac <USB_EPStartXfer+0xfe0>
 80080a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a6:	3b01      	subs	r3, #1
 80080a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	029b      	lsls	r3, r3, #10
 80080bc:	b29b      	uxth	r3, r3
 80080be:	4313      	orrs	r3, r2
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	e070      	b.n	80081b6 <USB_EPStartXfer+0x10ea>
 80080d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10c      	bne.n	80080fe <USB_EPStartXfer+0x1032>
 80080e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080fa:	801a      	strh	r2, [r3, #0]
 80080fc:	e05b      	b.n	80081b6 <USB_EPStartXfer+0x10ea>
 80080fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	085b      	lsrs	r3, r3, #1
 800810c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d004      	beq.n	800812e <USB_EPStartXfer+0x1062>
 8008124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008128:	3301      	adds	r3, #1
 800812a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800812e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29a      	uxth	r2, r3
 8008136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800813a:	b29b      	uxth	r3, r3
 800813c:	029b      	lsls	r3, r3, #10
 800813e:	b29b      	uxth	r3, r3
 8008140:	4313      	orrs	r3, r2
 8008142:	b29a      	uxth	r2, r3
 8008144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008148:	801a      	strh	r2, [r3, #0]
 800814a:	e034      	b.n	80081b6 <USB_EPStartXfer+0x10ea>
 800814c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	785b      	ldrb	r3, [r3, #1]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d12c      	bne.n	80081b6 <USB_EPStartXfer+0x10ea>
 800815c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800816a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008178:	b29b      	uxth	r3, r3
 800817a:	461a      	mov	r2, r3
 800817c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008180:	4413      	add	r3, r2
 8008182:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800818a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	011a      	lsls	r2, r3, #4
 8008194:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008198:	4413      	add	r3, r2
 800819a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800819e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081b4:	801a      	strh	r2, [r3, #0]
 80081b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80081c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f040 809d 	bne.w	8008310 <USB_EPStartXfer+0x1244>
 80081d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	461a      	mov	r2, r3
 80081f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081fa:	4413      	add	r3, r2
 80081fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	011a      	lsls	r2, r3, #4
 800820e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008212:	4413      	add	r3, r2
 8008214:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800821c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	2b3e      	cmp	r3, #62	@ 0x3e
 800823e:	d92b      	bls.n	8008298 <USB_EPStartXfer+0x11cc>
 8008240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	095b      	lsrs	r3, r3, #5
 800824e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f003 031f 	and.w	r3, r3, #31
 8008262:	2b00      	cmp	r3, #0
 8008264:	d104      	bne.n	8008270 <USB_EPStartXfer+0x11a4>
 8008266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800826a:	3b01      	subs	r3, #1
 800826c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008270:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29a      	uxth	r2, r3
 8008278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800827c:	b29b      	uxth	r3, r3
 800827e:	029b      	lsls	r3, r3, #10
 8008280:	b29b      	uxth	r3, r3
 8008282:	4313      	orrs	r3, r2
 8008284:	b29b      	uxth	r3, r3
 8008286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800828e:	b29a      	uxth	r2, r3
 8008290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008294:	801a      	strh	r2, [r3, #0]
 8008296:	e069      	b.n	800836c <USB_EPStartXfer+0x12a0>
 8008298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800829c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10c      	bne.n	80082c2 <USB_EPStartXfer+0x11f6>
 80082a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082be:	801a      	strh	r2, [r3, #0]
 80082c0:	e054      	b.n	800836c <USB_EPStartXfer+0x12a0>
 80082c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	085b      	lsrs	r3, r3, #1
 80082d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d004      	beq.n	80082f2 <USB_EPStartXfer+0x1226>
 80082e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ec:	3301      	adds	r3, #1
 80082ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082fe:	b29b      	uxth	r3, r3
 8008300:	029b      	lsls	r3, r3, #10
 8008302:	b29b      	uxth	r3, r3
 8008304:	4313      	orrs	r3, r2
 8008306:	b29a      	uxth	r2, r3
 8008308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800830c:	801a      	strh	r2, [r3, #0]
 800830e:	e02d      	b.n	800836c <USB_EPStartXfer+0x12a0>
 8008310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	785b      	ldrb	r3, [r3, #1]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d125      	bne.n	800836c <USB_EPStartXfer+0x12a0>
 8008320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800832e:	b29b      	uxth	r3, r3
 8008330:	461a      	mov	r2, r3
 8008332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008336:	4413      	add	r3, r2
 8008338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800833c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	011a      	lsls	r2, r3, #4
 800834a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800834e:	4413      	add	r3, r2
 8008350:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008354:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	b29a      	uxth	r2, r3
 8008366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800836a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800836c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 8218 	beq.w	80087ae <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800837e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800839e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d005      	beq.n	80083b6 <USB_EPStartXfer+0x12ea>
 80083aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10d      	bne.n	80083d2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f040 81f5 	bne.w	80087ae <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80083c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80083c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f040 81ee 	bne.w	80087ae <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80083d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80083fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	441a      	add	r2, r3
 8008416:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800841a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800841e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008426:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800842a:	b29b      	uxth	r3, r3
 800842c:	8013      	strh	r3, [r2, #0]
 800842e:	e1be      	b.n	80087ae <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	78db      	ldrb	r3, [r3, #3]
 800843c:	2b01      	cmp	r3, #1
 800843e:	f040 81b4 	bne.w	80087aa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	429a      	cmp	r2, r3
 800845c:	d917      	bls.n	800848e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800845e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800846e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800847e:	1ad2      	subs	r2, r2, r3
 8008480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	619a      	str	r2, [r3, #24]
 800848c:	e00e      	b.n	80084ac <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800848e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800849e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2200      	movs	r2, #0
 80084aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80084ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f040 8085 	bne.w	80085c8 <USB_EPStartXfer+0x14fc>
 80084be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084da:	b29b      	uxth	r3, r3
 80084dc:	461a      	mov	r2, r3
 80084de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084e2:	4413      	add	r3, r2
 80084e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	011a      	lsls	r2, r3, #4
 80084f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80084fa:	4413      	add	r3, r2
 80084fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008500:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	b29b      	uxth	r3, r3
 800850c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008510:	b29a      	uxth	r2, r3
 8008512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851c:	2b3e      	cmp	r3, #62	@ 0x3e
 800851e:	d923      	bls.n	8008568 <USB_EPStartXfer+0x149c>
 8008520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008524:	095b      	lsrs	r3, r3, #5
 8008526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800852a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852e:	f003 031f 	and.w	r3, r3, #31
 8008532:	2b00      	cmp	r3, #0
 8008534:	d104      	bne.n	8008540 <USB_EPStartXfer+0x1474>
 8008536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800853a:	3b01      	subs	r3, #1
 800853c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008540:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29a      	uxth	r2, r3
 8008548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800854c:	b29b      	uxth	r3, r3
 800854e:	029b      	lsls	r3, r3, #10
 8008550:	b29b      	uxth	r3, r3
 8008552:	4313      	orrs	r3, r2
 8008554:	b29b      	uxth	r3, r3
 8008556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800855a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800855e:	b29a      	uxth	r2, r3
 8008560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008564:	801a      	strh	r2, [r3, #0]
 8008566:	e060      	b.n	800862a <USB_EPStartXfer+0x155e>
 8008568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10c      	bne.n	800858a <USB_EPStartXfer+0x14be>
 8008570:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800857c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008580:	b29a      	uxth	r2, r3
 8008582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	e04f      	b.n	800862a <USB_EPStartXfer+0x155e>
 800858a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858e:	085b      	lsrs	r3, r3, #1
 8008590:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	d004      	beq.n	80085aa <USB_EPStartXfer+0x14de>
 80085a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085a4:	3301      	adds	r3, #1
 80085a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	029b      	lsls	r3, r3, #10
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	4313      	orrs	r3, r2
 80085be:	b29a      	uxth	r2, r3
 80085c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085c4:	801a      	strh	r2, [r3, #0]
 80085c6:	e030      	b.n	800862a <USB_EPStartXfer+0x155e>
 80085c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d128      	bne.n	800862a <USB_EPStartXfer+0x155e>
 80085d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	461a      	mov	r2, r3
 80085f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80085fc:	4413      	add	r3, r2
 80085fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	011a      	lsls	r2, r3, #4
 8008610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008614:	4413      	add	r3, r2
 8008616:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800861a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800861e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008622:	b29a      	uxth	r2, r3
 8008624:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008628:	801a      	strh	r2, [r3, #0]
 800862a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800863c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	785b      	ldrb	r3, [r3, #1]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f040 8085 	bne.w	8008754 <USB_EPStartXfer+0x1688>
 800864a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800864e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800865c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008666:	b29b      	uxth	r3, r3
 8008668:	461a      	mov	r2, r3
 800866a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800866e:	4413      	add	r3, r2
 8008670:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	011a      	lsls	r2, r3, #4
 8008682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008686:	4413      	add	r3, r2
 8008688:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800868c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008690:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800869c:	b29a      	uxth	r2, r3
 800869e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086a2:	801a      	strh	r2, [r3, #0]
 80086a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80086aa:	d923      	bls.n	80086f4 <USB_EPStartXfer+0x1628>
 80086ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b0:	095b      	lsrs	r3, r3, #5
 80086b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ba:	f003 031f 	and.w	r3, r3, #31
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d104      	bne.n	80086cc <USB_EPStartXfer+0x1600>
 80086c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086c6:	3b01      	subs	r3, #1
 80086c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086d8:	b29b      	uxth	r3, r3
 80086da:	029b      	lsls	r3, r3, #10
 80086dc:	b29b      	uxth	r3, r3
 80086de:	4313      	orrs	r3, r2
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086f0:	801a      	strh	r2, [r3, #0]
 80086f2:	e05c      	b.n	80087ae <USB_EPStartXfer+0x16e2>
 80086f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10c      	bne.n	8008716 <USB_EPStartXfer+0x164a>
 80086fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	b29b      	uxth	r3, r3
 8008704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800870c:	b29a      	uxth	r2, r3
 800870e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008712:	801a      	strh	r2, [r3, #0]
 8008714:	e04b      	b.n	80087ae <USB_EPStartXfer+0x16e2>
 8008716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800871a:	085b      	lsrs	r3, r3, #1
 800871c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	d004      	beq.n	8008736 <USB_EPStartXfer+0x166a>
 800872c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008730:	3301      	adds	r3, #1
 8008732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	b29a      	uxth	r2, r3
 800873e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008742:	b29b      	uxth	r3, r3
 8008744:	029b      	lsls	r3, r3, #10
 8008746:	b29b      	uxth	r3, r3
 8008748:	4313      	orrs	r3, r2
 800874a:	b29a      	uxth	r2, r3
 800874c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008750:	801a      	strh	r2, [r3, #0]
 8008752:	e02c      	b.n	80087ae <USB_EPStartXfer+0x16e2>
 8008754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d124      	bne.n	80087ae <USB_EPStartXfer+0x16e2>
 8008764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008772:	b29b      	uxth	r3, r3
 8008774:	461a      	mov	r2, r3
 8008776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800877a:	4413      	add	r3, r2
 800877c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	011a      	lsls	r2, r3, #4
 800878e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008792:	4413      	add	r3, r2
 8008794:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008798:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800879c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	e001      	b.n	80087ae <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e03a      	b.n	8008824 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80087e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80087ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	441a      	add	r2, r3
 800880a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800880e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800881a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800881e:	b29b      	uxth	r3, r3
 8008820:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800882e:	b480      	push	{r7}
 8008830:	b085      	sub	sp, #20
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d020      	beq.n	8008882 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	b29b      	uxth	r3, r3
 800884e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008856:	81bb      	strh	r3, [r7, #12]
 8008858:	89bb      	ldrh	r3, [r7, #12]
 800885a:	f083 0310 	eor.w	r3, r3, #16
 800885e:	81bb      	strh	r3, [r7, #12]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	441a      	add	r2, r3
 800886a:	89bb      	ldrh	r3, [r7, #12]
 800886c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800887c:	b29b      	uxth	r3, r3
 800887e:	8013      	strh	r3, [r2, #0]
 8008880:	e01f      	b.n	80088c2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008898:	81fb      	strh	r3, [r7, #14]
 800889a:	89fb      	ldrh	r3, [r7, #14]
 800889c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80088a0:	81fb      	strh	r3, [r7, #14]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	441a      	add	r2, r3
 80088ac:	89fb      	ldrh	r3, [r7, #14]
 80088ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088be:	b29b      	uxth	r3, r3
 80088c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bc80      	pop	{r7}
 80088cc:	4770      	bx	lr

080088ce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b087      	sub	sp, #28
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	7b1b      	ldrb	r3, [r3, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f040 809d 	bne.w	8008a1c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	785b      	ldrb	r3, [r3, #1]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d04c      	beq.n	8008984 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	823b      	strh	r3, [r7, #16]
 80088f8:	8a3b      	ldrh	r3, [r7, #16]
 80088fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01b      	beq.n	800893a <USB_EPClearStall+0x6c>
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	b29b      	uxth	r3, r3
 8008910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008918:	81fb      	strh	r3, [r7, #14]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	441a      	add	r2, r3
 8008924:	89fb      	ldrh	r3, [r7, #14]
 8008926:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800892a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800892e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008932:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008936:	b29b      	uxth	r3, r3
 8008938:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	78db      	ldrb	r3, [r3, #3]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d06c      	beq.n	8008a1c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	b29b      	uxth	r3, r3
 8008950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008958:	81bb      	strh	r3, [r7, #12]
 800895a:	89bb      	ldrh	r3, [r7, #12]
 800895c:	f083 0320 	eor.w	r3, r3, #32
 8008960:	81bb      	strh	r3, [r7, #12]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	441a      	add	r2, r3
 800896c:	89bb      	ldrh	r3, [r7, #12]
 800896e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800897a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800897e:	b29b      	uxth	r3, r3
 8008980:	8013      	strh	r3, [r2, #0]
 8008982:	e04b      	b.n	8008a1c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	82fb      	strh	r3, [r7, #22]
 8008992:	8afb      	ldrh	r3, [r7, #22]
 8008994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01b      	beq.n	80089d4 <USB_EPClearStall+0x106>
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089b2:	82bb      	strh	r3, [r7, #20]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	441a      	add	r2, r3
 80089be:	8abb      	ldrh	r3, [r7, #20]
 80089c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ea:	827b      	strh	r3, [r7, #18]
 80089ec:	8a7b      	ldrh	r3, [r7, #18]
 80089ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089f2:	827b      	strh	r3, [r7, #18]
 80089f4:	8a7b      	ldrh	r3, [r7, #18]
 80089f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80089fa:	827b      	strh	r3, [r7, #18]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	441a      	add	r2, r3
 8008a06:	8a7b      	ldrh	r3, [r7, #18]
 8008a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	371c      	adds	r7, #28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bc80      	pop	{r7}
 8008a26:	4770      	bx	lr

08008a28 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d103      	bne.n	8008a42 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2280      	movs	r2, #128	@ 0x80
 8008a3e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bc80      	pop	{r7}
 8008a4c:	4770      	bx	lr

08008a4e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr

08008a62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bc80      	pop	{r7}
 8008a74:	4770      	bx	lr

08008a76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b085      	sub	sp, #20
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a88:	68fb      	ldr	r3, [r7, #12]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bc80      	pop	{r7}
 8008a92:	4770      	bx	lr

08008a94 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr

08008aaa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b08b      	sub	sp, #44	@ 0x2c
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	460b      	mov	r3, r1
 8008aba:	80fb      	strh	r3, [r7, #6]
 8008abc:	4613      	mov	r3, r2
 8008abe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ac0:	88bb      	ldrh	r3, [r7, #4]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	085b      	lsrs	r3, r3, #1
 8008ac6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	005a      	lsls	r2, r3, #1
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008adc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ae2:	e01f      	b.n	8008b24 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	3301      	adds	r3, #1
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	b21b      	sxth	r3, r3
 8008af2:	021b      	lsls	r3, r3, #8
 8008af4:	b21a      	sxth	r2, r3
 8008af6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	b21b      	sxth	r3, r3
 8008afe:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	8a7a      	ldrh	r2, [r7, #18]
 8008b04:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	3302      	adds	r3, #2
 8008b0a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	3302      	adds	r3, #2
 8008b10:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	3301      	adds	r3, #1
 8008b16:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b20:	3b01      	subs	r3, #1
 8008b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1dc      	bne.n	8008ae4 <USB_WritePMA+0x3a>
  }
}
 8008b2a:	bf00      	nop
 8008b2c:	bf00      	nop
 8008b2e:	372c      	adds	r7, #44	@ 0x2c
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr

08008b36 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b08b      	sub	sp, #44	@ 0x2c
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	60b9      	str	r1, [r7, #8]
 8008b40:	4611      	mov	r1, r2
 8008b42:	461a      	mov	r2, r3
 8008b44:	460b      	mov	r3, r1
 8008b46:	80fb      	strh	r3, [r7, #6]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008b4c:	88bb      	ldrh	r3, [r7, #4]
 8008b4e:	085b      	lsrs	r3, r3, #1
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b5c:	88fb      	ldrh	r3, [r7, #6]
 8008b5e:	005a      	lsls	r2, r3, #1
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b68:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b6e:	e01b      	b.n	8008ba8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	3302      	adds	r3, #2
 8008b7c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	0a1b      	lsrs	r3, r3, #8
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	3302      	adds	r3, #2
 8008ba0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e0      	bne.n	8008b70 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008bae:	88bb      	ldrh	r3, [r7, #4]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d007      	beq.n	8008bca <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	701a      	strb	r2, [r3, #0]
  }
}
 8008bca:	bf00      	nop
 8008bcc:	372c      	adds	r7, #44	@ 0x2c
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr

08008bd4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	7c1b      	ldrb	r3, [r3, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d115      	bne.n	8008c18 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	2181      	movs	r1, #129	@ 0x81
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f001 fe90 	bl	800a91a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c04:	2202      	movs	r2, #2
 8008c06:	2101      	movs	r1, #1
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 fe86 	bl	800a91a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008c16:	e012      	b.n	8008c3e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c18:	2340      	movs	r3, #64	@ 0x40
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	2181      	movs	r1, #129	@ 0x81
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f001 fe7b 	bl	800a91a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c2a:	2340      	movs	r3, #64	@ 0x40
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	2101      	movs	r1, #1
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f001 fe72 	bl	800a91a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c3e:	2308      	movs	r3, #8
 8008c40:	2203      	movs	r2, #3
 8008c42:	2182      	movs	r1, #130	@ 0x82
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f001 fe68 	bl	800a91a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c50:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008c54:	f001 ff88 	bl	800ab68 <USBD_static_malloc>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	73fb      	strb	r3, [r7, #15]
 8008c6e:	e026      	b.n	8008cbe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c76:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7c1b      	ldrb	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d109      	bne.n	8008cae <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ca0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 ff27 	bl	800aafa <USBD_LL_PrepareReceive>
 8008cac:	e007      	b.n	8008cbe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008cb4:	2340      	movs	r3, #64	@ 0x40
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 ff1e 	bl	800aafa <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008cd8:	2181      	movs	r1, #129	@ 0x81
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 fe43 	bl	800a966 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 fe3c 	bl	800a966 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008cf6:	2182      	movs	r1, #130	@ 0x82
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 fe34 	bl	800a966 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00e      	beq.n	8008d2c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f001 ff2e 	bl	800ab80 <USBD_static_free>
    pdev->pClassData = NULL;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b086      	sub	sp, #24
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d46:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d039      	beq.n	8008dd4 <USBD_CDC_Setup+0x9e>
 8008d60:	2b20      	cmp	r3, #32
 8008d62:	d17f      	bne.n	8008e64 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	88db      	ldrh	r3, [r3, #6]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d029      	beq.n	8008dc0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	b25b      	sxtb	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	da11      	bge.n	8008d9a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008d82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	88d2      	ldrh	r2, [r2, #6]
 8008d88:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d8a:	6939      	ldr	r1, [r7, #16]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	88db      	ldrh	r3, [r3, #6]
 8008d90:	461a      	mov	r2, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 fa06 	bl	800a1a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008d98:	e06b      	b.n	8008e72 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	785a      	ldrb	r2, [r3, #1]
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	88db      	ldrh	r3, [r3, #6]
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008db0:	6939      	ldr	r1, [r7, #16]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	88db      	ldrh	r3, [r3, #6]
 8008db6:	461a      	mov	r2, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 fa21 	bl	800a200 <USBD_CtlPrepareRx>
      break;
 8008dbe:	e058      	b.n	8008e72 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	7850      	ldrb	r0, [r2, #1]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	4798      	blx	r3
      break;
 8008dd2:	e04e      	b.n	8008e72 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	785b      	ldrb	r3, [r3, #1]
 8008dd8:	2b0b      	cmp	r3, #11
 8008dda:	d02e      	beq.n	8008e3a <USBD_CDC_Setup+0x104>
 8008ddc:	2b0b      	cmp	r3, #11
 8008dde:	dc38      	bgt.n	8008e52 <USBD_CDC_Setup+0x11c>
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <USBD_CDC_Setup+0xb4>
 8008de4:	2b0a      	cmp	r3, #10
 8008de6:	d014      	beq.n	8008e12 <USBD_CDC_Setup+0xdc>
 8008de8:	e033      	b.n	8008e52 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008df0:	2b03      	cmp	r3, #3
 8008df2:	d107      	bne.n	8008e04 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008df4:	f107 030c 	add.w	r3, r7, #12
 8008df8:	2202      	movs	r2, #2
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f001 f9d1 	bl	800a1a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e02:	e02e      	b.n	8008e62 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f001 f962 	bl	800a0d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	75fb      	strb	r3, [r7, #23]
          break;
 8008e10:	e027      	b.n	8008e62 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d107      	bne.n	8008e2c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e1c:	f107 030f 	add.w	r3, r7, #15
 8008e20:	2201      	movs	r2, #1
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 f9bd 	bl	800a1a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e2a:	e01a      	b.n	8008e62 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f001 f94e 	bl	800a0d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e34:	2302      	movs	r3, #2
 8008e36:	75fb      	strb	r3, [r7, #23]
          break;
 8008e38:	e013      	b.n	8008e62 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d00d      	beq.n	8008e60 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 f942 	bl	800a0d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e50:	e006      	b.n	8008e60 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 f93b 	bl	800a0d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e5e:	e000      	b.n	8008e62 <USBD_CDC_Setup+0x12c>
          break;
 8008e60:	bf00      	nop
      }
      break;
 8008e62:	e006      	b.n	8008e72 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f001 f932 	bl	800a0d0 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e70:	bf00      	nop
  }

  return ret;
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3718      	adds	r7, #24
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e8e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008e96:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d03a      	beq.n	8008f18 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	440b      	add	r3, r1
 8008eb0:	331c      	adds	r3, #28
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d029      	beq.n	8008f0c <USBD_CDC_DataIn+0x90>
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	331c      	adds	r3, #28
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	78f9      	ldrb	r1, [r7, #3]
 8008ecc:	68b8      	ldr	r0, [r7, #8]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	440b      	add	r3, r1
 8008ed4:	00db      	lsls	r3, r3, #3
 8008ed6:	4403      	add	r3, r0
 8008ed8:	3320      	adds	r3, #32
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ee0:	fb01 f303 	mul.w	r3, r1, r3
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d110      	bne.n	8008f0c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008eea:	78fa      	ldrb	r2, [r7, #3]
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	331c      	adds	r3, #28
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008efe:	78f9      	ldrb	r1, [r7, #3]
 8008f00:	2300      	movs	r3, #0
 8008f02:	2200      	movs	r2, #0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 fdd5 	bl	800aab4 <USBD_LL_Transmit>
 8008f0a:	e003      	b.n	8008f14 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	e000      	b.n	8008f1a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008f18:	2302      	movs	r3, #2
  }
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f34:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 fe00 	bl	800ab40 <USBD_LL_GetRxDataSize>
 8008f40:	4602      	mov	r2, r0
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00d      	beq.n	8008f6e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008f66:	4611      	mov	r1, r2
 8008f68:	4798      	blx	r3

    return USBD_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e000      	b.n	8008f70 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008f6e:	2302      	movs	r3, #2
  }
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f86:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d014      	beq.n	8008fbc <USBD_CDC_EP0_RxReady+0x44>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f98:	2bff      	cmp	r3, #255	@ 0xff
 8008f9a:	d00f      	beq.n	8008fbc <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008faa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	22ff      	movs	r2, #255	@ 0xff
 8008fb8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
	...

08008fc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2243      	movs	r2, #67	@ 0x43
 8008fd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008fd6:	4b03      	ldr	r3, [pc, #12]	@ (8008fe4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bc80      	pop	{r7}
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	200000b8 	.word	0x200000b8

08008fe8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2243      	movs	r2, #67	@ 0x43
 8008ff4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	@ (8009004 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20000074 	.word	0x20000074

08009008 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2243      	movs	r2, #67	@ 0x43
 8009014:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009016:	4b03      	ldr	r3, [pc, #12]	@ (8009024 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	200000fc 	.word	0x200000fc

08009028 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	220a      	movs	r2, #10
 8009034:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009036:	4b03      	ldr	r3, [pc, #12]	@ (8009044 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	20000030 	.word	0x20000030

08009048 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009052:	2302      	movs	r3, #2
 8009054:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009068:	7bfb      	ldrb	r3, [r7, #15]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	bc80      	pop	{r7}
 8009072:	4770      	bx	lr

08009074 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	4613      	mov	r3, r2
 8009080:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009088:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009092:	88fa      	ldrh	r2, [r7, #6]
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	371c      	adds	r7, #28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bc80      	pop	{r7}
 80090a4:	4770      	bx	lr

080090a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090b6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bc80      	pop	{r7}
 80090ca:	4770      	bx	lr

080090cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d01c      	beq.n	8009120 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d115      	bne.n	800911c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800910e:	b29b      	uxth	r3, r3
 8009110:	2181      	movs	r1, #129	@ 0x81
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f001 fcce 	bl	800aab4 <USBD_LL_Transmit>

      return USBD_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	e002      	b.n	8009122 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800911c:	2301      	movs	r3, #1
 800911e:	e000      	b.n	8009122 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009120:	2302      	movs	r3, #2
  }
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009138:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009140:	2b00      	cmp	r3, #0
 8009142:	d017      	beq.n	8009174 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	7c1b      	ldrb	r3, [r3, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009152:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009156:	2101      	movs	r1, #1
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 fcce 	bl	800aafa <USBD_LL_PrepareReceive>
 800915e:	e007      	b.n	8009170 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009166:	2340      	movs	r3, #64	@ 0x40
 8009168:	2101      	movs	r1, #1
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 fcc5 	bl	800aafa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	e000      	b.n	8009176 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009174:	2302      	movs	r3, #2
  }
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	4613      	mov	r3, r2
 800918a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009192:	2302      	movs	r3, #2
 8009194:	e01a      	b.n	80091cc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	79fa      	ldrb	r2, [r7, #7]
 80091c2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f001 fb33 	bl	800a830 <USBD_LL_Init>

  return USBD_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d006      	beq.n	80091f6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
 80091f4:	e001      	b.n	80091fa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80091f6:	2302      	movs	r3, #2
 80091f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3714      	adds	r7, #20
 8009200:	46bd      	mov	sp, r7
 8009202:	bc80      	pop	{r7}
 8009204:	4770      	bx	lr

08009206 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 fb68 	bl	800a8e4 <USBD_LL_Start>

  return USBD_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	bc80      	pop	{r7}
 8009230:	4770      	bx	lr

08009232 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800923e:	2302      	movs	r3, #2
 8009240:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00c      	beq.n	8009266 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	78fa      	ldrb	r2, [r7, #3]
 8009256:	4611      	mov	r1, r2
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	4798      	blx	r3
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009266:	7bfb      	ldrb	r3, [r7, #15]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	78fa      	ldrb	r2, [r7, #3]
 8009286:	4611      	mov	r1, r2
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3

  return USBD_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b082      	sub	sp, #8
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 fed8 	bl	800a05e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80092bc:	461a      	mov	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80092ca:	f003 031f 	and.w	r3, r3, #31
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d016      	beq.n	8009300 <USBD_LL_SetupStage+0x6a>
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d81c      	bhi.n	8009310 <USBD_LL_SetupStage+0x7a>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <USBD_LL_SetupStage+0x4a>
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d008      	beq.n	80092f0 <USBD_LL_SetupStage+0x5a>
 80092de:	e017      	b.n	8009310 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f9cb 	bl	8009684 <USBD_StdDevReq>
      break;
 80092ee:	e01a      	b.n	8009326 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fa2d 	bl	8009758 <USBD_StdItfReq>
      break;
 80092fe:	e012      	b.n	8009326 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fa6d 	bl	80097e8 <USBD_StdEPReq>
      break;
 800930e:	e00a      	b.n	8009326 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009316:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800931a:	b2db      	uxtb	r3, r3
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 fb40 	bl	800a9a4 <USBD_LL_StallEP>
      break;
 8009324:	bf00      	nop
  }

  return USBD_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	460b      	mov	r3, r1
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d14b      	bne.n	80093dc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800934a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009352:	2b03      	cmp	r3, #3
 8009354:	d134      	bne.n	80093c0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	68da      	ldr	r2, [r3, #12]
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	429a      	cmp	r2, r3
 8009360:	d919      	bls.n	8009396 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	68da      	ldr	r2, [r3, #12]
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	1ad2      	subs	r2, r2, r3
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	68da      	ldr	r2, [r3, #12]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009378:	429a      	cmp	r2, r3
 800937a:	d203      	bcs.n	8009384 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009380:	b29b      	uxth	r3, r3
 8009382:	e002      	b.n	800938a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009388:	b29b      	uxth	r3, r3
 800938a:	461a      	mov	r2, r3
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 ff54 	bl	800a23c <USBD_CtlContinueRx>
 8009394:	e038      	b.n	8009408 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80093a8:	2b03      	cmp	r3, #3
 80093aa:	d105      	bne.n	80093b8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f000 ff51 	bl	800a260 <USBD_CtlSendStatus>
 80093be:	e023      	b.n	8009408 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093c6:	2b05      	cmp	r3, #5
 80093c8:	d11e      	bne.n	8009408 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80093d2:	2100      	movs	r1, #0
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f001 fae5 	bl	800a9a4 <USBD_LL_StallEP>
 80093da:	e015      	b.n	8009408 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00d      	beq.n	8009404 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d108      	bne.n	8009404 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	7afa      	ldrb	r2, [r7, #11]
 80093fc:	4611      	mov	r1, r2
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	4798      	blx	r3
 8009402:	e001      	b.n	8009408 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009404:	2302      	movs	r3, #2
 8009406:	e000      	b.n	800940a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b086      	sub	sp, #24
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	460b      	mov	r3, r1
 800941c:	607a      	str	r2, [r7, #4]
 800941e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009420:	7afb      	ldrb	r3, [r7, #11]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d17f      	bne.n	8009526 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3314      	adds	r3, #20
 800942a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009432:	2b02      	cmp	r3, #2
 8009434:	d15c      	bne.n	80094f0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	429a      	cmp	r2, r3
 8009440:	d915      	bls.n	800946e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	68da      	ldr	r2, [r3, #12]
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	1ad2      	subs	r2, r2, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	b29b      	uxth	r3, r3
 8009456:	461a      	mov	r2, r3
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 febe 	bl	800a1dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009460:	2300      	movs	r3, #0
 8009462:	2200      	movs	r2, #0
 8009464:	2100      	movs	r1, #0
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f001 fb47 	bl	800aafa <USBD_LL_PrepareReceive>
 800946c:	e04e      	b.n	800950c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	6912      	ldr	r2, [r2, #16]
 8009476:	fbb3 f1f2 	udiv	r1, r3, r2
 800947a:	fb01 f202 	mul.w	r2, r1, r2
 800947e:	1a9b      	subs	r3, r3, r2
 8009480:	2b00      	cmp	r3, #0
 8009482:	d11c      	bne.n	80094be <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800948c:	429a      	cmp	r2, r3
 800948e:	d316      	bcc.n	80094be <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800949a:	429a      	cmp	r2, r3
 800949c:	d20f      	bcs.n	80094be <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800949e:	2200      	movs	r2, #0
 80094a0:	2100      	movs	r1, #0
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fe9a 	bl	800a1dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094b0:	2300      	movs	r3, #0
 80094b2:	2200      	movs	r2, #0
 80094b4:	2100      	movs	r1, #0
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f001 fb1f 	bl	800aafa <USBD_LL_PrepareReceive>
 80094bc:	e026      	b.n	800950c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00a      	beq.n	80094e0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d105      	bne.n	80094e0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80094e0:	2180      	movs	r1, #128	@ 0x80
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f001 fa5e 	bl	800a9a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 fecc 	bl	800a286 <USBD_CtlReceiveStatus>
 80094ee:	e00d      	b.n	800950c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d004      	beq.n	8009504 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009500:	2b00      	cmp	r3, #0
 8009502:	d103      	bne.n	800950c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009504:	2180      	movs	r1, #128	@ 0x80
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f001 fa4c 	bl	800a9a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009512:	2b01      	cmp	r3, #1
 8009514:	d11d      	bne.n	8009552 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f7ff fe81 	bl	800921e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009524:	e015      	b.n	8009552 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00d      	beq.n	800954e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009538:	2b03      	cmp	r3, #3
 800953a:	d108      	bne.n	800954e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	7afa      	ldrb	r2, [r7, #11]
 8009546:	4611      	mov	r1, r2
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	4798      	blx	r3
 800954c:	e001      	b.n	8009552 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800954e:	2302      	movs	r3, #2
 8009550:	e000      	b.n	8009554 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009564:	2340      	movs	r3, #64	@ 0x40
 8009566:	2200      	movs	r2, #0
 8009568:	2100      	movs	r1, #0
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f001 f9d5 	bl	800a91a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2240      	movs	r2, #64	@ 0x40
 800957c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009580:	2340      	movs	r3, #64	@ 0x40
 8009582:	2200      	movs	r2, #0
 8009584:	2180      	movs	r1, #128	@ 0x80
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 f9c7 	bl	800a91a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2240      	movs	r2, #64	@ 0x40
 8009596:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d009      	beq.n	80095d4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6852      	ldr	r2, [r2, #4]
 80095cc:	b2d2      	uxtb	r2, r2
 80095ce:	4611      	mov	r1, r2
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	4798      	blx	r3
  }

  return USBD_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	460b      	mov	r3, r1
 80095e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	78fa      	ldrb	r2, [r7, #3]
 80095ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bc80      	pop	{r7}
 80095fa:	4770      	bx	lr

080095fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2204      	movs	r2, #4
 8009614:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	bc80      	pop	{r7}
 8009622:	4770      	bx	lr

08009624 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009632:	2b04      	cmp	r3, #4
 8009634:	d105      	bne.n	8009642 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	bc80      	pop	{r7}
 800964c:	4770      	bx	lr

0800964e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800965c:	2b03      	cmp	r3, #3
 800965e:	d10b      	bne.n	8009678 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d005      	beq.n	8009678 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800969a:	2b40      	cmp	r3, #64	@ 0x40
 800969c:	d005      	beq.n	80096aa <USBD_StdDevReq+0x26>
 800969e:	2b40      	cmp	r3, #64	@ 0x40
 80096a0:	d84f      	bhi.n	8009742 <USBD_StdDevReq+0xbe>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d009      	beq.n	80096ba <USBD_StdDevReq+0x36>
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	d14b      	bne.n	8009742 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	4798      	blx	r3
      break;
 80096b8:	e048      	b.n	800974c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	785b      	ldrb	r3, [r3, #1]
 80096be:	2b09      	cmp	r3, #9
 80096c0:	d839      	bhi.n	8009736 <USBD_StdDevReq+0xb2>
 80096c2:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <USBD_StdDevReq+0x44>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	08009719 	.word	0x08009719
 80096cc:	0800972d 	.word	0x0800972d
 80096d0:	08009737 	.word	0x08009737
 80096d4:	08009723 	.word	0x08009723
 80096d8:	08009737 	.word	0x08009737
 80096dc:	080096fb 	.word	0x080096fb
 80096e0:	080096f1 	.word	0x080096f1
 80096e4:	08009737 	.word	0x08009737
 80096e8:	0800970f 	.word	0x0800970f
 80096ec:	08009705 	.word	0x08009705
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f9dc 	bl	8009ab0 <USBD_GetDescriptor>
          break;
 80096f8:	e022      	b.n	8009740 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fb3f 	bl	8009d80 <USBD_SetAddress>
          break;
 8009702:	e01d      	b.n	8009740 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fb7e 	bl	8009e08 <USBD_SetConfig>
          break;
 800970c:	e018      	b.n	8009740 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fc07 	bl	8009f24 <USBD_GetConfig>
          break;
 8009716:	e013      	b.n	8009740 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fc37 	bl	8009f8e <USBD_GetStatus>
          break;
 8009720:	e00e      	b.n	8009740 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fc65 	bl	8009ff4 <USBD_SetFeature>
          break;
 800972a:	e009      	b.n	8009740 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fc74 	bl	800a01c <USBD_ClrFeature>
          break;
 8009734:	e004      	b.n	8009740 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fcc9 	bl	800a0d0 <USBD_CtlError>
          break;
 800973e:	bf00      	nop
      }
      break;
 8009740:	e004      	b.n	800974c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fcc3 	bl	800a0d0 <USBD_CtlError>
      break;
 800974a:	bf00      	nop
  }

  return ret;
 800974c:	7bfb      	ldrb	r3, [r7, #15]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop

08009758 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800976e:	2b40      	cmp	r3, #64	@ 0x40
 8009770:	d005      	beq.n	800977e <USBD_StdItfReq+0x26>
 8009772:	2b40      	cmp	r3, #64	@ 0x40
 8009774:	d82e      	bhi.n	80097d4 <USBD_StdItfReq+0x7c>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <USBD_StdItfReq+0x26>
 800977a:	2b20      	cmp	r3, #32
 800977c:	d12a      	bne.n	80097d4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009784:	3b01      	subs	r3, #1
 8009786:	2b02      	cmp	r3, #2
 8009788:	d81d      	bhi.n	80097c6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	889b      	ldrh	r3, [r3, #4]
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b01      	cmp	r3, #1
 8009792:	d813      	bhi.n	80097bc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	4798      	blx	r3
 80097a2:	4603      	mov	r3, r0
 80097a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	88db      	ldrh	r3, [r3, #6]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d110      	bne.n	80097d0 <USBD_StdItfReq+0x78>
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10d      	bne.n	80097d0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fd53 	bl	800a260 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097ba:	e009      	b.n	80097d0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fc86 	bl	800a0d0 <USBD_CtlError>
          break;
 80097c4:	e004      	b.n	80097d0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fc81 	bl	800a0d0 <USBD_CtlError>
          break;
 80097ce:	e000      	b.n	80097d2 <USBD_StdItfReq+0x7a>
          break;
 80097d0:	bf00      	nop
      }
      break;
 80097d2:	e004      	b.n	80097de <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fc7a 	bl	800a0d0 <USBD_CtlError>
      break;
 80097dc:	bf00      	nop
  }

  return USBD_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	889b      	ldrh	r3, [r3, #4]
 80097fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009804:	2b40      	cmp	r3, #64	@ 0x40
 8009806:	d007      	beq.n	8009818 <USBD_StdEPReq+0x30>
 8009808:	2b40      	cmp	r3, #64	@ 0x40
 800980a:	f200 8146 	bhi.w	8009a9a <USBD_StdEPReq+0x2b2>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <USBD_StdEPReq+0x40>
 8009812:	2b20      	cmp	r3, #32
 8009814:	f040 8141 	bne.w	8009a9a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	4798      	blx	r3
      break;
 8009826:	e13d      	b.n	8009aa4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009830:	2b20      	cmp	r3, #32
 8009832:	d10a      	bne.n	800984a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	4798      	blx	r3
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	e12d      	b.n	8009aa6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	785b      	ldrb	r3, [r3, #1]
 800984e:	2b03      	cmp	r3, #3
 8009850:	d007      	beq.n	8009862 <USBD_StdEPReq+0x7a>
 8009852:	2b03      	cmp	r3, #3
 8009854:	f300 811b 	bgt.w	8009a8e <USBD_StdEPReq+0x2a6>
 8009858:	2b00      	cmp	r3, #0
 800985a:	d072      	beq.n	8009942 <USBD_StdEPReq+0x15a>
 800985c:	2b01      	cmp	r3, #1
 800985e:	d03a      	beq.n	80098d6 <USBD_StdEPReq+0xee>
 8009860:	e115      	b.n	8009a8e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009868:	2b02      	cmp	r3, #2
 800986a:	d002      	beq.n	8009872 <USBD_StdEPReq+0x8a>
 800986c:	2b03      	cmp	r3, #3
 800986e:	d015      	beq.n	800989c <USBD_StdEPReq+0xb4>
 8009870:	e02b      	b.n	80098ca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00c      	beq.n	8009892 <USBD_StdEPReq+0xaa>
 8009878:	7bbb      	ldrb	r3, [r7, #14]
 800987a:	2b80      	cmp	r3, #128	@ 0x80
 800987c:	d009      	beq.n	8009892 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800987e:	7bbb      	ldrb	r3, [r7, #14]
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f001 f88e 	bl	800a9a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009888:	2180      	movs	r1, #128	@ 0x80
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 f88a 	bl	800a9a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009890:	e020      	b.n	80098d4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fc1b 	bl	800a0d0 <USBD_CtlError>
              break;
 800989a:	e01b      	b.n	80098d4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	885b      	ldrh	r3, [r3, #2]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10e      	bne.n	80098c2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00b      	beq.n	80098c2 <USBD_StdEPReq+0xda>
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	2b80      	cmp	r3, #128	@ 0x80
 80098ae:	d008      	beq.n	80098c2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	88db      	ldrh	r3, [r3, #6]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d104      	bne.n	80098c2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f001 f871 	bl	800a9a4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fccc 	bl	800a260 <USBD_CtlSendStatus>

              break;
 80098c8:	e004      	b.n	80098d4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fbff 	bl	800a0d0 <USBD_CtlError>
              break;
 80098d2:	bf00      	nop
          }
          break;
 80098d4:	e0e0      	b.n	8009a98 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d002      	beq.n	80098e6 <USBD_StdEPReq+0xfe>
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d015      	beq.n	8009910 <USBD_StdEPReq+0x128>
 80098e4:	e026      	b.n	8009934 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00c      	beq.n	8009906 <USBD_StdEPReq+0x11e>
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
 80098ee:	2b80      	cmp	r3, #128	@ 0x80
 80098f0:	d009      	beq.n	8009906 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f001 f854 	bl	800a9a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098fc:	2180      	movs	r1, #128	@ 0x80
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 f850 	bl	800a9a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009904:	e01c      	b.n	8009940 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fbe1 	bl	800a0d0 <USBD_CtlError>
              break;
 800990e:	e017      	b.n	8009940 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	885b      	ldrh	r3, [r3, #2]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d112      	bne.n	800993e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800991e:	2b00      	cmp	r3, #0
 8009920:	d004      	beq.n	800992c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f001 f85b 	bl	800a9e2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fc97 	bl	800a260 <USBD_CtlSendStatus>
              }
              break;
 8009932:	e004      	b.n	800993e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fbca 	bl	800a0d0 <USBD_CtlError>
              break;
 800993c:	e000      	b.n	8009940 <USBD_StdEPReq+0x158>
              break;
 800993e:	bf00      	nop
          }
          break;
 8009940:	e0aa      	b.n	8009a98 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009948:	2b02      	cmp	r3, #2
 800994a:	d002      	beq.n	8009952 <USBD_StdEPReq+0x16a>
 800994c:	2b03      	cmp	r3, #3
 800994e:	d032      	beq.n	80099b6 <USBD_StdEPReq+0x1ce>
 8009950:	e097      	b.n	8009a82 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d007      	beq.n	8009968 <USBD_StdEPReq+0x180>
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	2b80      	cmp	r3, #128	@ 0x80
 800995c:	d004      	beq.n	8009968 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fbb5 	bl	800a0d0 <USBD_CtlError>
                break;
 8009966:	e091      	b.n	8009a8c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800996c:	2b00      	cmp	r3, #0
 800996e:	da0b      	bge.n	8009988 <USBD_StdEPReq+0x1a0>
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	3310      	adds	r3, #16
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	4413      	add	r3, r2
 8009984:	3304      	adds	r3, #4
 8009986:	e00b      	b.n	80099a0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800998e:	4613      	mov	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	4413      	add	r3, r2
 800999e:	3304      	adds	r3, #4
 80099a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2202      	movs	r2, #2
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fbf8 	bl	800a1a4 <USBD_CtlSendData>
              break;
 80099b4:	e06a      	b.n	8009a8c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80099b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	da11      	bge.n	80099e2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	f003 020f 	and.w	r2, r3, #15
 80099c4:	6879      	ldr	r1, [r7, #4]
 80099c6:	4613      	mov	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	440b      	add	r3, r1
 80099d0:	3318      	adds	r3, #24
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d117      	bne.n	8009a08 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fb78 	bl	800a0d0 <USBD_CtlError>
                  break;
 80099e0:	e054      	b.n	8009a8c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	f003 020f 	and.w	r2, r3, #15
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d104      	bne.n	8009a08 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fb65 	bl	800a0d0 <USBD_CtlError>
                  break;
 8009a06:	e041      	b.n	8009a8c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	da0b      	bge.n	8009a28 <USBD_StdEPReq+0x240>
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
 8009a12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a16:	4613      	mov	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	3310      	adds	r3, #16
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	4413      	add	r3, r2
 8009a24:	3304      	adds	r3, #4
 8009a26:	e00b      	b.n	8009a40 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	3304      	adds	r3, #4
 8009a40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <USBD_StdEPReq+0x266>
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
 8009a4a:	2b80      	cmp	r3, #128	@ 0x80
 8009a4c:	d103      	bne.n	8009a56 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e00e      	b.n	8009a74 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 ffe0 	bl	800aa20 <USBD_LL_IsStallEP>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d003      	beq.n	8009a6e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	e002      	b.n	8009a74 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2200      	movs	r2, #0
 8009a72:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2202      	movs	r2, #2
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fb92 	bl	800a1a4 <USBD_CtlSendData>
              break;
 8009a80:	e004      	b.n	8009a8c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fb23 	bl	800a0d0 <USBD_CtlError>
              break;
 8009a8a:	bf00      	nop
          }
          break;
 8009a8c:	e004      	b.n	8009a98 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fb1d 	bl	800a0d0 <USBD_CtlError>
          break;
 8009a96:	bf00      	nop
      }
      break;
 8009a98:	e004      	b.n	8009aa4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fb17 	bl	800a0d0 <USBD_CtlError>
      break;
 8009aa2:	bf00      	nop
  }

  return ret;
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	885b      	ldrh	r3, [r3, #2]
 8009aca:	0a1b      	lsrs	r3, r3, #8
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	2b06      	cmp	r3, #6
 8009ad2:	f200 8128 	bhi.w	8009d26 <USBD_GetDescriptor+0x276>
 8009ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8009adc <USBD_GetDescriptor+0x2c>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009af9 	.word	0x08009af9
 8009ae0:	08009b11 	.word	0x08009b11
 8009ae4:	08009b51 	.word	0x08009b51
 8009ae8:	08009d27 	.word	0x08009d27
 8009aec:	08009d27 	.word	0x08009d27
 8009af0:	08009cc7 	.word	0x08009cc7
 8009af4:	08009cf3 	.word	0x08009cf3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	7c12      	ldrb	r2, [r2, #16]
 8009b04:	f107 0108 	add.w	r1, r7, #8
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4798      	blx	r3
 8009b0c:	60f8      	str	r0, [r7, #12]
      break;
 8009b0e:	e112      	b.n	8009d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7c1b      	ldrb	r3, [r3, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10d      	bne.n	8009b34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b20:	f107 0208 	add.w	r2, r7, #8
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
 8009b28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	2202      	movs	r2, #2
 8009b30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b32:	e100      	b.n	8009d36 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3c:	f107 0208 	add.w	r2, r7, #8
 8009b40:	4610      	mov	r0, r2
 8009b42:	4798      	blx	r3
 8009b44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	701a      	strb	r2, [r3, #0]
      break;
 8009b4e:	e0f2      	b.n	8009d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	885b      	ldrh	r3, [r3, #2]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b05      	cmp	r3, #5
 8009b58:	f200 80ac 	bhi.w	8009cb4 <USBD_GetDescriptor+0x204>
 8009b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b64 <USBD_GetDescriptor+0xb4>)
 8009b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b62:	bf00      	nop
 8009b64:	08009b7d 	.word	0x08009b7d
 8009b68:	08009bb1 	.word	0x08009bb1
 8009b6c:	08009be5 	.word	0x08009be5
 8009b70:	08009c19 	.word	0x08009c19
 8009b74:	08009c4d 	.word	0x08009c4d
 8009b78:	08009c81 	.word	0x08009c81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00b      	beq.n	8009ba0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	7c12      	ldrb	r2, [r2, #16]
 8009b94:	f107 0108 	add.w	r1, r7, #8
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4798      	blx	r3
 8009b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b9e:	e091      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fa94 	bl	800a0d0 <USBD_CtlError>
            err++;
 8009ba8:	7afb      	ldrb	r3, [r7, #11]
 8009baa:	3301      	adds	r3, #1
 8009bac:	72fb      	strb	r3, [r7, #11]
          break;
 8009bae:	e089      	b.n	8009cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00b      	beq.n	8009bd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	7c12      	ldrb	r2, [r2, #16]
 8009bc8:	f107 0108 	add.w	r1, r7, #8
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4798      	blx	r3
 8009bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bd2:	e077      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa7a 	bl	800a0d0 <USBD_CtlError>
            err++;
 8009bdc:	7afb      	ldrb	r3, [r7, #11]
 8009bde:	3301      	adds	r3, #1
 8009be0:	72fb      	strb	r3, [r7, #11]
          break;
 8009be2:	e06f      	b.n	8009cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00b      	beq.n	8009c08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	7c12      	ldrb	r2, [r2, #16]
 8009bfc:	f107 0108 	add.w	r1, r7, #8
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
 8009c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c06:	e05d      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fa60 	bl	800a0d0 <USBD_CtlError>
            err++;
 8009c10:	7afb      	ldrb	r3, [r7, #11]
 8009c12:	3301      	adds	r3, #1
 8009c14:	72fb      	strb	r3, [r7, #11]
          break;
 8009c16:	e055      	b.n	8009cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00b      	beq.n	8009c3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	7c12      	ldrb	r2, [r2, #16]
 8009c30:	f107 0108 	add.w	r1, r7, #8
 8009c34:	4610      	mov	r0, r2
 8009c36:	4798      	blx	r3
 8009c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c3a:	e043      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fa46 	bl	800a0d0 <USBD_CtlError>
            err++;
 8009c44:	7afb      	ldrb	r3, [r7, #11]
 8009c46:	3301      	adds	r3, #1
 8009c48:	72fb      	strb	r3, [r7, #11]
          break;
 8009c4a:	e03b      	b.n	8009cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00b      	beq.n	8009c70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	7c12      	ldrb	r2, [r2, #16]
 8009c64:	f107 0108 	add.w	r1, r7, #8
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4798      	blx	r3
 8009c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c6e:	e029      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa2c 	bl	800a0d0 <USBD_CtlError>
            err++;
 8009c78:	7afb      	ldrb	r3, [r7, #11]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c7e:	e021      	b.n	8009cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00b      	beq.n	8009ca4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	7c12      	ldrb	r2, [r2, #16]
 8009c98:	f107 0108 	add.w	r1, r7, #8
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	4798      	blx	r3
 8009ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ca2:	e00f      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fa12 	bl	800a0d0 <USBD_CtlError>
            err++;
 8009cac:	7afb      	ldrb	r3, [r7, #11]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8009cb2:	e007      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fa0a 	bl	800a0d0 <USBD_CtlError>
          err++;
 8009cbc:	7afb      	ldrb	r3, [r7, #11]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009cc2:	e038      	b.n	8009d36 <USBD_GetDescriptor+0x286>
 8009cc4:	e037      	b.n	8009d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	7c1b      	ldrb	r3, [r3, #16]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d109      	bne.n	8009ce2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cd6:	f107 0208 	add.w	r2, r7, #8
 8009cda:	4610      	mov	r0, r2
 8009cdc:	4798      	blx	r3
 8009cde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ce0:	e029      	b.n	8009d36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f9f3 	bl	800a0d0 <USBD_CtlError>
        err++;
 8009cea:	7afb      	ldrb	r3, [r7, #11]
 8009cec:	3301      	adds	r3, #1
 8009cee:	72fb      	strb	r3, [r7, #11]
      break;
 8009cf0:	e021      	b.n	8009d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	7c1b      	ldrb	r3, [r3, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10d      	bne.n	8009d16 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d02:	f107 0208 	add.w	r2, r7, #8
 8009d06:	4610      	mov	r0, r2
 8009d08:	4798      	blx	r3
 8009d0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	2207      	movs	r2, #7
 8009d12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d14:	e00f      	b.n	8009d36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f9d9 	bl	800a0d0 <USBD_CtlError>
        err++;
 8009d1e:	7afb      	ldrb	r3, [r7, #11]
 8009d20:	3301      	adds	r3, #1
 8009d22:	72fb      	strb	r3, [r7, #11]
      break;
 8009d24:	e007      	b.n	8009d36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f9d1 	bl	800a0d0 <USBD_CtlError>
      err++;
 8009d2e:	7afb      	ldrb	r3, [r7, #11]
 8009d30:	3301      	adds	r3, #1
 8009d32:	72fb      	strb	r3, [r7, #11]
      break;
 8009d34:	bf00      	nop
  }

  if (err != 0U)
 8009d36:	7afb      	ldrb	r3, [r7, #11]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d11c      	bne.n	8009d76 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009d3c:	893b      	ldrh	r3, [r7, #8]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d011      	beq.n	8009d66 <USBD_GetDescriptor+0x2b6>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	88db      	ldrh	r3, [r3, #6]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00d      	beq.n	8009d66 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	88da      	ldrh	r2, [r3, #6]
 8009d4e:	893b      	ldrh	r3, [r7, #8]
 8009d50:	4293      	cmp	r3, r2
 8009d52:	bf28      	it	cs
 8009d54:	4613      	movcs	r3, r2
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d5a:	893b      	ldrh	r3, [r7, #8]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	68f9      	ldr	r1, [r7, #12]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fa1f 	bl	800a1a4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	88db      	ldrh	r3, [r3, #6]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d104      	bne.n	8009d78 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fa76 	bl	800a260 <USBD_CtlSendStatus>
 8009d74:	e000      	b.n	8009d78 <USBD_GetDescriptor+0x2c8>
    return;
 8009d76:	bf00      	nop
    }
  }
}
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop

08009d80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	889b      	ldrh	r3, [r3, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d130      	bne.n	8009df4 <USBD_SetAddress+0x74>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	88db      	ldrh	r3, [r3, #6]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d12c      	bne.n	8009df4 <USBD_SetAddress+0x74>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	885b      	ldrh	r3, [r3, #2]
 8009d9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009da0:	d828      	bhi.n	8009df4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	885b      	ldrh	r3, [r3, #2]
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009db4:	2b03      	cmp	r3, #3
 8009db6:	d104      	bne.n	8009dc2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009db8:	6839      	ldr	r1, [r7, #0]
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f988 	bl	800a0d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc0:	e01d      	b.n	8009dfe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	7bfa      	ldrb	r2, [r7, #15]
 8009dc6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fe51 	bl	800aa76 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fa43 	bl	800a260 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d004      	beq.n	8009dea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2202      	movs	r2, #2
 8009de4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009de8:	e009      	b.n	8009dfe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df2:	e004      	b.n	8009dfe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f96a 	bl	800a0d0 <USBD_CtlError>
  }
}
 8009dfc:	bf00      	nop
 8009dfe:	bf00      	nop
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	885b      	ldrh	r3, [r3, #2]
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	4b41      	ldr	r3, [pc, #260]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009e1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e1c:	4b40      	ldr	r3, [pc, #256]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d904      	bls.n	8009e2e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f952 	bl	800a0d0 <USBD_CtlError>
 8009e2c:	e075      	b.n	8009f1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d002      	beq.n	8009e3e <USBD_SetConfig+0x36>
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d023      	beq.n	8009e84 <USBD_SetConfig+0x7c>
 8009e3c:	e062      	b.n	8009f04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009e3e:	4b38      	ldr	r3, [pc, #224]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d01a      	beq.n	8009e7c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009e46:	4b36      	ldr	r3, [pc, #216]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2203      	movs	r2, #3
 8009e54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e58:	4b31      	ldr	r3, [pc, #196]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f7ff f9e7 	bl	8009232 <USBD_SetClassConfig>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d104      	bne.n	8009e74 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f92f 	bl	800a0d0 <USBD_CtlError>
            return;
 8009e72:	e052      	b.n	8009f1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f9f3 	bl	800a260 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e7a:	e04e      	b.n	8009f1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f9ef 	bl	800a260 <USBD_CtlSendStatus>
        break;
 8009e82:	e04a      	b.n	8009f1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e84:	4b26      	ldr	r3, [pc, #152]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d112      	bne.n	8009eb2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009e94:	4b22      	ldr	r3, [pc, #136]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e9e:	4b20      	ldr	r3, [pc, #128]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7ff f9e3 	bl	8009270 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f9d8 	bl	800a260 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009eb0:	e033      	b.n	8009f1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d01d      	beq.n	8009efc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff f9d1 	bl	8009270 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009ece:	4b14      	ldr	r3, [pc, #80]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ed8:	4b11      	ldr	r3, [pc, #68]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	4619      	mov	r1, r3
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff f9a7 	bl	8009232 <USBD_SetClassConfig>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d104      	bne.n	8009ef4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f8ef 	bl	800a0d0 <USBD_CtlError>
            return;
 8009ef2:	e012      	b.n	8009f1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f9b3 	bl	800a260 <USBD_CtlSendStatus>
        break;
 8009efa:	e00e      	b.n	8009f1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f9af 	bl	800a260 <USBD_CtlSendStatus>
        break;
 8009f02:	e00a      	b.n	8009f1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f8e2 	bl	800a0d0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009f0c:	4b04      	ldr	r3, [pc, #16]	@ (8009f20 <USBD_SetConfig+0x118>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7ff f9ac 	bl	8009270 <USBD_ClrClassConfig>
        break;
 8009f18:	bf00      	nop
    }
  }
}
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20000414 	.word	0x20000414

08009f24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	88db      	ldrh	r3, [r3, #6]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d004      	beq.n	8009f40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f8c9 	bl	800a0d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f3e:	e022      	b.n	8009f86 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	dc02      	bgt.n	8009f50 <USBD_GetConfig+0x2c>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	dc03      	bgt.n	8009f56 <USBD_GetConfig+0x32>
 8009f4e:	e015      	b.n	8009f7c <USBD_GetConfig+0x58>
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d00b      	beq.n	8009f6c <USBD_GetConfig+0x48>
 8009f54:	e012      	b.n	8009f7c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3308      	adds	r3, #8
 8009f60:	2201      	movs	r2, #1
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f91d 	bl	800a1a4 <USBD_CtlSendData>
        break;
 8009f6a:	e00c      	b.n	8009f86 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	2201      	movs	r2, #1
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f915 	bl	800a1a4 <USBD_CtlSendData>
        break;
 8009f7a:	e004      	b.n	8009f86 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f8a6 	bl	800a0d0 <USBD_CtlError>
        break;
 8009f84:	bf00      	nop
}
 8009f86:	bf00      	nop
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d81e      	bhi.n	8009fe2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	88db      	ldrh	r3, [r3, #6]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d004      	beq.n	8009fb6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f88e 	bl	800a0d0 <USBD_CtlError>
        break;
 8009fb4:	e01a      	b.n	8009fec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d005      	beq.n	8009fd2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	f043 0202 	orr.w	r2, r3, #2
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	330c      	adds	r3, #12
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f8e2 	bl	800a1a4 <USBD_CtlSendData>
      break;
 8009fe0:	e004      	b.n	8009fec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f873 	bl	800a0d0 <USBD_CtlError>
      break;
 8009fea:	bf00      	nop
  }
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	885b      	ldrh	r3, [r3, #2]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d106      	bne.n	800a014 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f926 	bl	800a260 <USBD_CtlSendStatus>
  }
}
 800a014:	bf00      	nop
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a02c:	3b01      	subs	r3, #1
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d80b      	bhi.n	800a04a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	885b      	ldrh	r3, [r3, #2]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d10c      	bne.n	800a054 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f90c 	bl	800a260 <USBD_CtlSendStatus>
      }
      break;
 800a048:	e004      	b.n	800a054 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f83f 	bl	800a0d0 <USBD_CtlError>
      break;
 800a052:	e000      	b.n	800a056 <USBD_ClrFeature+0x3a>
      break;
 800a054:	bf00      	nop
  }
}
 800a056:	bf00      	nop
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a05e:	b480      	push	{r7}
 800a060:	b083      	sub	sp, #12
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781a      	ldrb	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	785a      	ldrb	r2, [r3, #1]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	3302      	adds	r3, #2
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	3303      	adds	r3, #3
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	021b      	lsls	r3, r3, #8
 800a088:	b29b      	uxth	r3, r3
 800a08a:	4413      	add	r3, r2
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	3304      	adds	r3, #4
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	461a      	mov	r2, r3
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	3305      	adds	r3, #5
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	021b      	lsls	r3, r3, #8
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4413      	add	r3, r2
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	3306      	adds	r3, #6
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	3307      	adds	r3, #7
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	021b      	lsls	r3, r3, #8
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	4413      	add	r3, r2
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	80da      	strh	r2, [r3, #6]

}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bc80      	pop	{r7}
 800a0ce:	4770      	bx	lr

0800a0d0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a0da:	2180      	movs	r1, #128	@ 0x80
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fc61 	bl	800a9a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fc5d 	bl	800a9a4 <USBD_LL_StallEP>
}
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b086      	sub	sp, #24
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	60f8      	str	r0, [r7, #12]
 800a0fa:	60b9      	str	r1, [r7, #8]
 800a0fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0fe:	2300      	movs	r3, #0
 800a100:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d032      	beq.n	800a16e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 f834 	bl	800a176 <USBD_GetLen>
 800a10e:	4603      	mov	r3, r0
 800a110:	3301      	adds	r3, #1
 800a112:	b29b      	uxth	r3, r3
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	75fa      	strb	r2, [r7, #23]
 800a122:	461a      	mov	r2, r3
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4413      	add	r3, r2
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	7812      	ldrb	r2, [r2, #0]
 800a12c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	75fa      	strb	r2, [r7, #23]
 800a134:	461a      	mov	r2, r3
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	4413      	add	r3, r2
 800a13a:	2203      	movs	r2, #3
 800a13c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a13e:	e012      	b.n	800a166 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	1c5a      	adds	r2, r3, #1
 800a144:	60fa      	str	r2, [r7, #12]
 800a146:	7dfa      	ldrb	r2, [r7, #23]
 800a148:	1c51      	adds	r1, r2, #1
 800a14a:	75f9      	strb	r1, [r7, #23]
 800a14c:	4611      	mov	r1, r2
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	440a      	add	r2, r1
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a156:	7dfb      	ldrb	r3, [r7, #23]
 800a158:	1c5a      	adds	r2, r3, #1
 800a15a:	75fa      	strb	r2, [r7, #23]
 800a15c:	461a      	mov	r2, r3
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	4413      	add	r3, r2
 800a162:	2200      	movs	r2, #0
 800a164:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1e8      	bne.n	800a140 <USBD_GetString+0x4e>
    }
  }
}
 800a16e:	bf00      	nop
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a176:	b480      	push	{r7}
 800a178:	b085      	sub	sp, #20
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a17e:	2300      	movs	r3, #0
 800a180:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a182:	e005      	b.n	800a190 <USBD_GetLen+0x1a>
  {
    len++;
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	3301      	adds	r3, #1
 800a188:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	3301      	adds	r3, #1
 800a18e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1f5      	bne.n	800a184 <USBD_GetLen+0xe>
  }

  return len;
 800a198:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr

0800a1a4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a1ba:	88fa      	ldrh	r2, [r7, #6]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a1c0:	88fa      	ldrh	r2, [r7, #6]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1c6:	88fb      	ldrh	r3, [r7, #6]
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 fc71 	bl	800aab4 <USBD_LL_Transmit>

  return USBD_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1ea:	88fb      	ldrh	r3, [r7, #6]
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 fc5f 	bl	800aab4 <USBD_LL_Transmit>

  return USBD_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	4613      	mov	r3, r2
 800a20c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2203      	movs	r2, #3
 800a212:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a216:	88fa      	ldrh	r2, [r7, #6]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a21e:	88fa      	ldrh	r2, [r7, #6]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a226:	88fb      	ldrh	r3, [r7, #6]
 800a228:	68ba      	ldr	r2, [r7, #8]
 800a22a:	2100      	movs	r1, #0
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 fc64 	bl	800aafa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	4613      	mov	r3, r2
 800a248:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a24a:	88fb      	ldrh	r3, [r7, #6]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	2100      	movs	r1, #0
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 fc52 	bl	800aafa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2204      	movs	r2, #4
 800a26c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a270:	2300      	movs	r3, #0
 800a272:	2200      	movs	r2, #0
 800a274:	2100      	movs	r1, #0
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fc1c 	bl	800aab4 <USBD_LL_Transmit>

  return USBD_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b082      	sub	sp, #8
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2205      	movs	r2, #5
 800a292:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a296:	2300      	movs	r3, #0
 800a298:	2200      	movs	r2, #0
 800a29a:	2100      	movs	r1, #0
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 fc2c 	bl	800aafa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	4912      	ldr	r1, [pc, #72]	@ (800a2fc <MX_USB_DEVICE_Init+0x50>)
 800a2b4:	4812      	ldr	r0, [pc, #72]	@ (800a300 <MX_USB_DEVICE_Init+0x54>)
 800a2b6:	f7fe ff62 	bl	800917e <USBD_Init>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a2c0:	f7f6 feda 	bl	8001078 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a2c4:	490f      	ldr	r1, [pc, #60]	@ (800a304 <MX_USB_DEVICE_Init+0x58>)
 800a2c6:	480e      	ldr	r0, [pc, #56]	@ (800a300 <MX_USB_DEVICE_Init+0x54>)
 800a2c8:	f7fe ff84 	bl	80091d4 <USBD_RegisterClass>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2d2:	f7f6 fed1 	bl	8001078 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a2d6:	490c      	ldr	r1, [pc, #48]	@ (800a308 <MX_USB_DEVICE_Init+0x5c>)
 800a2d8:	4809      	ldr	r0, [pc, #36]	@ (800a300 <MX_USB_DEVICE_Init+0x54>)
 800a2da:	f7fe feb5 	bl	8009048 <USBD_CDC_RegisterInterface>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2e4:	f7f6 fec8 	bl	8001078 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2e8:	4805      	ldr	r0, [pc, #20]	@ (800a300 <MX_USB_DEVICE_Init+0x54>)
 800a2ea:	f7fe ff8c 	bl	8009206 <USBD_Start>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2f4:	f7f6 fec0 	bl	8001078 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2f8:	bf00      	nop
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	20000150 	.word	0x20000150
 800a300:	20000418 	.word	0x20000418
 800a304:	2000003c 	.word	0x2000003c
 800a308:	20000140 	.word	0x20000140

0800a30c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a310:	2200      	movs	r2, #0
 800a312:	4905      	ldr	r1, [pc, #20]	@ (800a328 <CDC_Init_FS+0x1c>)
 800a314:	4805      	ldr	r0, [pc, #20]	@ (800a32c <CDC_Init_FS+0x20>)
 800a316:	f7fe fead 	bl	8009074 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a31a:	4905      	ldr	r1, [pc, #20]	@ (800a330 <CDC_Init_FS+0x24>)
 800a31c:	4803      	ldr	r0, [pc, #12]	@ (800a32c <CDC_Init_FS+0x20>)
 800a31e:	f7fe fec2 	bl	80090a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a322:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a324:	4618      	mov	r0, r3
 800a326:	bd80      	pop	{r7, pc}
 800a328:	20000adc 	.word	0x20000adc
 800a32c:	20000418 	.word	0x20000418
 800a330:	200006dc 	.word	0x200006dc

0800a334 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a334:	b480      	push	{r7}
 800a336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a338:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bc80      	pop	{r7}
 800a340:	4770      	bx	lr
	...

0800a344 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
 800a350:	4613      	mov	r3, r2
 800a352:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	2b23      	cmp	r3, #35	@ 0x23
 800a358:	d84a      	bhi.n	800a3f0 <CDC_Control_FS+0xac>
 800a35a:	a201      	add	r2, pc, #4	@ (adr r2, 800a360 <CDC_Control_FS+0x1c>)
 800a35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a360:	0800a3f1 	.word	0x0800a3f1
 800a364:	0800a3f1 	.word	0x0800a3f1
 800a368:	0800a3f1 	.word	0x0800a3f1
 800a36c:	0800a3f1 	.word	0x0800a3f1
 800a370:	0800a3f1 	.word	0x0800a3f1
 800a374:	0800a3f1 	.word	0x0800a3f1
 800a378:	0800a3f1 	.word	0x0800a3f1
 800a37c:	0800a3f1 	.word	0x0800a3f1
 800a380:	0800a3f1 	.word	0x0800a3f1
 800a384:	0800a3f1 	.word	0x0800a3f1
 800a388:	0800a3f1 	.word	0x0800a3f1
 800a38c:	0800a3f1 	.word	0x0800a3f1
 800a390:	0800a3f1 	.word	0x0800a3f1
 800a394:	0800a3f1 	.word	0x0800a3f1
 800a398:	0800a3f1 	.word	0x0800a3f1
 800a39c:	0800a3f1 	.word	0x0800a3f1
 800a3a0:	0800a3f1 	.word	0x0800a3f1
 800a3a4:	0800a3f1 	.word	0x0800a3f1
 800a3a8:	0800a3f1 	.word	0x0800a3f1
 800a3ac:	0800a3f1 	.word	0x0800a3f1
 800a3b0:	0800a3f1 	.word	0x0800a3f1
 800a3b4:	0800a3f1 	.word	0x0800a3f1
 800a3b8:	0800a3f1 	.word	0x0800a3f1
 800a3bc:	0800a3f1 	.word	0x0800a3f1
 800a3c0:	0800a3f1 	.word	0x0800a3f1
 800a3c4:	0800a3f1 	.word	0x0800a3f1
 800a3c8:	0800a3f1 	.word	0x0800a3f1
 800a3cc:	0800a3f1 	.word	0x0800a3f1
 800a3d0:	0800a3f1 	.word	0x0800a3f1
 800a3d4:	0800a3f1 	.word	0x0800a3f1
 800a3d8:	0800a3f1 	.word	0x0800a3f1
 800a3dc:	0800a3f1 	.word	0x0800a3f1
 800a3e0:	0800a3f1 	.word	0x0800a3f1
 800a3e4:	0800a3f1 	.word	0x0800a3f1
 800a3e8:	0800a3f1 	.word	0x0800a3f1
 800a3ec:	0800a3f1 	.word	0x0800a3f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a3f0:	bf00      	nop
  }

  return (USBD_OK);
 800a3f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bc80      	pop	{r7}
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop

0800a400 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a40a:	6879      	ldr	r1, [r7, #4]
 800a40c:	480b      	ldr	r0, [pc, #44]	@ (800a43c <CDC_Receive_FS+0x3c>)
 800a40e:	f7fe fe4a 	bl	80090a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a412:	480a      	ldr	r0, [pc, #40]	@ (800a43c <CDC_Receive_FS+0x3c>)
 800a414:	f7fe fe89 	bl	800912a <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4619      	mov	r1, r3
 800a41e:	4808      	ldr	r0, [pc, #32]	@ (800a440 <CDC_Receive_FS+0x40>)
 800a420:	f7f6 fb20 	bl	8000a64 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	461a      	mov	r2, r3
 800a42a:	2100      	movs	r1, #0
 800a42c:	4804      	ldr	r0, [pc, #16]	@ (800a440 <CDC_Receive_FS+0x40>)
 800a42e:	f000 fbe7 	bl	800ac00 <memset>
  return (USBD_OK);
 800a432:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a434:	4618      	mov	r0, r3
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	20000418 	.word	0x20000418
 800a440:	200006dc 	.word	0x200006dc

0800a444 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a454:	4b0d      	ldr	r3, [pc, #52]	@ (800a48c <CDC_Transmit_FS+0x48>)
 800a456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a45a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a466:	2301      	movs	r3, #1
 800a468:	e00b      	b.n	800a482 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a46a:	887b      	ldrh	r3, [r7, #2]
 800a46c:	461a      	mov	r2, r3
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	4806      	ldr	r0, [pc, #24]	@ (800a48c <CDC_Transmit_FS+0x48>)
 800a472:	f7fe fdff 	bl	8009074 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a476:	4805      	ldr	r0, [pc, #20]	@ (800a48c <CDC_Transmit_FS+0x48>)
 800a478:	f7fe fe28 	bl	80090cc <USBD_CDC_TransmitPacket>
 800a47c:	4603      	mov	r3, r0
 800a47e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a480:	7bfb      	ldrb	r3, [r7, #15]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	20000418 	.word	0x20000418

0800a490 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	6039      	str	r1, [r7, #0]
 800a49a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2212      	movs	r2, #18
 800a4a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4a2:	4b03      	ldr	r3, [pc, #12]	@ (800a4b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	2000016c 	.word	0x2000016c

0800a4b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	6039      	str	r1, [r7, #0]
 800a4be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	2204      	movs	r2, #4
 800a4c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a4c6:	4b03      	ldr	r3, [pc, #12]	@ (800a4d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bc80      	pop	{r7}
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	20000180 	.word	0x20000180

0800a4d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	6039      	str	r1, [r7, #0]
 800a4e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4e4:	79fb      	ldrb	r3, [r7, #7]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d105      	bne.n	800a4f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	4907      	ldr	r1, [pc, #28]	@ (800a50c <USBD_FS_ProductStrDescriptor+0x34>)
 800a4ee:	4808      	ldr	r0, [pc, #32]	@ (800a510 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4f0:	f7ff fdff 	bl	800a0f2 <USBD_GetString>
 800a4f4:	e004      	b.n	800a500 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	4904      	ldr	r1, [pc, #16]	@ (800a50c <USBD_FS_ProductStrDescriptor+0x34>)
 800a4fa:	4805      	ldr	r0, [pc, #20]	@ (800a510 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4fc:	f7ff fdf9 	bl	800a0f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a500:	4b02      	ldr	r3, [pc, #8]	@ (800a50c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a502:	4618      	mov	r0, r3
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20000edc 	.word	0x20000edc
 800a510:	0800ac70 	.word	0x0800ac70

0800a514 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	6039      	str	r1, [r7, #0]
 800a51e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	4904      	ldr	r1, [pc, #16]	@ (800a534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a524:	4804      	ldr	r0, [pc, #16]	@ (800a538 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a526:	f7ff fde4 	bl	800a0f2 <USBD_GetString>
  return USBD_StrDesc;
 800a52a:	4b02      	ldr	r3, [pc, #8]	@ (800a534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	20000edc 	.word	0x20000edc
 800a538:	0800ac88 	.word	0x0800ac88

0800a53c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	4603      	mov	r3, r0
 800a544:	6039      	str	r1, [r7, #0]
 800a546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	221a      	movs	r2, #26
 800a54c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a54e:	f000 f843 	bl	800a5d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a552:	4b02      	ldr	r3, [pc, #8]	@ (800a55c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a554:	4618      	mov	r0, r3
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	20000184 	.word	0x20000184

0800a560 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	6039      	str	r1, [r7, #0]
 800a56a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d105      	bne.n	800a57e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	4907      	ldr	r1, [pc, #28]	@ (800a594 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a576:	4808      	ldr	r0, [pc, #32]	@ (800a598 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a578:	f7ff fdbb 	bl	800a0f2 <USBD_GetString>
 800a57c:	e004      	b.n	800a588 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	4904      	ldr	r1, [pc, #16]	@ (800a594 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a582:	4805      	ldr	r0, [pc, #20]	@ (800a598 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a584:	f7ff fdb5 	bl	800a0f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a588:	4b02      	ldr	r3, [pc, #8]	@ (800a594 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20000edc 	.word	0x20000edc
 800a598:	0800ac9c 	.word	0x0800ac9c

0800a59c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	6039      	str	r1, [r7, #0]
 800a5a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5a8:	79fb      	ldrb	r3, [r7, #7]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d105      	bne.n	800a5ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	4907      	ldr	r1, [pc, #28]	@ (800a5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5b2:	4808      	ldr	r0, [pc, #32]	@ (800a5d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5b4:	f7ff fd9d 	bl	800a0f2 <USBD_GetString>
 800a5b8:	e004      	b.n	800a5c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	4904      	ldr	r1, [pc, #16]	@ (800a5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5be:	4805      	ldr	r0, [pc, #20]	@ (800a5d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5c0:	f7ff fd97 	bl	800a0f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5c4:	4b02      	ldr	r3, [pc, #8]	@ (800a5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20000edc 	.word	0x20000edc
 800a5d4:	0800aca8 	.word	0x0800aca8

0800a5d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5de:	4b0f      	ldr	r3, [pc, #60]	@ (800a61c <Get_SerialNum+0x44>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a620 <Get_SerialNum+0x48>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a624 <Get_SerialNum+0x4c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d009      	beq.n	800a612 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a5fe:	2208      	movs	r2, #8
 800a600:	4909      	ldr	r1, [pc, #36]	@ (800a628 <Get_SerialNum+0x50>)
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f000 f814 	bl	800a630 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a608:	2204      	movs	r2, #4
 800a60a:	4908      	ldr	r1, [pc, #32]	@ (800a62c <Get_SerialNum+0x54>)
 800a60c:	68b8      	ldr	r0, [r7, #8]
 800a60e:	f000 f80f 	bl	800a630 <IntToUnicode>
  }
}
 800a612:	bf00      	nop
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	1ffff7e8 	.word	0x1ffff7e8
 800a620:	1ffff7ec 	.word	0x1ffff7ec
 800a624:	1ffff7f0 	.word	0x1ffff7f0
 800a628:	20000186 	.word	0x20000186
 800a62c:	20000196 	.word	0x20000196

0800a630 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a630:	b480      	push	{r7}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4613      	mov	r3, r2
 800a63c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a642:	2300      	movs	r3, #0
 800a644:	75fb      	strb	r3, [r7, #23]
 800a646:	e027      	b.n	800a698 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	0f1b      	lsrs	r3, r3, #28
 800a64c:	2b09      	cmp	r3, #9
 800a64e:	d80b      	bhi.n	800a668 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	0f1b      	lsrs	r3, r3, #28
 800a654:	b2da      	uxtb	r2, r3
 800a656:	7dfb      	ldrb	r3, [r7, #23]
 800a658:	005b      	lsls	r3, r3, #1
 800a65a:	4619      	mov	r1, r3
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	440b      	add	r3, r1
 800a660:	3230      	adds	r2, #48	@ 0x30
 800a662:	b2d2      	uxtb	r2, r2
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	e00a      	b.n	800a67e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	0f1b      	lsrs	r3, r3, #28
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	4619      	mov	r1, r3
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	440b      	add	r3, r1
 800a678:	3237      	adds	r2, #55	@ 0x37
 800a67a:	b2d2      	uxtb	r2, r2
 800a67c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	011b      	lsls	r3, r3, #4
 800a682:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	3301      	adds	r3, #1
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	4413      	add	r3, r2
 800a68e:	2200      	movs	r2, #0
 800a690:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a692:	7dfb      	ldrb	r3, [r7, #23]
 800a694:	3301      	adds	r3, #1
 800a696:	75fb      	strb	r3, [r7, #23]
 800a698:	7dfa      	ldrb	r2, [r7, #23]
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d3d3      	bcc.n	800a648 <IntToUnicode+0x18>
  }
}
 800a6a0:	bf00      	nop
 800a6a2:	bf00      	nop
 800a6a4:	371c      	adds	r7, #28
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bc80      	pop	{r7}
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a0d      	ldr	r2, [pc, #52]	@ (800a6f0 <HAL_PCD_MspInit+0x44>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d113      	bne.n	800a6e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a6be:	4b0d      	ldr	r3, [pc, #52]	@ (800a6f4 <HAL_PCD_MspInit+0x48>)
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	4a0c      	ldr	r2, [pc, #48]	@ (800a6f4 <HAL_PCD_MspInit+0x48>)
 800a6c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a6c8:	61d3      	str	r3, [r2, #28]
 800a6ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f4 <HAL_PCD_MspInit+0x48>)
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2100      	movs	r1, #0
 800a6da:	2014      	movs	r0, #20
 800a6dc:	f7f7 fd03 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a6e0:	2014      	movs	r0, #20
 800a6e2:	f7f7 fd1c 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	40005c00 	.word	0x40005c00
 800a6f4:	40021000 	.word	0x40021000

0800a6f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	f7fe fdc1 	bl	8009296 <USBD_LL_SetupStage>
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a72e:	78fa      	ldrb	r2, [r7, #3]
 800a730:	6879      	ldr	r1, [r7, #4]
 800a732:	4613      	mov	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	00db      	lsls	r3, r3, #3
 800a73a:	440b      	add	r3, r1
 800a73c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	4619      	mov	r1, r3
 800a746:	f7fe fdf3 	bl	8009330 <USBD_LL_DataOutStage>
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b082      	sub	sp, #8
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	460b      	mov	r3, r1
 800a75c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a764:	78fa      	ldrb	r2, [r7, #3]
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	00db      	lsls	r3, r3, #3
 800a770:	440b      	add	r3, r1
 800a772:	3324      	adds	r3, #36	@ 0x24
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	78fb      	ldrb	r3, [r7, #3]
 800a778:	4619      	mov	r1, r3
 800a77a:	f7fe fe4a 	bl	8009412 <USBD_LL_DataInStage>
}
 800a77e:	bf00      	nop
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe ff5a 	bl	800964e <USBD_LL_SOF>
}
 800a79a:	bf00      	nop
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	799b      	ldrb	r3, [r3, #6]
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d001      	beq.n	800a7ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a7b6:	f7f6 fc5f 	bl	8001078 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7c0:	7bfa      	ldrb	r2, [r7, #15]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe ff0a 	bl	80095de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fe fec3 	bl	800955c <USBD_LL_Reset>
}
 800a7d6:	bf00      	nop
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fe ff04 	bl	80095fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	7a9b      	ldrb	r3, [r3, #10]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d005      	beq.n	800a808 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7fc:	4b04      	ldr	r3, [pc, #16]	@ (800a810 <HAL_PCD_SuspendCallback+0x30>)
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	4a03      	ldr	r2, [pc, #12]	@ (800a810 <HAL_PCD_SuspendCallback+0x30>)
 800a802:	f043 0306 	orr.w	r3, r3, #6
 800a806:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	e000ed00 	.word	0xe000ed00

0800a814 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe fefe 	bl	8009624 <USBD_LL_Resume>
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a838:	4a28      	ldr	r2, [pc, #160]	@ (800a8dc <USBD_LL_Init+0xac>)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a26      	ldr	r2, [pc, #152]	@ (800a8dc <USBD_LL_Init+0xac>)
 800a844:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a848:	4b24      	ldr	r3, [pc, #144]	@ (800a8dc <USBD_LL_Init+0xac>)
 800a84a:	4a25      	ldr	r2, [pc, #148]	@ (800a8e0 <USBD_LL_Init+0xb0>)
 800a84c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a84e:	4b23      	ldr	r3, [pc, #140]	@ (800a8dc <USBD_LL_Init+0xac>)
 800a850:	2208      	movs	r2, #8
 800a852:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a854:	4b21      	ldr	r3, [pc, #132]	@ (800a8dc <USBD_LL_Init+0xac>)
 800a856:	2202      	movs	r2, #2
 800a858:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a85a:	4b20      	ldr	r3, [pc, #128]	@ (800a8dc <USBD_LL_Init+0xac>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a860:	4b1e      	ldr	r3, [pc, #120]	@ (800a8dc <USBD_LL_Init+0xac>)
 800a862:	2200      	movs	r2, #0
 800a864:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a866:	4b1d      	ldr	r3, [pc, #116]	@ (800a8dc <USBD_LL_Init+0xac>)
 800a868:	2200      	movs	r2, #0
 800a86a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a86c:	481b      	ldr	r0, [pc, #108]	@ (800a8dc <USBD_LL_Init+0xac>)
 800a86e:	f7f8 f8df 	bl	8002a30 <HAL_PCD_Init>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a878:	f7f6 fbfe 	bl	8001078 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a882:	2318      	movs	r3, #24
 800a884:	2200      	movs	r2, #0
 800a886:	2100      	movs	r1, #0
 800a888:	f7f9 fdf0 	bl	800446c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a892:	2358      	movs	r3, #88	@ 0x58
 800a894:	2200      	movs	r2, #0
 800a896:	2180      	movs	r1, #128	@ 0x80
 800a898:	f7f9 fde8 	bl	800446c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8a2:	23c0      	movs	r3, #192	@ 0xc0
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2181      	movs	r1, #129	@ 0x81
 800a8a8:	f7f9 fde0 	bl	800446c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8b2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	f7f9 fdd7 	bl	800446c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2182      	movs	r1, #130	@ 0x82
 800a8cc:	f7f9 fdce 	bl	800446c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	200010dc 	.word	0x200010dc
 800a8e0:	40005c00 	.word	0x40005c00

0800a8e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7f8 f98e 	bl	8002c1c <HAL_PCD_Start>
 800a900:	4603      	mov	r3, r0
 800a902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a904:	7bfb      	ldrb	r3, [r7, #15]
 800a906:	4618      	mov	r0, r3
 800a908:	f000 f94e 	bl	800aba8 <USBD_Get_USB_Status>
 800a90c:	4603      	mov	r3, r0
 800a90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a910:	7bbb      	ldrb	r3, [r7, #14]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	4608      	mov	r0, r1
 800a924:	4611      	mov	r1, r2
 800a926:	461a      	mov	r2, r3
 800a928:	4603      	mov	r3, r0
 800a92a:	70fb      	strb	r3, [r7, #3]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70bb      	strb	r3, [r7, #2]
 800a930:	4613      	mov	r3, r2
 800a932:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a942:	78bb      	ldrb	r3, [r7, #2]
 800a944:	883a      	ldrh	r2, [r7, #0]
 800a946:	78f9      	ldrb	r1, [r7, #3]
 800a948:	f7f8 fae2 	bl	8002f10 <HAL_PCD_EP_Open>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 f928 	bl	800aba8 <USBD_Get_USB_Status>
 800a958:	4603      	mov	r3, r0
 800a95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	460b      	mov	r3, r1
 800a970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a980:	78fa      	ldrb	r2, [r7, #3]
 800a982:	4611      	mov	r1, r2
 800a984:	4618      	mov	r0, r3
 800a986:	f7f8 fb20 	bl	8002fca <HAL_PCD_EP_Close>
 800a98a:	4603      	mov	r3, r0
 800a98c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
 800a990:	4618      	mov	r0, r3
 800a992:	f000 f909 	bl	800aba8 <USBD_Get_USB_Status>
 800a996:	4603      	mov	r3, r0
 800a998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a9be:	78fa      	ldrb	r2, [r7, #3]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7f8 fbc8 	bl	8003158 <HAL_PCD_EP_SetStall>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 f8ea 	bl	800aba8 <USBD_Get_USB_Status>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a9fc:	78fa      	ldrb	r2, [r7, #3]
 800a9fe:	4611      	mov	r1, r2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7f8 fc09 	bl	8003218 <HAL_PCD_EP_ClrStall>
 800aa06:	4603      	mov	r3, r0
 800aa08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 f8cb 	bl	800aba8 <USBD_Get_USB_Status>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa16:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	da0b      	bge.n	800aa54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa3c:	78fb      	ldrb	r3, [r7, #3]
 800aa3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa42:	68f9      	ldr	r1, [r7, #12]
 800aa44:	4613      	mov	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4413      	add	r3, r2
 800aa4a:	00db      	lsls	r3, r3, #3
 800aa4c:	440b      	add	r3, r1
 800aa4e:	3312      	adds	r3, #18
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	e00b      	b.n	800aa6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa54:	78fb      	ldrb	r3, [r7, #3]
 800aa56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa5a:	68f9      	ldr	r1, [r7, #12]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	00db      	lsls	r3, r3, #3
 800aa64:	440b      	add	r3, r1
 800aa66:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800aa6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bc80      	pop	{r7}
 800aa74:	4770      	bx	lr

0800aa76 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa90:	78fa      	ldrb	r2, [r7, #3]
 800aa92:	4611      	mov	r1, r2
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7f8 fa17 	bl	8002ec8 <HAL_PCD_SetAddress>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 f881 	bl	800aba8 <USBD_Get_USB_Status>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	607a      	str	r2, [r7, #4]
 800aabe:	461a      	mov	r2, r3
 800aac0:	460b      	mov	r3, r1
 800aac2:	72fb      	strb	r3, [r7, #11]
 800aac4:	4613      	mov	r3, r2
 800aac6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aad6:	893b      	ldrh	r3, [r7, #8]
 800aad8:	7af9      	ldrb	r1, [r7, #11]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	f7f8 fb05 	bl	80030ea <HAL_PCD_EP_Transmit>
 800aae0:	4603      	mov	r3, r0
 800aae2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 f85e 	bl	800aba8 <USBD_Get_USB_Status>
 800aaec:	4603      	mov	r3, r0
 800aaee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aaf0:	7dbb      	ldrb	r3, [r7, #22]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3718      	adds	r7, #24
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b086      	sub	sp, #24
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	60f8      	str	r0, [r7, #12]
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	461a      	mov	r2, r3
 800ab06:	460b      	mov	r3, r1
 800ab08:	72fb      	strb	r3, [r7, #11]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab1c:	893b      	ldrh	r3, [r7, #8]
 800ab1e:	7af9      	ldrb	r1, [r7, #11]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	f7f8 fa9a 	bl	800305a <HAL_PCD_EP_Receive>
 800ab26:	4603      	mov	r3, r0
 800ab28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 f83b 	bl	800aba8 <USBD_Get_USB_Status>
 800ab32:	4603      	mov	r3, r0
 800ab34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab36:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3718      	adds	r7, #24
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab52:	78fa      	ldrb	r2, [r7, #3]
 800ab54:	4611      	mov	r1, r2
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7f8 fab0 	bl	80030bc <HAL_PCD_EP_GetRxCount>
 800ab5c:	4603      	mov	r3, r0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
	...

0800ab68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab70:	4b02      	ldr	r3, [pc, #8]	@ (800ab7c <USBD_static_malloc+0x14>)
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bc80      	pop	{r7}
 800ab7a:	4770      	bx	lr
 800ab7c:	200013b4 	.word	0x200013b4

0800ab80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]

}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bc80      	pop	{r7}
 800ab90:	4770      	bx	lr

0800ab92 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ab9e:	bf00      	nop
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bc80      	pop	{r7}
 800aba6:	4770      	bx	lr

0800aba8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d817      	bhi.n	800abec <USBD_Get_USB_Status+0x44>
 800abbc:	a201      	add	r2, pc, #4	@ (adr r2, 800abc4 <USBD_Get_USB_Status+0x1c>)
 800abbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc2:	bf00      	nop
 800abc4:	0800abd5 	.word	0x0800abd5
 800abc8:	0800abdb 	.word	0x0800abdb
 800abcc:	0800abe1 	.word	0x0800abe1
 800abd0:	0800abe7 	.word	0x0800abe7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73fb      	strb	r3, [r7, #15]
    break;
 800abd8:	e00b      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abda:	2302      	movs	r3, #2
 800abdc:	73fb      	strb	r3, [r7, #15]
    break;
 800abde:	e008      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abe0:	2301      	movs	r3, #1
 800abe2:	73fb      	strb	r3, [r7, #15]
    break;
 800abe4:	e005      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abe6:	2302      	movs	r3, #2
 800abe8:	73fb      	strb	r3, [r7, #15]
    break;
 800abea:	e002      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abec:	2302      	movs	r3, #2
 800abee:	73fb      	strb	r3, [r7, #15]
    break;
 800abf0:	bf00      	nop
  }
  return usb_status;
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bc80      	pop	{r7}
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop

0800ac00 <memset>:
 800ac00:	4603      	mov	r3, r0
 800ac02:	4402      	add	r2, r0
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d100      	bne.n	800ac0a <memset+0xa>
 800ac08:	4770      	bx	lr
 800ac0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac0e:	e7f9      	b.n	800ac04 <memset+0x4>

0800ac10 <__libc_init_array>:
 800ac10:	b570      	push	{r4, r5, r6, lr}
 800ac12:	2600      	movs	r6, #0
 800ac14:	4d0c      	ldr	r5, [pc, #48]	@ (800ac48 <__libc_init_array+0x38>)
 800ac16:	4c0d      	ldr	r4, [pc, #52]	@ (800ac4c <__libc_init_array+0x3c>)
 800ac18:	1b64      	subs	r4, r4, r5
 800ac1a:	10a4      	asrs	r4, r4, #2
 800ac1c:	42a6      	cmp	r6, r4
 800ac1e:	d109      	bne.n	800ac34 <__libc_init_array+0x24>
 800ac20:	f000 f81a 	bl	800ac58 <_init>
 800ac24:	2600      	movs	r6, #0
 800ac26:	4d0a      	ldr	r5, [pc, #40]	@ (800ac50 <__libc_init_array+0x40>)
 800ac28:	4c0a      	ldr	r4, [pc, #40]	@ (800ac54 <__libc_init_array+0x44>)
 800ac2a:	1b64      	subs	r4, r4, r5
 800ac2c:	10a4      	asrs	r4, r4, #2
 800ac2e:	42a6      	cmp	r6, r4
 800ac30:	d105      	bne.n	800ac3e <__libc_init_array+0x2e>
 800ac32:	bd70      	pop	{r4, r5, r6, pc}
 800ac34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac38:	4798      	blx	r3
 800ac3a:	3601      	adds	r6, #1
 800ac3c:	e7ee      	b.n	800ac1c <__libc_init_array+0xc>
 800ac3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac42:	4798      	blx	r3
 800ac44:	3601      	adds	r6, #1
 800ac46:	e7f2      	b.n	800ac2e <__libc_init_array+0x1e>
 800ac48:	0800acf8 	.word	0x0800acf8
 800ac4c:	0800acf8 	.word	0x0800acf8
 800ac50:	0800acf8 	.word	0x0800acf8
 800ac54:	0800acfc 	.word	0x0800acfc

0800ac58 <_init>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	bf00      	nop
 800ac5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac5e:	bc08      	pop	{r3}
 800ac60:	469e      	mov	lr, r3
 800ac62:	4770      	bx	lr

0800ac64 <_fini>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	bf00      	nop
 800ac68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6a:	bc08      	pop	{r3}
 800ac6c:	469e      	mov	lr, r3
 800ac6e:	4770      	bx	lr
